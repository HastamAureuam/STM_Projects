
lab5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004804  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002cb8  080049a4  080049a4  000149a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800765c  0800765c  000200a0  2**0
                  CONTENTS
  4 .ARM          00000008  0800765c  0800765c  0001765c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007664  08007664  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007664  08007664  00017664  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007668  08007668  00017668  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  0800766c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  200000a0  0800770c  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000029c  0800770c  0002029c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d0f5  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022f4  00000000  00000000  0002d1c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cd0  00000000  00000000  0002f4c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b88  00000000  00000000  00030190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017ff5  00000000  00000000  00030d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f250  00000000  00000000  00048d0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008eee3  00000000  00000000  00057f5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e6e40  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039e8  00000000  00000000  000e6e90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000a0 	.word	0x200000a0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800498c 	.word	0x0800498c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000a4 	.word	0x200000a4
 80001dc:	0800498c 	.word	0x0800498c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2uiz>:
 8000a2c:	004a      	lsls	r2, r1, #1
 8000a2e:	d211      	bcs.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d211      	bcs.n	8000a5a <__aeabi_d2uiz+0x2e>
 8000a36:	d50d      	bpl.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d40e      	bmi.n	8000a60 <__aeabi_d2uiz+0x34>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_d2uiz+0x3a>
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0000 	mov.w	r0, #0
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_d2f>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a74:	bf24      	itt	cs
 8000a76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a7e:	d90d      	bls.n	8000a9c <__aeabi_d2f+0x30>
 8000a80:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a8c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a94:	bf08      	it	eq
 8000a96:	f020 0001 	biceq.w	r0, r0, #1
 8000a9a:	4770      	bx	lr
 8000a9c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aa0:	d121      	bne.n	8000ae6 <__aeabi_d2f+0x7a>
 8000aa2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aa6:	bfbc      	itt	lt
 8000aa8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000aac:	4770      	bxlt	lr
 8000aae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ab2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab6:	f1c2 0218 	rsb	r2, r2, #24
 8000aba:	f1c2 0c20 	rsb	ip, r2, #32
 8000abe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ac2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	f040 0001 	orrne.w	r0, r0, #1
 8000acc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad8:	ea40 000c 	orr.w	r0, r0, ip
 8000adc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae4:	e7cc      	b.n	8000a80 <__aeabi_d2f+0x14>
 8000ae6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aea:	d107      	bne.n	8000afc <__aeabi_d2f+0x90>
 8000aec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af0:	bf1e      	ittt	ne
 8000af2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000af6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000afa:	4770      	bxne	lr
 8000afc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop

08000b0c <__aeabi_uldivmod>:
 8000b0c:	b953      	cbnz	r3, 8000b24 <__aeabi_uldivmod+0x18>
 8000b0e:	b94a      	cbnz	r2, 8000b24 <__aeabi_uldivmod+0x18>
 8000b10:	2900      	cmp	r1, #0
 8000b12:	bf08      	it	eq
 8000b14:	2800      	cmpeq	r0, #0
 8000b16:	bf1c      	itt	ne
 8000b18:	f04f 31ff 	movne.w	r1, #4294967295
 8000b1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b20:	f000 b974 	b.w	8000e0c <__aeabi_idiv0>
 8000b24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b2c:	f000 f806 	bl	8000b3c <__udivmoddi4>
 8000b30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b38:	b004      	add	sp, #16
 8000b3a:	4770      	bx	lr

08000b3c <__udivmoddi4>:
 8000b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b40:	9d08      	ldr	r5, [sp, #32]
 8000b42:	4604      	mov	r4, r0
 8000b44:	468e      	mov	lr, r1
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d14d      	bne.n	8000be6 <__udivmoddi4+0xaa>
 8000b4a:	428a      	cmp	r2, r1
 8000b4c:	4694      	mov	ip, r2
 8000b4e:	d969      	bls.n	8000c24 <__udivmoddi4+0xe8>
 8000b50:	fab2 f282 	clz	r2, r2
 8000b54:	b152      	cbz	r2, 8000b6c <__udivmoddi4+0x30>
 8000b56:	fa01 f302 	lsl.w	r3, r1, r2
 8000b5a:	f1c2 0120 	rsb	r1, r2, #32
 8000b5e:	fa20 f101 	lsr.w	r1, r0, r1
 8000b62:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b66:	ea41 0e03 	orr.w	lr, r1, r3
 8000b6a:	4094      	lsls	r4, r2
 8000b6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b70:	0c21      	lsrs	r1, r4, #16
 8000b72:	fbbe f6f8 	udiv	r6, lr, r8
 8000b76:	fa1f f78c 	uxth.w	r7, ip
 8000b7a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b7e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b82:	fb06 f107 	mul.w	r1, r6, r7
 8000b86:	4299      	cmp	r1, r3
 8000b88:	d90a      	bls.n	8000ba0 <__udivmoddi4+0x64>
 8000b8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b8e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b92:	f080 811f 	bcs.w	8000dd4 <__udivmoddi4+0x298>
 8000b96:	4299      	cmp	r1, r3
 8000b98:	f240 811c 	bls.w	8000dd4 <__udivmoddi4+0x298>
 8000b9c:	3e02      	subs	r6, #2
 8000b9e:	4463      	add	r3, ip
 8000ba0:	1a5b      	subs	r3, r3, r1
 8000ba2:	b2a4      	uxth	r4, r4
 8000ba4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ba8:	fb08 3310 	mls	r3, r8, r0, r3
 8000bac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bb0:	fb00 f707 	mul.w	r7, r0, r7
 8000bb4:	42a7      	cmp	r7, r4
 8000bb6:	d90a      	bls.n	8000bce <__udivmoddi4+0x92>
 8000bb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bbc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bc0:	f080 810a 	bcs.w	8000dd8 <__udivmoddi4+0x29c>
 8000bc4:	42a7      	cmp	r7, r4
 8000bc6:	f240 8107 	bls.w	8000dd8 <__udivmoddi4+0x29c>
 8000bca:	4464      	add	r4, ip
 8000bcc:	3802      	subs	r0, #2
 8000bce:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bd2:	1be4      	subs	r4, r4, r7
 8000bd4:	2600      	movs	r6, #0
 8000bd6:	b11d      	cbz	r5, 8000be0 <__udivmoddi4+0xa4>
 8000bd8:	40d4      	lsrs	r4, r2
 8000bda:	2300      	movs	r3, #0
 8000bdc:	e9c5 4300 	strd	r4, r3, [r5]
 8000be0:	4631      	mov	r1, r6
 8000be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be6:	428b      	cmp	r3, r1
 8000be8:	d909      	bls.n	8000bfe <__udivmoddi4+0xc2>
 8000bea:	2d00      	cmp	r5, #0
 8000bec:	f000 80ef 	beq.w	8000dce <__udivmoddi4+0x292>
 8000bf0:	2600      	movs	r6, #0
 8000bf2:	e9c5 0100 	strd	r0, r1, [r5]
 8000bf6:	4630      	mov	r0, r6
 8000bf8:	4631      	mov	r1, r6
 8000bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfe:	fab3 f683 	clz	r6, r3
 8000c02:	2e00      	cmp	r6, #0
 8000c04:	d14a      	bne.n	8000c9c <__udivmoddi4+0x160>
 8000c06:	428b      	cmp	r3, r1
 8000c08:	d302      	bcc.n	8000c10 <__udivmoddi4+0xd4>
 8000c0a:	4282      	cmp	r2, r0
 8000c0c:	f200 80f9 	bhi.w	8000e02 <__udivmoddi4+0x2c6>
 8000c10:	1a84      	subs	r4, r0, r2
 8000c12:	eb61 0303 	sbc.w	r3, r1, r3
 8000c16:	2001      	movs	r0, #1
 8000c18:	469e      	mov	lr, r3
 8000c1a:	2d00      	cmp	r5, #0
 8000c1c:	d0e0      	beq.n	8000be0 <__udivmoddi4+0xa4>
 8000c1e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c22:	e7dd      	b.n	8000be0 <__udivmoddi4+0xa4>
 8000c24:	b902      	cbnz	r2, 8000c28 <__udivmoddi4+0xec>
 8000c26:	deff      	udf	#255	; 0xff
 8000c28:	fab2 f282 	clz	r2, r2
 8000c2c:	2a00      	cmp	r2, #0
 8000c2e:	f040 8092 	bne.w	8000d56 <__udivmoddi4+0x21a>
 8000c32:	eba1 010c 	sub.w	r1, r1, ip
 8000c36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c3a:	fa1f fe8c 	uxth.w	lr, ip
 8000c3e:	2601      	movs	r6, #1
 8000c40:	0c20      	lsrs	r0, r4, #16
 8000c42:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c46:	fb07 1113 	mls	r1, r7, r3, r1
 8000c4a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c4e:	fb0e f003 	mul.w	r0, lr, r3
 8000c52:	4288      	cmp	r0, r1
 8000c54:	d908      	bls.n	8000c68 <__udivmoddi4+0x12c>
 8000c56:	eb1c 0101 	adds.w	r1, ip, r1
 8000c5a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c5e:	d202      	bcs.n	8000c66 <__udivmoddi4+0x12a>
 8000c60:	4288      	cmp	r0, r1
 8000c62:	f200 80cb 	bhi.w	8000dfc <__udivmoddi4+0x2c0>
 8000c66:	4643      	mov	r3, r8
 8000c68:	1a09      	subs	r1, r1, r0
 8000c6a:	b2a4      	uxth	r4, r4
 8000c6c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c70:	fb07 1110 	mls	r1, r7, r0, r1
 8000c74:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c78:	fb0e fe00 	mul.w	lr, lr, r0
 8000c7c:	45a6      	cmp	lr, r4
 8000c7e:	d908      	bls.n	8000c92 <__udivmoddi4+0x156>
 8000c80:	eb1c 0404 	adds.w	r4, ip, r4
 8000c84:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c88:	d202      	bcs.n	8000c90 <__udivmoddi4+0x154>
 8000c8a:	45a6      	cmp	lr, r4
 8000c8c:	f200 80bb 	bhi.w	8000e06 <__udivmoddi4+0x2ca>
 8000c90:	4608      	mov	r0, r1
 8000c92:	eba4 040e 	sub.w	r4, r4, lr
 8000c96:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c9a:	e79c      	b.n	8000bd6 <__udivmoddi4+0x9a>
 8000c9c:	f1c6 0720 	rsb	r7, r6, #32
 8000ca0:	40b3      	lsls	r3, r6
 8000ca2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ca6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000caa:	fa20 f407 	lsr.w	r4, r0, r7
 8000cae:	fa01 f306 	lsl.w	r3, r1, r6
 8000cb2:	431c      	orrs	r4, r3
 8000cb4:	40f9      	lsrs	r1, r7
 8000cb6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cba:	fa00 f306 	lsl.w	r3, r0, r6
 8000cbe:	fbb1 f8f9 	udiv	r8, r1, r9
 8000cc2:	0c20      	lsrs	r0, r4, #16
 8000cc4:	fa1f fe8c 	uxth.w	lr, ip
 8000cc8:	fb09 1118 	mls	r1, r9, r8, r1
 8000ccc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cd0:	fb08 f00e 	mul.w	r0, r8, lr
 8000cd4:	4288      	cmp	r0, r1
 8000cd6:	fa02 f206 	lsl.w	r2, r2, r6
 8000cda:	d90b      	bls.n	8000cf4 <__udivmoddi4+0x1b8>
 8000cdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000ce0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ce4:	f080 8088 	bcs.w	8000df8 <__udivmoddi4+0x2bc>
 8000ce8:	4288      	cmp	r0, r1
 8000cea:	f240 8085 	bls.w	8000df8 <__udivmoddi4+0x2bc>
 8000cee:	f1a8 0802 	sub.w	r8, r8, #2
 8000cf2:	4461      	add	r1, ip
 8000cf4:	1a09      	subs	r1, r1, r0
 8000cf6:	b2a4      	uxth	r4, r4
 8000cf8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cfc:	fb09 1110 	mls	r1, r9, r0, r1
 8000d00:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d04:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d08:	458e      	cmp	lr, r1
 8000d0a:	d908      	bls.n	8000d1e <__udivmoddi4+0x1e2>
 8000d0c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d10:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d14:	d26c      	bcs.n	8000df0 <__udivmoddi4+0x2b4>
 8000d16:	458e      	cmp	lr, r1
 8000d18:	d96a      	bls.n	8000df0 <__udivmoddi4+0x2b4>
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	4461      	add	r1, ip
 8000d1e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d22:	fba0 9402 	umull	r9, r4, r0, r2
 8000d26:	eba1 010e 	sub.w	r1, r1, lr
 8000d2a:	42a1      	cmp	r1, r4
 8000d2c:	46c8      	mov	r8, r9
 8000d2e:	46a6      	mov	lr, r4
 8000d30:	d356      	bcc.n	8000de0 <__udivmoddi4+0x2a4>
 8000d32:	d053      	beq.n	8000ddc <__udivmoddi4+0x2a0>
 8000d34:	b15d      	cbz	r5, 8000d4e <__udivmoddi4+0x212>
 8000d36:	ebb3 0208 	subs.w	r2, r3, r8
 8000d3a:	eb61 010e 	sbc.w	r1, r1, lr
 8000d3e:	fa01 f707 	lsl.w	r7, r1, r7
 8000d42:	fa22 f306 	lsr.w	r3, r2, r6
 8000d46:	40f1      	lsrs	r1, r6
 8000d48:	431f      	orrs	r7, r3
 8000d4a:	e9c5 7100 	strd	r7, r1, [r5]
 8000d4e:	2600      	movs	r6, #0
 8000d50:	4631      	mov	r1, r6
 8000d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d56:	f1c2 0320 	rsb	r3, r2, #32
 8000d5a:	40d8      	lsrs	r0, r3
 8000d5c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d60:	fa21 f303 	lsr.w	r3, r1, r3
 8000d64:	4091      	lsls	r1, r2
 8000d66:	4301      	orrs	r1, r0
 8000d68:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6c:	fa1f fe8c 	uxth.w	lr, ip
 8000d70:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d74:	fb07 3610 	mls	r6, r7, r0, r3
 8000d78:	0c0b      	lsrs	r3, r1, #16
 8000d7a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d7e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d82:	429e      	cmp	r6, r3
 8000d84:	fa04 f402 	lsl.w	r4, r4, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x260>
 8000d8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d8e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d92:	d22f      	bcs.n	8000df4 <__udivmoddi4+0x2b8>
 8000d94:	429e      	cmp	r6, r3
 8000d96:	d92d      	bls.n	8000df4 <__udivmoddi4+0x2b8>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4463      	add	r3, ip
 8000d9c:	1b9b      	subs	r3, r3, r6
 8000d9e:	b289      	uxth	r1, r1
 8000da0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000da4:	fb07 3316 	mls	r3, r7, r6, r3
 8000da8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dac:	fb06 f30e 	mul.w	r3, r6, lr
 8000db0:	428b      	cmp	r3, r1
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x28a>
 8000db4:	eb1c 0101 	adds.w	r1, ip, r1
 8000db8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000dbc:	d216      	bcs.n	8000dec <__udivmoddi4+0x2b0>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d914      	bls.n	8000dec <__udivmoddi4+0x2b0>
 8000dc2:	3e02      	subs	r6, #2
 8000dc4:	4461      	add	r1, ip
 8000dc6:	1ac9      	subs	r1, r1, r3
 8000dc8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000dcc:	e738      	b.n	8000c40 <__udivmoddi4+0x104>
 8000dce:	462e      	mov	r6, r5
 8000dd0:	4628      	mov	r0, r5
 8000dd2:	e705      	b.n	8000be0 <__udivmoddi4+0xa4>
 8000dd4:	4606      	mov	r6, r0
 8000dd6:	e6e3      	b.n	8000ba0 <__udivmoddi4+0x64>
 8000dd8:	4618      	mov	r0, r3
 8000dda:	e6f8      	b.n	8000bce <__udivmoddi4+0x92>
 8000ddc:	454b      	cmp	r3, r9
 8000dde:	d2a9      	bcs.n	8000d34 <__udivmoddi4+0x1f8>
 8000de0:	ebb9 0802 	subs.w	r8, r9, r2
 8000de4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000de8:	3801      	subs	r0, #1
 8000dea:	e7a3      	b.n	8000d34 <__udivmoddi4+0x1f8>
 8000dec:	4646      	mov	r6, r8
 8000dee:	e7ea      	b.n	8000dc6 <__udivmoddi4+0x28a>
 8000df0:	4620      	mov	r0, r4
 8000df2:	e794      	b.n	8000d1e <__udivmoddi4+0x1e2>
 8000df4:	4640      	mov	r0, r8
 8000df6:	e7d1      	b.n	8000d9c <__udivmoddi4+0x260>
 8000df8:	46d0      	mov	r8, sl
 8000dfa:	e77b      	b.n	8000cf4 <__udivmoddi4+0x1b8>
 8000dfc:	3b02      	subs	r3, #2
 8000dfe:	4461      	add	r1, ip
 8000e00:	e732      	b.n	8000c68 <__udivmoddi4+0x12c>
 8000e02:	4630      	mov	r0, r6
 8000e04:	e709      	b.n	8000c1a <__udivmoddi4+0xde>
 8000e06:	4464      	add	r4, ip
 8000e08:	3802      	subs	r0, #2
 8000e0a:	e742      	b.n	8000c92 <__udivmoddi4+0x156>

08000e0c <__aeabi_idiv0>:
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop

08000e10 <disp1color_FillScreenbuff>:

//==============================================================================
// Процедура заполняет буфер кадра значением FillValue
//==============================================================================
void disp1color_FillScreenbuff(uint8_t FillValue)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	71fb      	strb	r3, [r7, #7]
  memset(disp1color_buff, FillValue, sizeof(disp1color_buff));
 8000e1a:	79fb      	ldrb	r3, [r7, #7]
 8000e1c:	2240      	movs	r2, #64	; 0x40
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4803      	ldr	r0, [pc, #12]	; (8000e30 <disp1color_FillScreenbuff+0x20>)
 8000e22:	f003 f931 	bl	8004088 <memset>
}
 8000e26:	bf00      	nop
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	2000013c 	.word	0x2000013c

08000e34 <disp1color_UpdateFromBuff>:

//==============================================================================
// Процедура обновляет состояние индикаторов в соответствии с буфером кадра disp1color_buff
//==============================================================================
void disp1color_UpdateFromBuff(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  DMD_1COLOR_DisplayFullUpdate(disp1color_buff, sizeof(disp1color_buff));
 8000e38:	2140      	movs	r1, #64	; 0x40
 8000e3a:	4802      	ldr	r0, [pc, #8]	; (8000e44 <disp1color_UpdateFromBuff+0x10>)
 8000e3c:	f000 fa4b 	bl	80012d6 <DMD_1COLOR_DisplayFullUpdate>

  //printf("BUF horz:\n");
  //print_buf(DMD_1COLOR_Buff, sizeof(DMD_1COLOR_Buff));
}
 8000e40:	bf00      	nop
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	2000013c 	.word	0x2000013c

08000e48 <disp1color_printf>:

//==============================================================================
// Процедура выводит на дисплей форматированную строку
//==============================================================================
void disp1color_printf(int16_t X, int16_t Y, uint8_t FontID, const char *args, ...)
{
 8000e48:	b408      	push	{r3}
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b09d      	sub	sp, #116	; 0x74
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	4603      	mov	r3, r0
 8000e52:	80fb      	strh	r3, [r7, #6]
 8000e54:	460b      	mov	r3, r1
 8000e56:	80bb      	strh	r3, [r7, #4]
 8000e58:	4613      	mov	r3, r2
 8000e5a:	70fb      	strb	r3, [r7, #3]
  char StrBuff[100];
  
  //Формирование массива из переданных аргументов
  va_list ap;
  va_start(ap, args);
 8000e5c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000e60:	60bb      	str	r3, [r7, #8]
  vsnprintf(StrBuff, sizeof(StrBuff), args, ap);
 8000e62:	f107 000c 	add.w	r0, r7, #12
 8000e66:	68bb      	ldr	r3, [r7, #8]
 8000e68:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8000e6a:	2164      	movs	r1, #100	; 0x64
 8000e6c:	f003 f940 	bl	80040f0 <vsniprintf>
  va_end(ap);
  
  disp1color_DrawString(X, Y, FontID, (uint8_t *)StrBuff);
 8000e70:	f107 030c 	add.w	r3, r7, #12
 8000e74:	78fa      	ldrb	r2, [r7, #3]
 8000e76:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000e7a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000e7e:	f000 f9d9 	bl	8001234 <disp1color_DrawString>
}
 8000e82:	bf00      	nop
 8000e84:	3774      	adds	r7, #116	; 0x74
 8000e86:	46bd      	mov	sp, r7
 8000e88:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e8c:	b001      	add	sp, #4
 8000e8e:	4770      	bx	lr

08000e90 <disp1color_DrawPixel>:

//==============================================================================
// Процедура устанавливает состояние 1 пикселя дисплея
//==============================================================================
void disp1color_DrawPixel(int16_t X, int16_t Y, uint8_t State)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b085      	sub	sp, #20
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	80fb      	strh	r3, [r7, #6]
 8000e9a:	460b      	mov	r3, r1
 8000e9c:	80bb      	strh	r3, [r7, #4]
 8000e9e:	4613      	mov	r3, r2
 8000ea0:	70fb      	strb	r3, [r7, #3]
  //Х и У координаты пикселя, отсчитываются слева направо (Х) сверху вниз (У) с 0
  // Проверяем, находится ли точка в поле отрисовки дисплея
  if ((X >= DISP1COLOR_Width) || (Y >= DISP1COLOR_Height) || (X < 0) || (Y < 0))
 8000ea2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ea6:	2b1f      	cmp	r3, #31
 8000ea8:	dc48      	bgt.n	8000f3c <disp1color_DrawPixel+0xac>
 8000eaa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000eae:	2b0f      	cmp	r3, #15
 8000eb0:	dc44      	bgt.n	8000f3c <disp1color_DrawPixel+0xac>
 8000eb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	db40      	blt.n	8000f3c <disp1color_DrawPixel+0xac>
 8000eba:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	db3c      	blt.n	8000f3c <disp1color_DrawPixel+0xac>
    return;
  
  //Байты относительно матрицы расположены вертикально, в 2 ряда
  uint16_t ByteIdx = Y >> 3;
 8000ec2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000ec6:	10db      	asrs	r3, r3, #3
 8000ec8:	b21b      	sxth	r3, r3
 8000eca:	81fb      	strh	r3, [r7, #14]
  uint8_t BitIdx = Y - (ByteIdx << 3); // Высота относительно строки байт (0<=Y<=7)
 8000ecc:	88bb      	ldrh	r3, [r7, #4]
 8000ece:	b2da      	uxtb	r2, r3
 8000ed0:	89fb      	ldrh	r3, [r7, #14]
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	00db      	lsls	r3, r3, #3
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	1ad3      	subs	r3, r2, r3
 8000eda:	737b      	strb	r3, [r7, #13]
  ByteIdx *= DISP1COLOR_Width;  
 8000edc:	89fb      	ldrh	r3, [r7, #14]
 8000ede:	015b      	lsls	r3, r3, #5
 8000ee0:	81fb      	strh	r3, [r7, #14]
  ByteIdx += X;
 8000ee2:	88fa      	ldrh	r2, [r7, #6]
 8000ee4:	89fb      	ldrh	r3, [r7, #14]
 8000ee6:	4413      	add	r3, r2
 8000ee8:	81fb      	strh	r3, [r7, #14]
  
  //Заполнение буфера данных для отрисовки
  if (State)
 8000eea:	78fb      	ldrb	r3, [r7, #3]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d00f      	beq.n	8000f10 <disp1color_DrawPixel+0x80>
    disp1color_buff[ByteIdx] |= (1 << BitIdx);
 8000ef0:	89fb      	ldrh	r3, [r7, #14]
 8000ef2:	4a15      	ldr	r2, [pc, #84]	; (8000f48 <disp1color_DrawPixel+0xb8>)
 8000ef4:	5cd3      	ldrb	r3, [r2, r3]
 8000ef6:	b25a      	sxtb	r2, r3
 8000ef8:	7b7b      	ldrb	r3, [r7, #13]
 8000efa:	2101      	movs	r1, #1
 8000efc:	fa01 f303 	lsl.w	r3, r1, r3
 8000f00:	b25b      	sxtb	r3, r3
 8000f02:	4313      	orrs	r3, r2
 8000f04:	b25a      	sxtb	r2, r3
 8000f06:	89fb      	ldrh	r3, [r7, #14]
 8000f08:	b2d1      	uxtb	r1, r2
 8000f0a:	4a0f      	ldr	r2, [pc, #60]	; (8000f48 <disp1color_DrawPixel+0xb8>)
 8000f0c:	54d1      	strb	r1, [r2, r3]
 8000f0e:	e010      	b.n	8000f32 <disp1color_DrawPixel+0xa2>
  else
    disp1color_buff[ByteIdx] &= ~(1 << BitIdx);
 8000f10:	89fb      	ldrh	r3, [r7, #14]
 8000f12:	4a0d      	ldr	r2, [pc, #52]	; (8000f48 <disp1color_DrawPixel+0xb8>)
 8000f14:	5cd3      	ldrb	r3, [r2, r3]
 8000f16:	b25a      	sxtb	r2, r3
 8000f18:	7b7b      	ldrb	r3, [r7, #13]
 8000f1a:	2101      	movs	r1, #1
 8000f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f20:	b25b      	sxtb	r3, r3
 8000f22:	43db      	mvns	r3, r3
 8000f24:	b25b      	sxtb	r3, r3
 8000f26:	4013      	ands	r3, r2
 8000f28:	b25a      	sxtb	r2, r3
 8000f2a:	89fb      	ldrh	r3, [r7, #14]
 8000f2c:	b2d1      	uxtb	r1, r2
 8000f2e:	4a06      	ldr	r2, [pc, #24]	; (8000f48 <disp1color_DrawPixel+0xb8>)
 8000f30:	54d1      	strb	r1, [r2, r3]

 // printf("PIX:%d%s", disp1color_buff[ByteIdx], "\n");
  uint8_t buf = disp1color_buff[ByteIdx];
 8000f32:	89fb      	ldrh	r3, [r7, #14]
 8000f34:	4a04      	ldr	r2, [pc, #16]	; (8000f48 <disp1color_DrawPixel+0xb8>)
 8000f36:	5cd3      	ldrb	r3, [r2, r3]
 8000f38:	733b      	strb	r3, [r7, #12]
 8000f3a:	e000      	b.n	8000f3e <disp1color_DrawPixel+0xae>
    return;
 8000f3c:	bf00      	nop
//  for (int i = 0; i < 8; i++) {
//	  printf("%c", (buf & 0x80) ? '1' : '0');
//	  buf <<= 1;
//  }
//  printf("\n");
}
 8000f3e:	3714      	adds	r7, #20
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	2000013c 	.word	0x2000013c

08000f4c <disp1color_DrawLine>:

//==============================================================================
// Процедура рисует прямую линию в буфере кадра дисплея
//==============================================================================
void disp1color_DrawLine(int16_t x1, int16_t y1, int16_t x2, int16_t y2) 
{
 8000f4c:	b590      	push	{r4, r7, lr}
 8000f4e:	b087      	sub	sp, #28
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4604      	mov	r4, r0
 8000f54:	4608      	mov	r0, r1
 8000f56:	4611      	mov	r1, r2
 8000f58:	461a      	mov	r2, r3
 8000f5a:	4623      	mov	r3, r4
 8000f5c:	80fb      	strh	r3, [r7, #6]
 8000f5e:	4603      	mov	r3, r0
 8000f60:	80bb      	strh	r3, [r7, #4]
 8000f62:	460b      	mov	r3, r1
 8000f64:	807b      	strh	r3, [r7, #2]
 8000f66:	4613      	mov	r3, r2
 8000f68:	803b      	strh	r3, [r7, #0]
  const int16_t deltaX = abs(x2 - x1);
 8000f6a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000f6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f72:	1ad3      	subs	r3, r2, r3
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	bfb8      	it	lt
 8000f78:	425b      	neglt	r3, r3
 8000f7a:	82bb      	strh	r3, [r7, #20]
  const int16_t deltaY = abs(y2 - y1);
 8000f7c:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000f80:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	bfb8      	it	lt
 8000f8a:	425b      	neglt	r3, r3
 8000f8c:	827b      	strh	r3, [r7, #18]
  const int16_t signX = x1 < x2 ? 1 : -1;
 8000f8e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000f92:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000f96:	429a      	cmp	r2, r3
 8000f98:	da01      	bge.n	8000f9e <disp1color_DrawLine+0x52>
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e001      	b.n	8000fa2 <disp1color_DrawLine+0x56>
 8000f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa2:	823b      	strh	r3, [r7, #16]
  const int16_t signY = y1 < y2 ? 1 : -1;
 8000fa4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000fa8:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	da01      	bge.n	8000fb4 <disp1color_DrawLine+0x68>
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	e001      	b.n	8000fb8 <disp1color_DrawLine+0x6c>
 8000fb4:	f04f 33ff 	mov.w	r3, #4294967295
 8000fb8:	81fb      	strh	r3, [r7, #14]

  int16_t error = deltaX - deltaY;
 8000fba:	8aba      	ldrh	r2, [r7, #20]
 8000fbc:	8a7b      	ldrh	r3, [r7, #18]
 8000fbe:	1ad3      	subs	r3, r2, r3
 8000fc0:	b29b      	uxth	r3, r3
 8000fc2:	82fb      	strh	r3, [r7, #22]

  disp1color_DrawPixel(x2, y2, 1);
 8000fc4:	f9b7 1000 	ldrsh.w	r1, [r7]
 8000fc8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000fcc:	2201      	movs	r2, #1
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff ff5e 	bl	8000e90 <disp1color_DrawPixel>

  while (x1 != x2 || y1 != y2) 
 8000fd4:	e02c      	b.n	8001030 <disp1color_DrawLine+0xe4>
  {
    disp1color_DrawPixel(x1, y1, 1);
 8000fd6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000fda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fde:	2201      	movs	r2, #1
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff ff55 	bl	8000e90 <disp1color_DrawPixel>
    const int16_t error2 = error * 2;
 8000fe6:	8afb      	ldrh	r3, [r7, #22]
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	b29b      	uxth	r3, r3
 8000fec:	81bb      	strh	r3, [r7, #12]
 
    if (error2 > -deltaY) 
 8000fee:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000ff2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000ff6:	425b      	negs	r3, r3
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	dd09      	ble.n	8001010 <disp1color_DrawLine+0xc4>
    {
      error -= deltaY;
 8000ffc:	8afa      	ldrh	r2, [r7, #22]
 8000ffe:	8a7b      	ldrh	r3, [r7, #18]
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	b29b      	uxth	r3, r3
 8001004:	82fb      	strh	r3, [r7, #22]
      x1 += signX;
 8001006:	88fa      	ldrh	r2, [r7, #6]
 8001008:	8a3b      	ldrh	r3, [r7, #16]
 800100a:	4413      	add	r3, r2
 800100c:	b29b      	uxth	r3, r3
 800100e:	80fb      	strh	r3, [r7, #6]
    }
    if (error2 < deltaX)
 8001010:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001014:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001018:	429a      	cmp	r2, r3
 800101a:	da09      	bge.n	8001030 <disp1color_DrawLine+0xe4>
    {
      error += deltaX;
 800101c:	8afa      	ldrh	r2, [r7, #22]
 800101e:	8abb      	ldrh	r3, [r7, #20]
 8001020:	4413      	add	r3, r2
 8001022:	b29b      	uxth	r3, r3
 8001024:	82fb      	strh	r3, [r7, #22]
      y1 += signY;
 8001026:	88ba      	ldrh	r2, [r7, #4]
 8001028:	89fb      	ldrh	r3, [r7, #14]
 800102a:	4413      	add	r3, r2
 800102c:	b29b      	uxth	r3, r3
 800102e:	80bb      	strh	r3, [r7, #4]
  while (x1 != x2 || y1 != y2) 
 8001030:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001034:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001038:	429a      	cmp	r2, r3
 800103a:	d1cc      	bne.n	8000fd6 <disp1color_DrawLine+0x8a>
 800103c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001040:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001044:	429a      	cmp	r2, r3
 8001046:	d1c6      	bne.n	8000fd6 <disp1color_DrawLine+0x8a>
    }
  }
}
 8001048:	bf00      	nop
 800104a:	bf00      	nop
 800104c:	371c      	adds	r7, #28
 800104e:	46bd      	mov	sp, r7
 8001050:	bd90      	pop	{r4, r7, pc}

08001052 <disp1color_DrawRectangle>:

//==============================================================================
// Процедура рисует прямоугольник в буфере кадра дисплея
//==============================================================================
void disp1color_DrawRectangle(int16_t x1, int16_t y1, int16_t x2, int16_t y2) 
{
 8001052:	b590      	push	{r4, r7, lr}
 8001054:	b083      	sub	sp, #12
 8001056:	af00      	add	r7, sp, #0
 8001058:	4604      	mov	r4, r0
 800105a:	4608      	mov	r0, r1
 800105c:	4611      	mov	r1, r2
 800105e:	461a      	mov	r2, r3
 8001060:	4623      	mov	r3, r4
 8001062:	80fb      	strh	r3, [r7, #6]
 8001064:	4603      	mov	r3, r0
 8001066:	80bb      	strh	r3, [r7, #4]
 8001068:	460b      	mov	r3, r1
 800106a:	807b      	strh	r3, [r7, #2]
 800106c:	4613      	mov	r3, r2
 800106e:	803b      	strh	r3, [r7, #0]
  disp1color_DrawLine(x1, y1, x1, y2);
 8001070:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001074:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001078:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800107c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001080:	f7ff ff64 	bl	8000f4c <disp1color_DrawLine>
  disp1color_DrawLine(x2, y1, x2, y2);
 8001084:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001088:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800108c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001090:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8001094:	f7ff ff5a 	bl	8000f4c <disp1color_DrawLine>
  disp1color_DrawLine(x1, y1, x2, y1);
 8001098:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800109c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80010a0:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80010a4:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80010a8:	f7ff ff50 	bl	8000f4c <disp1color_DrawLine>
  disp1color_DrawLine(x1, y2, x2, y2);
 80010ac:	f9b7 3000 	ldrsh.w	r3, [r7]
 80010b0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80010b4:	f9b7 1000 	ldrsh.w	r1, [r7]
 80010b8:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80010bc:	f7ff ff46 	bl	8000f4c <disp1color_DrawLine>
}
 80010c0:	bf00      	nop
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd90      	pop	{r4, r7, pc}

080010c8 <disp1color_DrawChar>:

//==============================================================================
// Функция вывода символа Char на дисплей. Возвращает ширину выведенного символа
//==============================================================================
uint8_t disp1color_DrawChar(int16_t X, int16_t Y, uint8_t FontID, uint8_t Char)
{
 80010c8:	b590      	push	{r4, r7, lr}
 80010ca:	b087      	sub	sp, #28
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4604      	mov	r4, r0
 80010d0:	4608      	mov	r0, r1
 80010d2:	4611      	mov	r1, r2
 80010d4:	461a      	mov	r2, r3
 80010d6:	4623      	mov	r3, r4
 80010d8:	80fb      	strh	r3, [r7, #6]
 80010da:	4603      	mov	r3, r0
 80010dc:	80bb      	strh	r3, [r7, #4]
 80010de:	460b      	mov	r3, r1
 80010e0:	70fb      	strb	r3, [r7, #3]
 80010e2:	4613      	mov	r3, r2
 80010e4:	70bb      	strb	r3, [r7, #2]

  // Указатель на подтабличку конкретного символа шрифта
  uint8_t *pCharTable = font_GetFontStruct(FontID, Char);
 80010e6:	78ba      	ldrb	r2, [r7, #2]
 80010e8:	78fb      	ldrb	r3, [r7, #3]
 80010ea:	4611      	mov	r1, r2
 80010ec:	4618      	mov	r0, r3
 80010ee:	f000 fab5 	bl	800165c <font_GetFontStruct>
 80010f2:	6138      	str	r0, [r7, #16]
  uint8_t CharWidth = font_GetCharWidth(pCharTable);    // Ширина символа
 80010f4:	6938      	ldr	r0, [r7, #16]
 80010f6:	f000 fac7 	bl	8001688 <font_GetCharWidth>
 80010fa:	4603      	mov	r3, r0
 80010fc:	73fb      	strb	r3, [r7, #15]
  uint8_t CharHeight = font_GetCharHeight(pCharTable);  // Высота символа
 80010fe:	6938      	ldr	r0, [r7, #16]
 8001100:	f000 face 	bl	80016a0 <font_GetCharHeight>
 8001104:	4603      	mov	r3, r0
 8001106:	73bb      	strb	r3, [r7, #14]
  pCharTable += 2;
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	3302      	adds	r3, #2
 800110c:	613b      	str	r3, [r7, #16]
  
  if (FontID == FONTID_6X8M)
 800110e:	78fb      	ldrb	r3, [r7, #3]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d132      	bne.n	800117a <disp1color_DrawChar+0xb2>
  {
    for (uint8_t row = 0; row < CharHeight; row++)
 8001114:	2300      	movs	r3, #0
 8001116:	75fb      	strb	r3, [r7, #23]
 8001118:	e02a      	b.n	8001170 <disp1color_DrawChar+0xa8>
    {
		for (uint8_t col = 0; col < CharWidth; col++) {
 800111a:	2300      	movs	r3, #0
 800111c:	75bb      	strb	r3, [r7, #22]
 800111e:	e020      	b.n	8001162 <disp1color_DrawChar+0x9a>

			//printf("X+col=%d%s%d%s", X + col, " Y+row=", Y + row, "\n");
			disp1color_DrawPixel(X + col, Y + row, pCharTable[row] & (1 << (7 - col)));
 8001120:	7dbb      	ldrb	r3, [r7, #22]
 8001122:	b29a      	uxth	r2, r3
 8001124:	88fb      	ldrh	r3, [r7, #6]
 8001126:	4413      	add	r3, r2
 8001128:	b29b      	uxth	r3, r3
 800112a:	b218      	sxth	r0, r3
 800112c:	7dfb      	ldrb	r3, [r7, #23]
 800112e:	b29a      	uxth	r2, r3
 8001130:	88bb      	ldrh	r3, [r7, #4]
 8001132:	4413      	add	r3, r2
 8001134:	b29b      	uxth	r3, r3
 8001136:	b219      	sxth	r1, r3
 8001138:	7dfb      	ldrb	r3, [r7, #23]
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	4413      	add	r3, r2
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	b25a      	sxtb	r2, r3
 8001142:	7dbb      	ldrb	r3, [r7, #22]
 8001144:	f1c3 0307 	rsb	r3, r3, #7
 8001148:	2401      	movs	r4, #1
 800114a:	fa04 f303 	lsl.w	r3, r4, r3
 800114e:	b25b      	sxtb	r3, r3
 8001150:	4013      	ands	r3, r2
 8001152:	b25b      	sxtb	r3, r3
 8001154:	b2db      	uxtb	r3, r3
 8001156:	461a      	mov	r2, r3
 8001158:	f7ff fe9a 	bl	8000e90 <disp1color_DrawPixel>
		for (uint8_t col = 0; col < CharWidth; col++) {
 800115c:	7dbb      	ldrb	r3, [r7, #22]
 800115e:	3301      	adds	r3, #1
 8001160:	75bb      	strb	r3, [r7, #22]
 8001162:	7dba      	ldrb	r2, [r7, #22]
 8001164:	7bfb      	ldrb	r3, [r7, #15]
 8001166:	429a      	cmp	r2, r3
 8001168:	d3da      	bcc.n	8001120 <disp1color_DrawChar+0x58>
    for (uint8_t row = 0; row < CharHeight; row++)
 800116a:	7dfb      	ldrb	r3, [r7, #23]
 800116c:	3301      	adds	r3, #1
 800116e:	75fb      	strb	r3, [r7, #23]
 8001170:	7dfa      	ldrb	r2, [r7, #23]
 8001172:	7bbb      	ldrb	r3, [r7, #14]
 8001174:	429a      	cmp	r2, r3
 8001176:	d3d0      	bcc.n	800111a <disp1color_DrawChar+0x52>
 8001178:	e057      	b.n	800122a <disp1color_DrawChar+0x162>
		}
    }
  }
  else
  {
    for (uint8_t row = 0; row < CharHeight; row++)
 800117a:	2300      	movs	r3, #0
 800117c:	757b      	strb	r3, [r7, #21]
 800117e:	e050      	b.n	8001222 <disp1color_DrawChar+0x15a>
    {
      for (uint8_t col = 0; col < CharWidth; col++)
 8001180:	2300      	movs	r3, #0
 8001182:	753b      	strb	r3, [r7, #20]
 8001184:	e046      	b.n	8001214 <disp1color_DrawChar+0x14c>
      {
        if (col < 8)
 8001186:	7d3b      	ldrb	r3, [r7, #20]
 8001188:	2b07      	cmp	r3, #7
 800118a:	d820      	bhi.n	80011ce <disp1color_DrawChar+0x106>
          disp1color_DrawPixel(X + col, Y + row, pCharTable[row * 2] & (1 << (7 - col)));
 800118c:	7d3b      	ldrb	r3, [r7, #20]
 800118e:	b29a      	uxth	r2, r3
 8001190:	88fb      	ldrh	r3, [r7, #6]
 8001192:	4413      	add	r3, r2
 8001194:	b29b      	uxth	r3, r3
 8001196:	b218      	sxth	r0, r3
 8001198:	7d7b      	ldrb	r3, [r7, #21]
 800119a:	b29a      	uxth	r2, r3
 800119c:	88bb      	ldrh	r3, [r7, #4]
 800119e:	4413      	add	r3, r2
 80011a0:	b29b      	uxth	r3, r3
 80011a2:	b219      	sxth	r1, r3
 80011a4:	7d7b      	ldrb	r3, [r7, #21]
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	461a      	mov	r2, r3
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	4413      	add	r3, r2
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	b25a      	sxtb	r2, r3
 80011b2:	7d3b      	ldrb	r3, [r7, #20]
 80011b4:	f1c3 0307 	rsb	r3, r3, #7
 80011b8:	2401      	movs	r4, #1
 80011ba:	fa04 f303 	lsl.w	r3, r4, r3
 80011be:	b25b      	sxtb	r3, r3
 80011c0:	4013      	ands	r3, r2
 80011c2:	b25b      	sxtb	r3, r3
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	461a      	mov	r2, r3
 80011c8:	f7ff fe62 	bl	8000e90 <disp1color_DrawPixel>
 80011cc:	e01f      	b.n	800120e <disp1color_DrawChar+0x146>
        else
          disp1color_DrawPixel(X + col, Y + row, pCharTable[(row * 2) + 1] & (1 << (15 - col)));
 80011ce:	7d3b      	ldrb	r3, [r7, #20]
 80011d0:	b29a      	uxth	r2, r3
 80011d2:	88fb      	ldrh	r3, [r7, #6]
 80011d4:	4413      	add	r3, r2
 80011d6:	b29b      	uxth	r3, r3
 80011d8:	b218      	sxth	r0, r3
 80011da:	7d7b      	ldrb	r3, [r7, #21]
 80011dc:	b29a      	uxth	r2, r3
 80011de:	88bb      	ldrh	r3, [r7, #4]
 80011e0:	4413      	add	r3, r2
 80011e2:	b29b      	uxth	r3, r3
 80011e4:	b219      	sxth	r1, r3
 80011e6:	7d7b      	ldrb	r3, [r7, #21]
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	3301      	adds	r3, #1
 80011ec:	693a      	ldr	r2, [r7, #16]
 80011ee:	4413      	add	r3, r2
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	b25a      	sxtb	r2, r3
 80011f4:	7d3b      	ldrb	r3, [r7, #20]
 80011f6:	f1c3 030f 	rsb	r3, r3, #15
 80011fa:	2401      	movs	r4, #1
 80011fc:	fa04 f303 	lsl.w	r3, r4, r3
 8001200:	b25b      	sxtb	r3, r3
 8001202:	4013      	ands	r3, r2
 8001204:	b25b      	sxtb	r3, r3
 8001206:	b2db      	uxtb	r3, r3
 8001208:	461a      	mov	r2, r3
 800120a:	f7ff fe41 	bl	8000e90 <disp1color_DrawPixel>
      for (uint8_t col = 0; col < CharWidth; col++)
 800120e:	7d3b      	ldrb	r3, [r7, #20]
 8001210:	3301      	adds	r3, #1
 8001212:	753b      	strb	r3, [r7, #20]
 8001214:	7d3a      	ldrb	r2, [r7, #20]
 8001216:	7bfb      	ldrb	r3, [r7, #15]
 8001218:	429a      	cmp	r2, r3
 800121a:	d3b4      	bcc.n	8001186 <disp1color_DrawChar+0xbe>
    for (uint8_t row = 0; row < CharHeight; row++)
 800121c:	7d7b      	ldrb	r3, [r7, #21]
 800121e:	3301      	adds	r3, #1
 8001220:	757b      	strb	r3, [r7, #21]
 8001222:	7d7a      	ldrb	r2, [r7, #21]
 8001224:	7bbb      	ldrb	r3, [r7, #14]
 8001226:	429a      	cmp	r2, r3
 8001228:	d3aa      	bcc.n	8001180 <disp1color_DrawChar+0xb8>
      }
    }
  }
  
  return CharWidth;
 800122a:	7bfb      	ldrb	r3, [r7, #15]
}
 800122c:	4618      	mov	r0, r3
 800122e:	371c      	adds	r7, #28
 8001230:	46bd      	mov	sp, r7
 8001232:	bd90      	pop	{r4, r7, pc}

08001234 <disp1color_DrawString>:

//==============================================================================
// Функция вывода текста из строки Str на дисплей
//==============================================================================
void disp1color_DrawString(int16_t X, int16_t Y, uint8_t FontID, uint8_t *Str)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af00      	add	r7, sp, #0
 800123a:	607b      	str	r3, [r7, #4]
 800123c:	4603      	mov	r3, r0
 800123e:	81fb      	strh	r3, [r7, #14]
 8001240:	460b      	mov	r3, r1
 8001242:	81bb      	strh	r3, [r7, #12]
 8001244:	4613      	mov	r3, r2
 8001246:	72fb      	strb	r3, [r7, #11]
  uint8_t done = 0;             // Флаг окончания вывода
 8001248:	2300      	movs	r3, #0
 800124a:	75fb      	strb	r3, [r7, #23]
  int16_t Xstart = X;           // Запоминаем куда будем переводить каретку при переходе на новую строку
 800124c:	89fb      	ldrh	r3, [r7, #14]
 800124e:	82bb      	strh	r3, [r7, #20]
  uint8_t StrHeight = 8;        // Высота символов в пикселях для перехода на слежующую строку
 8001250:	2308      	movs	r3, #8
 8001252:	75bb      	strb	r3, [r7, #22]

  // Вывод строки
  while (!done)
 8001254:	e037      	b.n	80012c6 <disp1color_DrawString+0x92>
  {
    switch (*Str)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	2b0d      	cmp	r3, #13
 800125c:	d010      	beq.n	8001280 <disp1color_DrawString+0x4c>
 800125e:	2b0d      	cmp	r3, #13
 8001260:	dc11      	bgt.n	8001286 <disp1color_DrawString+0x52>
 8001262:	2b00      	cmp	r3, #0
 8001264:	d002      	beq.n	800126c <disp1color_DrawString+0x38>
 8001266:	2b0a      	cmp	r3, #10
 8001268:	d003      	beq.n	8001272 <disp1color_DrawString+0x3e>
 800126a:	e00c      	b.n	8001286 <disp1color_DrawString+0x52>
    {
    case '\0':  // Конец строки
      done = 1;
 800126c:	2301      	movs	r3, #1
 800126e:	75fb      	strb	r3, [r7, #23]
      break;
 8001270:	e026      	b.n	80012c0 <disp1color_DrawString+0x8c>
    case '\n':  // Переход на следующую строку
      Y += StrHeight;
 8001272:	7dbb      	ldrb	r3, [r7, #22]
 8001274:	b29a      	uxth	r2, r3
 8001276:	89bb      	ldrh	r3, [r7, #12]
 8001278:	4413      	add	r3, r2
 800127a:	b29b      	uxth	r3, r3
 800127c:	81bb      	strh	r3, [r7, #12]
      break;
 800127e:	e01f      	b.n	80012c0 <disp1color_DrawString+0x8c>
    case '\r':  // Переход в начало строки
      X = Xstart;
 8001280:	8abb      	ldrh	r3, [r7, #20]
 8001282:	81fb      	strh	r3, [r7, #14]
      break;
 8001284:	e01c      	b.n	80012c0 <disp1color_DrawString+0x8c>
    default:    // Отображаемый символ
		//printf("Symbol:%c\n", *Str);
		//printf("X=%d%s%d%s", X, " Y=", Y, "\n");
      X += disp1color_DrawChar(X, Y, FontID, *Str);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	7afa      	ldrb	r2, [r7, #11]
 800128c:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8001290:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8001294:	f7ff ff18 	bl	80010c8 <disp1color_DrawChar>
 8001298:	4603      	mov	r3, r0
 800129a:	b29a      	uxth	r2, r3
 800129c:	89fb      	ldrh	r3, [r7, #14]
 800129e:	4413      	add	r3, r2
 80012a0:	b29b      	uxth	r3, r3
 80012a2:	81fb      	strh	r3, [r7, #14]
	  ///////
	  //setlocale(LC_ALL, "ru_UA.UTF-8");
	 // printf("BUF vert:\n");
	// print_buf(disp1color_buff, sizeof(disp1color_buff));
	  ///////
      StrHeight = font_GetCharHeight(font_GetFontStruct(FontID, *Str));
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	781a      	ldrb	r2, [r3, #0]
 80012a8:	7afb      	ldrb	r3, [r7, #11]
 80012aa:	4611      	mov	r1, r2
 80012ac:	4618      	mov	r0, r3
 80012ae:	f000 f9d5 	bl	800165c <font_GetFontStruct>
 80012b2:	4603      	mov	r3, r0
 80012b4:	4618      	mov	r0, r3
 80012b6:	f000 f9f3 	bl	80016a0 <font_GetCharHeight>
 80012ba:	4603      	mov	r3, r0
 80012bc:	75bb      	strb	r3, [r7, #22]
      break;
 80012be:	bf00      	nop
    }
    Str++;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	3301      	adds	r3, #1
 80012c4:	607b      	str	r3, [r7, #4]
  while (!done)
 80012c6:	7dfb      	ldrb	r3, [r7, #23]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d0c4      	beq.n	8001256 <disp1color_DrawString+0x22>
  }
}
 80012cc:	bf00      	nop
 80012ce:	bf00      	nop
 80012d0:	3718      	adds	r7, #24
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <DMD_1COLOR_DisplayFullUpdate>:

//==============================================================================
// Процедура подготавливает буфер на передачу в экран в соответствии с буфером pBuff графической бибилиотеки
//==============================================================================
void DMD_1COLOR_DisplayFullUpdate(uint8_t *pBuff, uint16_t BuffLen)
{
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b082      	sub	sp, #8
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
 80012de:	460b      	mov	r3, r1
 80012e0:	807b      	strh	r3, [r7, #2]
	DMD_1COLOR_UpdateRow4(0, pBuff, BuffLen);
 80012e2:	887b      	ldrh	r3, [r7, #2]
 80012e4:	461a      	mov	r2, r3
 80012e6:	6879      	ldr	r1, [r7, #4]
 80012e8:	2000      	movs	r0, #0
 80012ea:	f000 f817 	bl	800131c <DMD_1COLOR_UpdateRow4>
	DMD_1COLOR_UpdateRow4(1, pBuff, BuffLen);
 80012ee:	887b      	ldrh	r3, [r7, #2]
 80012f0:	461a      	mov	r2, r3
 80012f2:	6879      	ldr	r1, [r7, #4]
 80012f4:	2001      	movs	r0, #1
 80012f6:	f000 f811 	bl	800131c <DMD_1COLOR_UpdateRow4>
	DMD_1COLOR_UpdateRow4(2, pBuff, BuffLen);
 80012fa:	887b      	ldrh	r3, [r7, #2]
 80012fc:	461a      	mov	r2, r3
 80012fe:	6879      	ldr	r1, [r7, #4]
 8001300:	2002      	movs	r0, #2
 8001302:	f000 f80b 	bl	800131c <DMD_1COLOR_UpdateRow4>
	DMD_1COLOR_UpdateRow4(3, pBuff, BuffLen);
 8001306:	887b      	ldrh	r3, [r7, #2]
 8001308:	461a      	mov	r2, r3
 800130a:	6879      	ldr	r1, [r7, #4]
 800130c:	2003      	movs	r0, #3
 800130e:	f000 f805 	bl	800131c <DMD_1COLOR_UpdateRow4>
}
 8001312:	bf00      	nop
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
	...

0800131c <DMD_1COLOR_UpdateRow4>:

//==============================================================================
// Процедура обновляет поочерёдно все матрицы экрана
//==============================================================================
void DMD_1COLOR_UpdateRow4(uint8_t Row4, uint8_t *pBuff, uint16_t BuffLen)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b088      	sub	sp, #32
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	6039      	str	r1, [r7, #0]
 8001326:	71fb      	strb	r3, [r7, #7]
 8001328:	4613      	mov	r3, r2
 800132a:	80bb      	strh	r3, [r7, #4]
	// Подготавливаем данные для передачи
	uint16_t MatrixInRow = DMD_1COLOR_ScreenWidth / DMD_1COLOR_MatrixWidth;
 800132c:	4b2e      	ldr	r3, [pc, #184]	; (80013e8 <DMD_1COLOR_UpdateRow4+0xcc>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	095b      	lsrs	r3, r3, #5
 8001332:	b2db      	uxtb	r3, r3
 8001334:	81bb      	strh	r3, [r7, #12]
	uint16_t MatrixInCol = DMD_1COLOR_ScreenHeight / DMD_1COLOR_MatrixHeight;
 8001336:	4b2d      	ldr	r3, [pc, #180]	; (80013ec <DMD_1COLOR_UpdateRow4+0xd0>)
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	091b      	lsrs	r3, r3, #4
 800133c:	b2db      	uxtb	r3, r3
 800133e:	817b      	strh	r3, [r7, #10]
	uint8_t MatrixLines8 = DMD_1COLOR_MatrixHeight >> 3;
 8001340:	2302      	movs	r3, #2
 8001342:	727b      	strb	r3, [r7, #9]
	uint16_t StartIdxRow = 0, StartIdxCol = 0;
 8001344:	2300      	movs	r3, #0
 8001346:	83fb      	strh	r3, [r7, #30]
 8001348:	2300      	movs	r3, #0
 800134a:	83bb      	strh	r3, [r7, #28]

	for (uint8_t Row = 0; Row < MatrixInRow; Row++)
 800134c:	2300      	movs	r3, #0
 800134e:	76fb      	strb	r3, [r7, #27]
 8001350:	e040      	b.n	80013d4 <DMD_1COLOR_UpdateRow4+0xb8>
	{
		StartIdxCol = StartIdxRow;
 8001352:	8bfb      	ldrh	r3, [r7, #30]
 8001354:	83bb      	strh	r3, [r7, #28]

		for (uint8_t Col = 0; Col < MatrixInCol; Col++)
 8001356:	2300      	movs	r3, #0
 8001358:	76bb      	strb	r3, [r7, #26]
 800135a:	e028      	b.n	80013ae <DMD_1COLOR_UpdateRow4+0x92>
		{
			// Копируем буфер кадра одной матрицы
			uint8_t *pDst = DMD_1COLOR_MatrixBuff;
 800135c:	4b24      	ldr	r3, [pc, #144]	; (80013f0 <DMD_1COLOR_UpdateRow4+0xd4>)
 800135e:	617b      	str	r3, [r7, #20]
			uint8_t *pSrc = &pBuff[StartIdxCol];
 8001360:	8bbb      	ldrh	r3, [r7, #28]
 8001362:	683a      	ldr	r2, [r7, #0]
 8001364:	4413      	add	r3, r2
 8001366:	613b      	str	r3, [r7, #16]

			for (uint8_t Line8 = 0; Line8 < MatrixLines8; Line8++)
 8001368:	2300      	movs	r3, #0
 800136a:	73fb      	strb	r3, [r7, #15]
 800136c:	e015      	b.n	800139a <DMD_1COLOR_UpdateRow4+0x7e>
			{
				memcpy(pDst, pSrc, DMD_1COLOR_MatrixWidth);
 800136e:	2220      	movs	r2, #32
 8001370:	6939      	ldr	r1, [r7, #16]
 8001372:	6978      	ldr	r0, [r7, #20]
 8001374:	f002 fe7a 	bl	800406c <memcpy>
				DMD_1COLOR_SendFromMatrixBuff(Row4, DMD_1COLOR_MatrixBuff);
 8001378:	79fb      	ldrb	r3, [r7, #7]
 800137a:	491d      	ldr	r1, [pc, #116]	; (80013f0 <DMD_1COLOR_UpdateRow4+0xd4>)
 800137c:	4618      	mov	r0, r3
 800137e:	f000 f839 	bl	80013f4 <DMD_1COLOR_SendFromMatrixBuff>
				pDst += DMD_1COLOR_MatrixWidth;
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	3320      	adds	r3, #32
 8001386:	617b      	str	r3, [r7, #20]
				pSrc += DMD_1COLOR_ScreenWidth;
 8001388:	4b17      	ldr	r3, [pc, #92]	; (80013e8 <DMD_1COLOR_UpdateRow4+0xcc>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	461a      	mov	r2, r3
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	4413      	add	r3, r2
 8001392:	613b      	str	r3, [r7, #16]
			for (uint8_t Line8 = 0; Line8 < MatrixLines8; Line8++)
 8001394:	7bfb      	ldrb	r3, [r7, #15]
 8001396:	3301      	adds	r3, #1
 8001398:	73fb      	strb	r3, [r7, #15]
 800139a:	7bfa      	ldrb	r2, [r7, #15]
 800139c:	7a7b      	ldrb	r3, [r7, #9]
 800139e:	429a      	cmp	r2, r3
 80013a0:	d3e5      	bcc.n	800136e <DMD_1COLOR_UpdateRow4+0x52>
			}

			StartIdxCol += DMD_1COLOR_MatrixWidth;
 80013a2:	8bbb      	ldrh	r3, [r7, #28]
 80013a4:	3320      	adds	r3, #32
 80013a6:	83bb      	strh	r3, [r7, #28]
		for (uint8_t Col = 0; Col < MatrixInCol; Col++)
 80013a8:	7ebb      	ldrb	r3, [r7, #26]
 80013aa:	3301      	adds	r3, #1
 80013ac:	76bb      	strb	r3, [r7, #26]
 80013ae:	7ebb      	ldrb	r3, [r7, #26]
 80013b0:	b29b      	uxth	r3, r3
 80013b2:	897a      	ldrh	r2, [r7, #10]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d8d1      	bhi.n	800135c <DMD_1COLOR_UpdateRow4+0x40>
		}
		StartIdxRow += MatrixLines8 * DMD_1COLOR_ScreenWidth;
 80013b8:	7a7b      	ldrb	r3, [r7, #9]
 80013ba:	b29a      	uxth	r2, r3
 80013bc:	4b0a      	ldr	r3, [pc, #40]	; (80013e8 <DMD_1COLOR_UpdateRow4+0xcc>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	b29b      	uxth	r3, r3
 80013c2:	fb12 f303 	smulbb	r3, r2, r3
 80013c6:	b29a      	uxth	r2, r3
 80013c8:	8bfb      	ldrh	r3, [r7, #30]
 80013ca:	4413      	add	r3, r2
 80013cc:	83fb      	strh	r3, [r7, #30]
	for (uint8_t Row = 0; Row < MatrixInRow; Row++)
 80013ce:	7efb      	ldrb	r3, [r7, #27]
 80013d0:	3301      	adds	r3, #1
 80013d2:	76fb      	strb	r3, [r7, #27]
 80013d4:	7efb      	ldrb	r3, [r7, #27]
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	89ba      	ldrh	r2, [r7, #12]
 80013da:	429a      	cmp	r2, r3
 80013dc:	d8b9      	bhi.n	8001352 <DMD_1COLOR_UpdateRow4+0x36>
	}
}
 80013de:	bf00      	nop
 80013e0:	bf00      	nop
 80013e2:	3720      	adds	r7, #32
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	20000001 	.word	0x20000001
 80013ec:	20000000 	.word	0x20000000
 80013f0:	200000bc 	.word	0x200000bc

080013f4 <DMD_1COLOR_SendFromMatrixBuff>:

//==============================================================================
// Процедура обновляет 1 матрицу
//==============================================================================
void DMD_1COLOR_SendFromMatrixBuff(uint8_t Row4, uint8_t *pBuff)
{
 80013f4:	b590      	push	{r4, r7, lr}
 80013f6:	b087      	sub	sp, #28
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	4603      	mov	r3, r0
 80013fc:	6039      	str	r1, [r7, #0]
 80013fe:	71fb      	strb	r3, [r7, #7]
	uint8_t MatrixRows8bit = DMD_1COLOR_MatrixHeight >> 3;
 8001400:	2302      	movs	r3, #2
 8001402:	747b      	strb	r3, [r7, #17]
	uint8_t MatrixCols8bit = DMD_1COLOR_MatrixWidth >> 3;
 8001404:	2304      	movs	r3, #4
 8001406:	743b      	strb	r3, [r7, #16]
	uint8_t *pPart = (uint8_t *) &(DMD_1COLOR_Buff[Row4][0]);
 8001408:	79fb      	ldrb	r3, [r7, #7]
 800140a:	011b      	lsls	r3, r3, #4
 800140c:	4a22      	ldr	r2, [pc, #136]	; (8001498 <DMD_1COLOR_SendFromMatrixBuff+0xa4>)
 800140e:	4413      	add	r3, r2
 8001410:	617b      	str	r3, [r7, #20]

	for (uint8_t Col = 0; Col < MatrixCols8bit; Col++)
 8001412:	2300      	movs	r3, #0
 8001414:	74fb      	strb	r3, [r7, #19]
 8001416:	e035      	b.n	8001484 <DMD_1COLOR_SendFromMatrixBuff+0x90>
	{
		for (uint8_t Row = MatrixRows8bit; Row; Row--)
 8001418:	7c7b      	ldrb	r3, [r7, #17]
 800141a:	74bb      	strb	r3, [r7, #18]
 800141c:	e02c      	b.n	8001478 <DMD_1COLOR_SendFromMatrixBuff+0x84>
		{
			uint8_t *p8Bytes = pBuff + ((Row - 1) * DMD_1COLOR_MatrixWidth);
 800141e:	7cbb      	ldrb	r3, [r7, #18]
 8001420:	3b01      	subs	r3, #1
 8001422:	015b      	lsls	r3, r3, #5
 8001424:	461a      	mov	r2, r3
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	4413      	add	r3, r2
 800142a:	60fb      	str	r3, [r7, #12]
			p8Bytes += (Col << 3);
 800142c:	7cfb      	ldrb	r3, [r7, #19]
 800142e:	00db      	lsls	r3, r3, #3
 8001430:	461a      	mov	r2, r3
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	4413      	add	r3, r2
 8001436:	60fb      	str	r3, [r7, #12]

			*(pPart++) = DMD_1COLOR_GetFrom8ScreenBytes(1 << (Row4 + 4), p8Bytes);
 8001438:	79fb      	ldrb	r3, [r7, #7]
 800143a:	3304      	adds	r3, #4
 800143c:	2201      	movs	r2, #1
 800143e:	fa02 f303 	lsl.w	r3, r2, r3
 8001442:	b2da      	uxtb	r2, r3
 8001444:	697c      	ldr	r4, [r7, #20]
 8001446:	1c63      	adds	r3, r4, #1
 8001448:	617b      	str	r3, [r7, #20]
 800144a:	68f9      	ldr	r1, [r7, #12]
 800144c:	4610      	mov	r0, r2
 800144e:	f000 f825 	bl	800149c <DMD_1COLOR_GetFrom8ScreenBytes>
 8001452:	4603      	mov	r3, r0
 8001454:	7023      	strb	r3, [r4, #0]
			*(pPart++) = DMD_1COLOR_GetFrom8ScreenBytes(1 << Row4, p8Bytes);
 8001456:	79fb      	ldrb	r3, [r7, #7]
 8001458:	2201      	movs	r2, #1
 800145a:	fa02 f303 	lsl.w	r3, r2, r3
 800145e:	b2da      	uxtb	r2, r3
 8001460:	697c      	ldr	r4, [r7, #20]
 8001462:	1c63      	adds	r3, r4, #1
 8001464:	617b      	str	r3, [r7, #20]
 8001466:	68f9      	ldr	r1, [r7, #12]
 8001468:	4610      	mov	r0, r2
 800146a:	f000 f817 	bl	800149c <DMD_1COLOR_GetFrom8ScreenBytes>
 800146e:	4603      	mov	r3, r0
 8001470:	7023      	strb	r3, [r4, #0]
		for (uint8_t Row = MatrixRows8bit; Row; Row--)
 8001472:	7cbb      	ldrb	r3, [r7, #18]
 8001474:	3b01      	subs	r3, #1
 8001476:	74bb      	strb	r3, [r7, #18]
 8001478:	7cbb      	ldrb	r3, [r7, #18]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d1cf      	bne.n	800141e <DMD_1COLOR_SendFromMatrixBuff+0x2a>
	for (uint8_t Col = 0; Col < MatrixCols8bit; Col++)
 800147e:	7cfb      	ldrb	r3, [r7, #19]
 8001480:	3301      	adds	r3, #1
 8001482:	74fb      	strb	r3, [r7, #19]
 8001484:	7cfa      	ldrb	r2, [r7, #19]
 8001486:	7c3b      	ldrb	r3, [r7, #16]
 8001488:	429a      	cmp	r2, r3
 800148a:	d3c5      	bcc.n	8001418 <DMD_1COLOR_SendFromMatrixBuff+0x24>
		}
	}
}
 800148c:	bf00      	nop
 800148e:	bf00      	nop
 8001490:	371c      	adds	r7, #28
 8001492:	46bd      	mov	sp, r7
 8001494:	bd90      	pop	{r4, r7, pc}
 8001496:	bf00      	nop
 8001498:	200000fc 	.word	0x200000fc

0800149c <DMD_1COLOR_GetFrom8ScreenBytes>:
//==============================================================================
// Функция возвращает байт (строку из 8 светодиодов) по 8-байтному фрагменту буфера
// графической библиотеки и маске соответствующей строки светодиодов во фрагменте
//==============================================================================
uint8_t DMD_1COLOR_GetFrom8ScreenBytes(uint8_t Mask, uint8_t *pBuff)
{
 800149c:	b480      	push	{r7}
 800149e:	b085      	sub	sp, #20
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	6039      	str	r1, [r7, #0]
 80014a6:	71fb      	strb	r3, [r7, #7]
	uint8_t Byte = 0;
 80014a8:	2300      	movs	r3, #0
 80014aa:	73fb      	strb	r3, [r7, #15]
	//Переводим "вертикальные" байты из массива в горизонтальные
	//в соответствии с текущей строкой.
	//В итоге получается массив, где биты расположены горизонтально,
	//Первый бит слева внизу, счет увеличивается вверх и вправо.
	//Но строки в секторе расположены сверху вниз
	for (uint8_t BitMask = 0x80; BitMask; BitMask >>= 1, pBuff++)
 80014ac:	2380      	movs	r3, #128	; 0x80
 80014ae:	73bb      	strb	r3, [r7, #14]
 80014b0:	e010      	b.n	80014d4 <DMD_1COLOR_GetFrom8ScreenBytes+0x38>
	{
		if (*pBuff & Mask)
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	781a      	ldrb	r2, [r3, #0]
 80014b6:	79fb      	ldrb	r3, [r7, #7]
 80014b8:	4013      	ands	r3, r2
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d003      	beq.n	80014c8 <DMD_1COLOR_GetFrom8ScreenBytes+0x2c>
			Byte |= BitMask;
 80014c0:	7bfa      	ldrb	r2, [r7, #15]
 80014c2:	7bbb      	ldrb	r3, [r7, #14]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	73fb      	strb	r3, [r7, #15]
	for (uint8_t BitMask = 0x80; BitMask; BitMask >>= 1, pBuff++)
 80014c8:	7bbb      	ldrb	r3, [r7, #14]
 80014ca:	085b      	lsrs	r3, r3, #1
 80014cc:	73bb      	strb	r3, [r7, #14]
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	3301      	adds	r3, #1
 80014d2:	603b      	str	r3, [r7, #0]
 80014d4:	7bbb      	ldrb	r3, [r7, #14]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d1eb      	bne.n	80014b2 <DMD_1COLOR_GetFrom8ScreenBytes+0x16>
	}

//#if (DMD_1COLOR_Inverse == 1)
	//Инвертируем данные (так как LED панель горит при 0)
	Byte ^= 0xFF;
 80014da:	7bfb      	ldrb	r3, [r7, #15]
 80014dc:	43db      	mvns	r3, r3
 80014de:	73fb      	strb	r3, [r7, #15]
//#endif

	return Byte;
 80014e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3714      	adds	r7, #20
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
	...

080014f0 <prepare_data>:
//==============================================================================


//Копирование из подготовленного буфера в массивиы для построчного вводы в матрицу
void prepare_data() {
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
	//Идем по строкам
	for (uint8_t i = 0; i < sizeof(DMD_1COLOR_Buff) / sizeof(DMD_1COLOR_Buff[0]); i++) {
 80014f6:	2300      	movs	r3, #0
 80014f8:	71fb      	strb	r3, [r7, #7]
 80014fa:	e042      	b.n	8001582 <prepare_data+0x92>
		//По столбцам
		for (uint8_t k = 0; k < sizeof(DMD_1COLOR_Buff[0]); k++) {
 80014fc:	2300      	movs	r3, #0
 80014fe:	71bb      	strb	r3, [r7, #6]
 8001500:	e039      	b.n	8001576 <prepare_data+0x86>
			if (i == 0) {
 8001502:	79fb      	ldrb	r3, [r7, #7]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d10a      	bne.n	800151e <prepare_data+0x2e>
				data1[k] = DMD_1COLOR_Buff[i][k];
 8001508:	79f9      	ldrb	r1, [r7, #7]
 800150a:	79ba      	ldrb	r2, [r7, #6]
 800150c:	79bb      	ldrb	r3, [r7, #6]
 800150e:	4822      	ldr	r0, [pc, #136]	; (8001598 <prepare_data+0xa8>)
 8001510:	0109      	lsls	r1, r1, #4
 8001512:	4401      	add	r1, r0
 8001514:	440a      	add	r2, r1
 8001516:	7811      	ldrb	r1, [r2, #0]
 8001518:	4a20      	ldr	r2, [pc, #128]	; (800159c <prepare_data+0xac>)
 800151a:	54d1      	strb	r1, [r2, r3]
 800151c:	e028      	b.n	8001570 <prepare_data+0x80>
			}
			else if (i == 1) {
 800151e:	79fb      	ldrb	r3, [r7, #7]
 8001520:	2b01      	cmp	r3, #1
 8001522:	d10a      	bne.n	800153a <prepare_data+0x4a>
				data2[k] = DMD_1COLOR_Buff[i][k];
 8001524:	79f9      	ldrb	r1, [r7, #7]
 8001526:	79ba      	ldrb	r2, [r7, #6]
 8001528:	79bb      	ldrb	r3, [r7, #6]
 800152a:	481b      	ldr	r0, [pc, #108]	; (8001598 <prepare_data+0xa8>)
 800152c:	0109      	lsls	r1, r1, #4
 800152e:	4401      	add	r1, r0
 8001530:	440a      	add	r2, r1
 8001532:	7811      	ldrb	r1, [r2, #0]
 8001534:	4a1a      	ldr	r2, [pc, #104]	; (80015a0 <prepare_data+0xb0>)
 8001536:	54d1      	strb	r1, [r2, r3]
 8001538:	e01a      	b.n	8001570 <prepare_data+0x80>
			}
			else if (i == 2) {
 800153a:	79fb      	ldrb	r3, [r7, #7]
 800153c:	2b02      	cmp	r3, #2
 800153e:	d10a      	bne.n	8001556 <prepare_data+0x66>
				data3[k] = DMD_1COLOR_Buff[i][k];
 8001540:	79f9      	ldrb	r1, [r7, #7]
 8001542:	79ba      	ldrb	r2, [r7, #6]
 8001544:	79bb      	ldrb	r3, [r7, #6]
 8001546:	4814      	ldr	r0, [pc, #80]	; (8001598 <prepare_data+0xa8>)
 8001548:	0109      	lsls	r1, r1, #4
 800154a:	4401      	add	r1, r0
 800154c:	440a      	add	r2, r1
 800154e:	7811      	ldrb	r1, [r2, #0]
 8001550:	4a14      	ldr	r2, [pc, #80]	; (80015a4 <prepare_data+0xb4>)
 8001552:	54d1      	strb	r1, [r2, r3]
 8001554:	e00c      	b.n	8001570 <prepare_data+0x80>
			}
			else if (i == 3) {
 8001556:	79fb      	ldrb	r3, [r7, #7]
 8001558:	2b03      	cmp	r3, #3
 800155a:	d109      	bne.n	8001570 <prepare_data+0x80>
				data4[k] = DMD_1COLOR_Buff[i][k];
 800155c:	79f9      	ldrb	r1, [r7, #7]
 800155e:	79ba      	ldrb	r2, [r7, #6]
 8001560:	79bb      	ldrb	r3, [r7, #6]
 8001562:	480d      	ldr	r0, [pc, #52]	; (8001598 <prepare_data+0xa8>)
 8001564:	0109      	lsls	r1, r1, #4
 8001566:	4401      	add	r1, r0
 8001568:	440a      	add	r2, r1
 800156a:	7811      	ldrb	r1, [r2, #0]
 800156c:	4a0e      	ldr	r2, [pc, #56]	; (80015a8 <prepare_data+0xb8>)
 800156e:	54d1      	strb	r1, [r2, r3]
		for (uint8_t k = 0; k < sizeof(DMD_1COLOR_Buff[0]); k++) {
 8001570:	79bb      	ldrb	r3, [r7, #6]
 8001572:	3301      	adds	r3, #1
 8001574:	71bb      	strb	r3, [r7, #6]
 8001576:	79bb      	ldrb	r3, [r7, #6]
 8001578:	2b0f      	cmp	r3, #15
 800157a:	d9c2      	bls.n	8001502 <prepare_data+0x12>
	for (uint8_t i = 0; i < sizeof(DMD_1COLOR_Buff) / sizeof(DMD_1COLOR_Buff[0]); i++) {
 800157c:	79fb      	ldrb	r3, [r7, #7]
 800157e:	3301      	adds	r3, #1
 8001580:	71fb      	strb	r3, [r7, #7]
 8001582:	79fb      	ldrb	r3, [r7, #7]
 8001584:	2b03      	cmp	r3, #3
 8001586:	d9b9      	bls.n	80014fc <prepare_data+0xc>
			}
		}
	}
}
 8001588:	bf00      	nop
 800158a:	bf00      	nop
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	200000fc 	.word	0x200000fc
 800159c:	2000017c 	.word	0x2000017c
 80015a0:	2000018c 	.word	0x2000018c
 80015a4:	2000019c 	.word	0x2000019c
 80015a8:	200001ac 	.word	0x200001ac

080015ac <DWT_Delay_Init>:
 * @brief  Initializes DWT_Clock_Cycle_Count for DWT_Delay_us function
 * @return Error DWT counter
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void) {
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80015b0:	4b14      	ldr	r3, [pc, #80]	; (8001604 <DWT_Delay_Init+0x58>)
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	4a13      	ldr	r2, [pc, #76]	; (8001604 <DWT_Delay_Init+0x58>)
 80015b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80015ba:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80015bc:	4b11      	ldr	r3, [pc, #68]	; (8001604 <DWT_Delay_Init+0x58>)
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	4a10      	ldr	r2, [pc, #64]	; (8001604 <DWT_Delay_Init+0x58>)
 80015c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015c6:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80015c8:	4b0f      	ldr	r3, [pc, #60]	; (8001608 <DWT_Delay_Init+0x5c>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a0e      	ldr	r2, [pc, #56]	; (8001608 <DWT_Delay_Init+0x5c>)
 80015ce:	f023 0301 	bic.w	r3, r3, #1
 80015d2:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80015d4:	4b0c      	ldr	r3, [pc, #48]	; (8001608 <DWT_Delay_Init+0x5c>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a0b      	ldr	r2, [pc, #44]	; (8001608 <DWT_Delay_Init+0x5c>)
 80015da:	f043 0301 	orr.w	r3, r3, #1
 80015de:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 80015e0:	4b09      	ldr	r3, [pc, #36]	; (8001608 <DWT_Delay_Init+0x5c>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 80015e6:	bf00      	nop
     __ASM volatile ("NOP");
 80015e8:	bf00      	nop
  __ASM volatile ("NOP");
 80015ea:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 80015ec:	4b06      	ldr	r3, [pc, #24]	; (8001608 <DWT_Delay_Init+0x5c>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 80015f4:	2300      	movs	r3, #0
 80015f6:	e000      	b.n	80015fa <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 80015f8:	2301      	movs	r3, #1
  }
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr
 8001604:	e000edf0 	.word	0xe000edf0
 8001608:	e0001000 	.word	0xe0001000

0800160c <f10x16f_GetCharTable>:

//==============================================================================
// Функция возвращает указатель на подтаблицу символа Char
//==============================================================================
uint8_t *f10x16f_GetCharTable(uint8_t Char)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	4603      	mov	r3, r0
 8001614:	71fb      	strb	r3, [r7, #7]
  return (uint8_t *)(&f10x16f_table[Char][0]);
 8001616:	79fa      	ldrb	r2, [r7, #7]
 8001618:	4613      	mov	r3, r2
 800161a:	011b      	lsls	r3, r3, #4
 800161c:	4413      	add	r3, r2
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	4a03      	ldr	r2, [pc, #12]	; (8001630 <f10x16f_GetCharTable+0x24>)
 8001622:	4413      	add	r3, r2
}
 8001624:	4618      	mov	r0, r3
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr
 8001630:	080049b0 	.word	0x080049b0

08001634 <f6x8m_GetCharTable>:

//==============================================================================
// Функция возвращает указатель на подтаблицу символа Char
//==============================================================================
uint8_t *f6x8m_GetCharTable(uint8_t Char)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	71fb      	strb	r3, [r7, #7]
  return (uint8_t *)(&f6x8m_table[Char][0]);
 800163e:	79fa      	ldrb	r2, [r7, #7]
 8001640:	4613      	mov	r3, r2
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	4413      	add	r3, r2
 8001646:	005b      	lsls	r3, r3, #1
 8001648:	4a03      	ldr	r2, [pc, #12]	; (8001658 <f6x8m_GetCharTable+0x24>)
 800164a:	4413      	add	r3, r2
}
 800164c:	4618      	mov	r0, r3
 800164e:	370c      	adds	r7, #12
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr
 8001658:	08006bb0 	.word	0x08006bb0

0800165c <font_GetFontStruct>:

//==============================================================================
// Функция возвращает указатель на структуру, описывающую символ Char
//==============================================================================
uint8_t *font_GetFontStruct(uint8_t FontID, uint8_t Char)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	4603      	mov	r3, r0
 8001664:	460a      	mov	r2, r1
 8001666:	71fb      	strb	r3, [r7, #7]
 8001668:	4613      	mov	r3, r2
 800166a:	71bb      	strb	r3, [r7, #6]
  return font_table_funcs[FontID](Char);
 800166c:	79fb      	ldrb	r3, [r7, #7]
 800166e:	4a05      	ldr	r2, [pc, #20]	; (8001684 <font_GetFontStruct+0x28>)
 8001670:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001674:	79ba      	ldrb	r2, [r7, #6]
 8001676:	4610      	mov	r0, r2
 8001678:	4798      	blx	r3
 800167a:	4603      	mov	r3, r0
}
 800167c:	4618      	mov	r0, r3
 800167e:	3708      	adds	r7, #8
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	080075b0 	.word	0x080075b0

08001688 <font_GetCharWidth>:

//==============================================================================
// Функция возвращает ширину символа
//==============================================================================
uint8_t font_GetCharWidth(uint8_t *pCharTable)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  return *pCharTable;  // Ширина символа
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	781b      	ldrb	r3, [r3, #0]
}
 8001694:	4618      	mov	r0, r3
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <font_GetCharHeight>:

//==============================================================================
// Функция возвращает высоту символа
//==============================================================================
uint8_t font_GetCharHeight(uint8_t *pCharTable)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  pCharTable++;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	3301      	adds	r3, #1
 80016ac:	607b      	str	r3, [r7, #4]
  return *pCharTable;  // Высота символа
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	781b      	ldrb	r3, [r3, #0]
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	370c      	adds	r7, #12
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
	...

080016c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b088      	sub	sp, #32
 80016c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c6:	f107 030c 	add.w	r3, r7, #12
 80016ca:	2200      	movs	r2, #0
 80016cc:	601a      	str	r2, [r3, #0]
 80016ce:	605a      	str	r2, [r3, #4]
 80016d0:	609a      	str	r2, [r3, #8]
 80016d2:	60da      	str	r2, [r3, #12]
 80016d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	60bb      	str	r3, [r7, #8]
 80016da:	4b2f      	ldr	r3, [pc, #188]	; (8001798 <MX_GPIO_Init+0xd8>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	4a2e      	ldr	r2, [pc, #184]	; (8001798 <MX_GPIO_Init+0xd8>)
 80016e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016e4:	6313      	str	r3, [r2, #48]	; 0x30
 80016e6:	4b2c      	ldr	r3, [pc, #176]	; (8001798 <MX_GPIO_Init+0xd8>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016ee:	60bb      	str	r3, [r7, #8]
 80016f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	607b      	str	r3, [r7, #4]
 80016f6:	4b28      	ldr	r3, [pc, #160]	; (8001798 <MX_GPIO_Init+0xd8>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	4a27      	ldr	r2, [pc, #156]	; (8001798 <MX_GPIO_Init+0xd8>)
 80016fc:	f043 0301 	orr.w	r3, r3, #1
 8001700:	6313      	str	r3, [r2, #48]	; 0x30
 8001702:	4b25      	ldr	r3, [pc, #148]	; (8001798 <MX_GPIO_Init+0xd8>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	607b      	str	r3, [r7, #4]
 800170c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	603b      	str	r3, [r7, #0]
 8001712:	4b21      	ldr	r3, [pc, #132]	; (8001798 <MX_GPIO_Init+0xd8>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	4a20      	ldr	r2, [pc, #128]	; (8001798 <MX_GPIO_Init+0xd8>)
 8001718:	f043 0304 	orr.w	r3, r3, #4
 800171c:	6313      	str	r3, [r2, #48]	; 0x30
 800171e:	4b1e      	ldr	r3, [pc, #120]	; (8001798 <MX_GPIO_Init+0xd8>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001722:	f003 0304 	and.w	r3, r3, #4
 8001726:	603b      	str	r3, [r7, #0]
 8001728:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Trig_Pin_Pin|nOE_Pin|SCLK_Pin, GPIO_PIN_RESET);
 800172a:	2200      	movs	r2, #0
 800172c:	2152      	movs	r1, #82	; 0x52
 800172e:	481b      	ldr	r0, [pc, #108]	; (800179c <MX_GPIO_Init+0xdc>)
 8001730:	f001 f948 	bl	80029c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, A_Pin|B_Pin, GPIO_PIN_RESET);
 8001734:	2200      	movs	r2, #0
 8001736:	2130      	movs	r1, #48	; 0x30
 8001738:	4819      	ldr	r0, [pc, #100]	; (80017a0 <MX_GPIO_Init+0xe0>)
 800173a:	f001 f943 	bl	80029c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BUTTON_Pin|Echo_Pin_Pin;
 800173e:	2305      	movs	r3, #5
 8001740:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001742:	2300      	movs	r3, #0
 8001744:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001746:	2300      	movs	r3, #0
 8001748:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800174a:	f107 030c 	add.w	r3, r7, #12
 800174e:	4619      	mov	r1, r3
 8001750:	4812      	ldr	r0, [pc, #72]	; (800179c <MX_GPIO_Init+0xdc>)
 8001752:	f000 ff9b 	bl	800268c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = Trig_Pin_Pin|nOE_Pin|SCLK_Pin;
 8001756:	2352      	movs	r3, #82	; 0x52
 8001758:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800175a:	2301      	movs	r3, #1
 800175c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175e:	2300      	movs	r3, #0
 8001760:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001762:	2300      	movs	r3, #0
 8001764:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001766:	f107 030c 	add.w	r3, r7, #12
 800176a:	4619      	mov	r1, r3
 800176c:	480b      	ldr	r0, [pc, #44]	; (800179c <MX_GPIO_Init+0xdc>)
 800176e:	f000 ff8d 	bl	800268c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = A_Pin|B_Pin;
 8001772:	2330      	movs	r3, #48	; 0x30
 8001774:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001776:	2301      	movs	r3, #1
 8001778:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177a:	2300      	movs	r3, #0
 800177c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177e:	2300      	movs	r3, #0
 8001780:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001782:	f107 030c 	add.w	r3, r7, #12
 8001786:	4619      	mov	r1, r3
 8001788:	4805      	ldr	r0, [pc, #20]	; (80017a0 <MX_GPIO_Init+0xe0>)
 800178a:	f000 ff7f 	bl	800268c <HAL_GPIO_Init>

}
 800178e:	bf00      	nop
 8001790:	3720      	adds	r7, #32
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	40023800 	.word	0x40023800
 800179c:	40020000 	.word	0x40020000
 80017a0:	40020800 	.word	0x40020800

080017a4 <DWT_Delay_us>:
/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 80017ac:	4b0d      	ldr	r3, [pc, #52]	; (80017e4 <DWT_Delay_us+0x40>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 80017b2:	f001 fd45 	bl	8003240 <HAL_RCC_GetHCLKFreq>
 80017b6:	4603      	mov	r3, r0
 80017b8:	4a0b      	ldr	r2, [pc, #44]	; (80017e8 <DWT_Delay_us+0x44>)
 80017ba:	fba2 2303 	umull	r2, r3, r2, r3
 80017be:	0c9b      	lsrs	r3, r3, #18
 80017c0:	687a      	ldr	r2, [r7, #4]
 80017c2:	fb02 f303 	mul.w	r3, r2, r3
 80017c6:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 80017c8:	bf00      	nop
 80017ca:	4b06      	ldr	r3, [pc, #24]	; (80017e4 <DWT_Delay_us+0x40>)
 80017cc:	685a      	ldr	r2, [r3, #4]
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	1ad2      	subs	r2, r2, r3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d3f8      	bcc.n	80017ca <DWT_Delay_us+0x26>
}
 80017d8:	bf00      	nop
 80017da:	bf00      	nop
 80017dc:	3710      	adds	r7, #16
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	e0001000 	.word	0xe0001000
 80017e8:	431bde83 	.word	0x431bde83

080017ec <disp_row>:
extern uint8_t data1[16], data2[16], data3[16], data4[16];
int button; // значение кнопки
int pbutton; // прошлое значение кнопки


void disp_row(int row){
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]


	  if (row == 0){
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d122      	bne.n	8001840 <disp_row+0x54>

		  for(uint8_t i=0; i<6; i++){
 80017fa:	2300      	movs	r3, #0
 80017fc:	73fb      	strb	r3, [r7, #15]
 80017fe:	e008      	b.n	8001812 <disp_row+0x26>
		  		HAL_SPI_Transmit(&hspi1, &data1, 16, 10);
 8001800:	230a      	movs	r3, #10
 8001802:	2210      	movs	r2, #16
 8001804:	4953      	ldr	r1, [pc, #332]	; (8001954 <disp_row+0x168>)
 8001806:	4854      	ldr	r0, [pc, #336]	; (8001958 <disp_row+0x16c>)
 8001808:	f001 fdaf 	bl	800336a <HAL_SPI_Transmit>
		  for(uint8_t i=0; i<6; i++){
 800180c:	7bfb      	ldrb	r3, [r7, #15]
 800180e:	3301      	adds	r3, #1
 8001810:	73fb      	strb	r3, [r7, #15]
 8001812:	7bfb      	ldrb	r3, [r7, #15]
 8001814:	2b05      	cmp	r3, #5
 8001816:	d9f3      	bls.n	8001800 <disp_row+0x14>
		  }

		  HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);
 8001818:	2200      	movs	r2, #0
 800181a:	2140      	movs	r1, #64	; 0x40
 800181c:	484f      	ldr	r0, [pc, #316]	; (800195c <disp_row+0x170>)
 800181e:	f001 f8d1 	bl	80029c4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);
 8001822:	2201      	movs	r2, #1
 8001824:	2140      	movs	r1, #64	; 0x40
 8001826:	484d      	ldr	r0, [pc, #308]	; (800195c <disp_row+0x170>)
 8001828:	f001 f8cc 	bl	80029c4 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_RESET);
 800182c:	2200      	movs	r2, #0
 800182e:	2110      	movs	r1, #16
 8001830:	484b      	ldr	r0, [pc, #300]	; (8001960 <disp_row+0x174>)
 8001832:	f001 f8c7 	bl	80029c4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_RESET);
 8001836:	2200      	movs	r2, #0
 8001838:	2120      	movs	r1, #32
 800183a:	4849      	ldr	r0, [pc, #292]	; (8001960 <disp_row+0x174>)
 800183c:	f001 f8c2 	bl	80029c4 <HAL_GPIO_WritePin>
	  }
	  if (row == 1){
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2b01      	cmp	r3, #1
 8001844:	d122      	bne.n	800188c <disp_row+0xa0>

		  for(uint8_t i=0; i<6; i++){
 8001846:	2300      	movs	r3, #0
 8001848:	73bb      	strb	r3, [r7, #14]
 800184a:	e008      	b.n	800185e <disp_row+0x72>
		  		HAL_SPI_Transmit(&hspi1, &data2, 16, 10);
 800184c:	230a      	movs	r3, #10
 800184e:	2210      	movs	r2, #16
 8001850:	4944      	ldr	r1, [pc, #272]	; (8001964 <disp_row+0x178>)
 8001852:	4841      	ldr	r0, [pc, #260]	; (8001958 <disp_row+0x16c>)
 8001854:	f001 fd89 	bl	800336a <HAL_SPI_Transmit>
		  for(uint8_t i=0; i<6; i++){
 8001858:	7bbb      	ldrb	r3, [r7, #14]
 800185a:	3301      	adds	r3, #1
 800185c:	73bb      	strb	r3, [r7, #14]
 800185e:	7bbb      	ldrb	r3, [r7, #14]
 8001860:	2b05      	cmp	r3, #5
 8001862:	d9f3      	bls.n	800184c <disp_row+0x60>
		  }

		  HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);
 8001864:	2200      	movs	r2, #0
 8001866:	2140      	movs	r1, #64	; 0x40
 8001868:	483c      	ldr	r0, [pc, #240]	; (800195c <disp_row+0x170>)
 800186a:	f001 f8ab 	bl	80029c4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);
 800186e:	2201      	movs	r2, #1
 8001870:	2140      	movs	r1, #64	; 0x40
 8001872:	483a      	ldr	r0, [pc, #232]	; (800195c <disp_row+0x170>)
 8001874:	f001 f8a6 	bl	80029c4 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_SET);
 8001878:	2201      	movs	r2, #1
 800187a:	2110      	movs	r1, #16
 800187c:	4838      	ldr	r0, [pc, #224]	; (8001960 <disp_row+0x174>)
 800187e:	f001 f8a1 	bl	80029c4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_RESET);
 8001882:	2200      	movs	r2, #0
 8001884:	2120      	movs	r1, #32
 8001886:	4836      	ldr	r0, [pc, #216]	; (8001960 <disp_row+0x174>)
 8001888:	f001 f89c 	bl	80029c4 <HAL_GPIO_WritePin>
	  }

	  if (row == 2){
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2b02      	cmp	r3, #2
 8001890:	d122      	bne.n	80018d8 <disp_row+0xec>

		  for(uint8_t i=0; i<6; i++){
 8001892:	2300      	movs	r3, #0
 8001894:	737b      	strb	r3, [r7, #13]
 8001896:	e008      	b.n	80018aa <disp_row+0xbe>
		  		HAL_SPI_Transmit(&hspi1, &data3, 16, 10);
 8001898:	230a      	movs	r3, #10
 800189a:	2210      	movs	r2, #16
 800189c:	4932      	ldr	r1, [pc, #200]	; (8001968 <disp_row+0x17c>)
 800189e:	482e      	ldr	r0, [pc, #184]	; (8001958 <disp_row+0x16c>)
 80018a0:	f001 fd63 	bl	800336a <HAL_SPI_Transmit>
		  for(uint8_t i=0; i<6; i++){
 80018a4:	7b7b      	ldrb	r3, [r7, #13]
 80018a6:	3301      	adds	r3, #1
 80018a8:	737b      	strb	r3, [r7, #13]
 80018aa:	7b7b      	ldrb	r3, [r7, #13]
 80018ac:	2b05      	cmp	r3, #5
 80018ae:	d9f3      	bls.n	8001898 <disp_row+0xac>
		  }

		  HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);
 80018b0:	2200      	movs	r2, #0
 80018b2:	2140      	movs	r1, #64	; 0x40
 80018b4:	4829      	ldr	r0, [pc, #164]	; (800195c <disp_row+0x170>)
 80018b6:	f001 f885 	bl	80029c4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);
 80018ba:	2201      	movs	r2, #1
 80018bc:	2140      	movs	r1, #64	; 0x40
 80018be:	4827      	ldr	r0, [pc, #156]	; (800195c <disp_row+0x170>)
 80018c0:	f001 f880 	bl	80029c4 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_RESET);
 80018c4:	2200      	movs	r2, #0
 80018c6:	2110      	movs	r1, #16
 80018c8:	4825      	ldr	r0, [pc, #148]	; (8001960 <disp_row+0x174>)
 80018ca:	f001 f87b 	bl	80029c4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
 80018ce:	2201      	movs	r2, #1
 80018d0:	2120      	movs	r1, #32
 80018d2:	4823      	ldr	r0, [pc, #140]	; (8001960 <disp_row+0x174>)
 80018d4:	f001 f876 	bl	80029c4 <HAL_GPIO_WritePin>
	  }

	  if (row == 3){
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2b03      	cmp	r3, #3
 80018dc:	d122      	bne.n	8001924 <disp_row+0x138>

		  for(uint8_t i=0; i<6; i++){
 80018de:	2300      	movs	r3, #0
 80018e0:	733b      	strb	r3, [r7, #12]
 80018e2:	e008      	b.n	80018f6 <disp_row+0x10a>
		  		HAL_SPI_Transmit(&hspi1, &data4, 16, 10);
 80018e4:	230a      	movs	r3, #10
 80018e6:	2210      	movs	r2, #16
 80018e8:	4920      	ldr	r1, [pc, #128]	; (800196c <disp_row+0x180>)
 80018ea:	481b      	ldr	r0, [pc, #108]	; (8001958 <disp_row+0x16c>)
 80018ec:	f001 fd3d 	bl	800336a <HAL_SPI_Transmit>
		  for(uint8_t i=0; i<6; i++){
 80018f0:	7b3b      	ldrb	r3, [r7, #12]
 80018f2:	3301      	adds	r3, #1
 80018f4:	733b      	strb	r3, [r7, #12]
 80018f6:	7b3b      	ldrb	r3, [r7, #12]
 80018f8:	2b05      	cmp	r3, #5
 80018fa:	d9f3      	bls.n	80018e4 <disp_row+0xf8>
		  }

		  HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);
 80018fc:	2200      	movs	r2, #0
 80018fe:	2140      	movs	r1, #64	; 0x40
 8001900:	4816      	ldr	r0, [pc, #88]	; (800195c <disp_row+0x170>)
 8001902:	f001 f85f 	bl	80029c4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);
 8001906:	2201      	movs	r2, #1
 8001908:	2140      	movs	r1, #64	; 0x40
 800190a:	4814      	ldr	r0, [pc, #80]	; (800195c <disp_row+0x170>)
 800190c:	f001 f85a 	bl	80029c4 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_SET);
 8001910:	2201      	movs	r2, #1
 8001912:	2110      	movs	r1, #16
 8001914:	4812      	ldr	r0, [pc, #72]	; (8001960 <disp_row+0x174>)
 8001916:	f001 f855 	bl	80029c4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
 800191a:	2201      	movs	r2, #1
 800191c:	2120      	movs	r1, #32
 800191e:	4810      	ldr	r0, [pc, #64]	; (8001960 <disp_row+0x174>)
 8001920:	f001 f850 	bl	80029c4 <HAL_GPIO_WritePin>
	  }


	  HAL_GPIO_WritePin(nOE_GPIO_Port, nOE_Pin, GPIO_PIN_SET);
 8001924:	2201      	movs	r2, #1
 8001926:	2110      	movs	r1, #16
 8001928:	480c      	ldr	r0, [pc, #48]	; (800195c <disp_row+0x170>)
 800192a:	f001 f84b 	bl	80029c4 <HAL_GPIO_WritePin>
		  for(uint32_t x=0; x<=500; x++) {};
 800192e:	2300      	movs	r3, #0
 8001930:	60bb      	str	r3, [r7, #8]
 8001932:	e002      	b.n	800193a <disp_row+0x14e>
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	3301      	adds	r3, #1
 8001938:	60bb      	str	r3, [r7, #8]
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001940:	d9f8      	bls.n	8001934 <disp_row+0x148>
	 HAL_GPIO_WritePin(nOE_GPIO_Port, nOE_Pin, GPIO_PIN_RESET);
 8001942:	2200      	movs	r2, #0
 8001944:	2110      	movs	r1, #16
 8001946:	4805      	ldr	r0, [pc, #20]	; (800195c <disp_row+0x170>)
 8001948:	f001 f83c 	bl	80029c4 <HAL_GPIO_WritePin>
  }
 800194c:	bf00      	nop
 800194e:	3710      	adds	r7, #16
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	2000017c 	.word	0x2000017c
 8001958:	200001e0 	.word	0x200001e0
 800195c:	40020000 	.word	0x40020000
 8001960:	40020800 	.word	0x40020800
 8001964:	2000018c 	.word	0x2000018c
 8001968:	2000019c 	.word	0x2000019c
 800196c:	200001ac 	.word	0x200001ac

08001970 <Read_HCSR04>:
/* USER CODE BEGIN 0 */
uint32_t sensor_time;
uint16_t distance;

uint32_t Read_HCSR04()
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
	uint32_t local_time = 0;
 8001976:	2300      	movs	r3, #0
 8001978:	607b      	str	r3, [r7, #4]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);		// pull the trig pin high
 800197a:	2201      	movs	r2, #1
 800197c:	2102      	movs	r1, #2
 800197e:	4813      	ldr	r0, [pc, #76]	; (80019cc <Read_HCSR04+0x5c>)
 8001980:	f001 f820 	bl	80029c4 <HAL_GPIO_WritePin>
	DWT_Delay_us(10);										// wait for 10 us
 8001984:	200a      	movs	r0, #10
 8001986:	f7ff ff0d 	bl	80017a4 <DWT_Delay_us>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);	// pull the trig pin low
 800198a:	2200      	movs	r2, #0
 800198c:	2102      	movs	r1, #2
 800198e:	480f      	ldr	r0, [pc, #60]	; (80019cc <Read_HCSR04+0x5c>)
 8001990:	f001 f818 	bl	80029c4 <HAL_GPIO_WritePin>

	// wait for the echo pin to go high

	while(!(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2)));
 8001994:	bf00      	nop
 8001996:	2104      	movs	r1, #4
 8001998:	480c      	ldr	r0, [pc, #48]	; (80019cc <Read_HCSR04+0x5c>)
 800199a:	f000 fffb 	bl	8002994 <HAL_GPIO_ReadPin>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d0f8      	beq.n	8001996 <Read_HCSR04+0x26>

	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2))				// while the pin is high
 80019a4:	e005      	b.n	80019b2 <Read_HCSR04+0x42>
	{
		local_time++;										// increment local time
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	3301      	adds	r3, #1
 80019aa:	607b      	str	r3, [r7, #4]
		DWT_Delay_us(1);									// every 1 us
 80019ac:	2001      	movs	r0, #1
 80019ae:	f7ff fef9 	bl	80017a4 <DWT_Delay_us>
	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2))				// while the pin is high
 80019b2:	2104      	movs	r1, #4
 80019b4:	4805      	ldr	r0, [pc, #20]	; (80019cc <Read_HCSR04+0x5c>)
 80019b6:	f000 ffed 	bl	8002994 <HAL_GPIO_ReadPin>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d1f2      	bne.n	80019a6 <Read_HCSR04+0x36>
	}

	return local_time * 2;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	005b      	lsls	r3, r3, #1
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3708      	adds	r7, #8
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	40020000 	.word	0x40020000

080019d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019d6:	f000 fcd5 	bl	8002384 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019da:	f000 fa9b 	bl	8001f14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019de:	f7ff fe6f 	bl	80016c0 <MX_GPIO_Init>
  MX_SPI1_Init();
 80019e2:	f000 fb05 	bl	8001ff0 <MX_SPI1_Init>
  MX_TIM1_Init();
 80019e6:	f000 fc29 	bl	800223c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  DWT_Delay_Init();
 80019ea:	f7ff fddf 	bl	80015ac <DWT_Delay_Init>
  HAL_GPIO_WritePin(nOE_GPIO_Port, nOE_Pin, GPIO_PIN_RESET);
 80019ee:	2200      	movs	r2, #0
 80019f0:	2110      	movs	r1, #16
 80019f2:	4871      	ldr	r0, [pc, #452]	; (8001bb8 <main+0x1e8>)
 80019f4:	f000 ffe6 	bl	80029c4 <HAL_GPIO_WritePin>
  char *pMyStr = "Game over";  //Строка на вывод
 80019f8:	4b70      	ldr	r3, [pc, #448]	; (8001bbc <main+0x1ec>)
 80019fa:	60bb      	str	r3, [r7, #8]
  uint16_t strSize = strlen(pMyStr);
 80019fc:	68b8      	ldr	r0, [r7, #8]
 80019fe:	f7fe fbef 	bl	80001e0 <strlen>
 8001a02:	4603      	mov	r3, r0
 8001a04:	80fb      	strh	r3, [r7, #6]
  uint8_t symbolDelay = 2;
 8001a06:	2302      	movs	r3, #2
 8001a08:	717b      	strb	r3, [r7, #5]
  //char *pMyStr2 = "Lose";
  HAL_TIM_Base_Start_IT(&htim1);
 8001a0a:	486d      	ldr	r0, [pc, #436]	; (8001bc0 <main+0x1f0>)
 8001a0c:	f001 ff04 	bl	8003818 <HAL_TIM_Base_Start_IT>

    /* USER CODE BEGIN 3 */
	  // Алгоритм, чтобы избавиться от дребезга контактов кнопки
	  //=============================================================

	  	  if(distance <7) { // значение тек. больше предыдушего
 8001a10:	4b6c      	ldr	r3, [pc, #432]	; (8001bc4 <main+0x1f4>)
 8001a12:	881b      	ldrh	r3, [r3, #0]
 8001a14:	2b06      	cmp	r3, #6
 8001a16:	d802      	bhi.n	8001a1e <main+0x4e>
	  		  jump_flag=1; // логическая метка прыжка, при нажатии на кнопку
 8001a18:	4b6b      	ldr	r3, [pc, #428]	; (8001bc8 <main+0x1f8>)
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	701a      	strb	r2, [r3, #0]
//		  jump_flag = 1; // логическая метка прыжка, при нажатии на кнопку
//	  }
//	  pbutton = button; // новое становится старым
	  //=============================================================

	  sensor_time = Read_HCSR04();
 8001a1e:	f7ff ffa7 	bl	8001970 <Read_HCSR04>
 8001a22:	4603      	mov	r3, r0
 8001a24:	4a69      	ldr	r2, [pc, #420]	; (8001bcc <main+0x1fc>)
 8001a26:	6013      	str	r3, [r2, #0]
	  distance = sensor_time * .034 / 2;
 8001a28:	4b68      	ldr	r3, [pc, #416]	; (8001bcc <main+0x1fc>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7fe fd71 	bl	8000514 <__aeabi_ui2d>
 8001a32:	a35b      	add	r3, pc, #364	; (adr r3, 8001ba0 <main+0x1d0>)
 8001a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a38:	f7fe fde6 	bl	8000608 <__aeabi_dmul>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	460b      	mov	r3, r1
 8001a40:	4610      	mov	r0, r2
 8001a42:	4619      	mov	r1, r3
 8001a44:	f04f 0200 	mov.w	r2, #0
 8001a48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a4c:	f7fe ff06 	bl	800085c <__aeabi_ddiv>
 8001a50:	4602      	mov	r2, r0
 8001a52:	460b      	mov	r3, r1
 8001a54:	4610      	mov	r0, r2
 8001a56:	4619      	mov	r1, r3
 8001a58:	f7fe ffe8 	bl	8000a2c <__aeabi_d2uiz>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	b29a      	uxth	r2, r3
 8001a60:	4b58      	ldr	r3, [pc, #352]	; (8001bc4 <main+0x1f4>)
 8001a62:	801a      	strh	r2, [r3, #0]
	  //distance = (distance -3);
	  if (distance >20) distance = 20;
 8001a64:	4b57      	ldr	r3, [pc, #348]	; (8001bc4 <main+0x1f4>)
 8001a66:	881b      	ldrh	r3, [r3, #0]
 8001a68:	2b14      	cmp	r3, #20
 8001a6a:	d902      	bls.n	8001a72 <main+0xa2>
 8001a6c:	4b55      	ldr	r3, [pc, #340]	; (8001bc4 <main+0x1f4>)
 8001a6e:	2214      	movs	r2, #20
 8001a70:	801a      	strh	r2, [r3, #0]
	  if(distance <=0) distance = 0;
 8001a72:	4b54      	ldr	r3, [pc, #336]	; (8001bc4 <main+0x1f4>)
 8001a74:	881b      	ldrh	r3, [r3, #0]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d102      	bne.n	8001a80 <main+0xb0>
 8001a7a:	4b52      	ldr	r3, [pc, #328]	; (8001bc4 <main+0x1f4>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	801a      	strh	r2, [r3, #0]


	  //=============================================================
	  // Основное условие игры
	  if ((flag == 1) &&(Pisdead == 0)){ // флаг переменная с таймера, которая срабатывает 60 раз в секунду
 8001a80:	4b53      	ldr	r3, [pc, #332]	; (8001bd0 <main+0x200>)
 8001a82:	881b      	ldrh	r3, [r3, #0]
 8001a84:	b21b      	sxth	r3, r3
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	f040 8148 	bne.w	8001d1c <main+0x34c>
 8001a8c:	4b51      	ldr	r3, [pc, #324]	; (8001bd4 <main+0x204>)
 8001a8e:	881b      	ldrh	r3, [r3, #0]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	f040 8143 	bne.w	8001d1c <main+0x34c>
		  	  	xh = xh-0.3; // Движение препятствий
 8001a96:	4b50      	ldr	r3, [pc, #320]	; (8001bd8 <main+0x208>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7fe fd5c 	bl	8000558 <__aeabi_f2d>
 8001aa0:	a341      	add	r3, pc, #260	; (adr r3, 8001ba8 <main+0x1d8>)
 8001aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa6:	f7fe fbf7 	bl	8000298 <__aeabi_dsub>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	460b      	mov	r3, r1
 8001aae:	4610      	mov	r0, r2
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	f7fe ffdb 	bl	8000a6c <__aeabi_d2f>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	4a47      	ldr	r2, [pc, #284]	; (8001bd8 <main+0x208>)
 8001aba:	6013      	str	r3, [r2, #0]
		  	  	if (xh<-6){ // Если препятствие ушло за конец экрана, прибавляется счётчик препятствий
 8001abc:	4b46      	ldr	r3, [pc, #280]	; (8001bd8 <main+0x208>)
 8001abe:	edd3 7a00 	vldr	s15, [r3]
 8001ac2:	eeb9 7a08 	vmov.f32	s14, #152	; 0xc0c00000 -6.0
 8001ac6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001aca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ace:	d50f      	bpl.n	8001af0 <main+0x120>
		  	  		prop_count++; // счётчик
 8001ad0:	4b42      	ldr	r3, [pc, #264]	; (8001bdc <main+0x20c>)
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	b2da      	uxtb	r2, r3
 8001ad8:	4b40      	ldr	r3, [pc, #256]	; (8001bdc <main+0x20c>)
 8001ada:	701a      	strb	r2, [r3, #0]
		  	  		if (prop_count>15){ // Ограничение счётчика (15 потому что массив из 16 элементов)
 8001adc:	4b3f      	ldr	r3, [pc, #252]	; (8001bdc <main+0x20c>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	2b0f      	cmp	r3, #15
 8001ae2:	d902      	bls.n	8001aea <main+0x11a>
		  	  			prop_count=0; // Сброс счётчика препятствий ( Счётчик == индекс массива)
 8001ae4:	4b3d      	ldr	r3, [pc, #244]	; (8001bdc <main+0x20c>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	701a      	strb	r2, [r3, #0]
		  	  		}
		  	  		xh = 38; // Генерация нового препятствия с заданной координаты
 8001aea:	4b3b      	ldr	r3, [pc, #236]	; (8001bd8 <main+0x208>)
 8001aec:	4a3c      	ldr	r2, [pc, #240]	; (8001be0 <main+0x210>)
 8001aee:	601a      	str	r2, [r3, #0]
		  	  	}
		  	  	xh1 = xh + 6; // Ширина препят
 8001af0:	4b39      	ldr	r3, [pc, #228]	; (8001bd8 <main+0x208>)
 8001af2:	edd3 7a00 	vldr	s15, [r3]
 8001af6:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8001afa:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001afe:	4b39      	ldr	r3, [pc, #228]	; (8001be4 <main+0x214>)
 8001b00:	edc3 7a00 	vstr	s15, [r3]
		  	  	yh = 0; //  Верхний край верхнего препят
 8001b04:	4b38      	ldr	r3, [pc, #224]	; (8001be8 <main+0x218>)
 8001b06:	f04f 0200 	mov.w	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]
		  	  	yl = 16; // Нижний край нижнего препят
 8001b0c:	4b37      	ldr	r3, [pc, #220]	; (8001bec <main+0x21c>)
 8001b0e:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 8001b12:	601a      	str	r2, [r3, #0]
		  	  	yh1 = h_HEIGHT[prop_count]; // Нижняя часть верхего препят
 8001b14:	4b31      	ldr	r3, [pc, #196]	; (8001bdc <main+0x20c>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	461a      	mov	r2, r3
 8001b1a:	4b35      	ldr	r3, [pc, #212]	; (8001bf0 <main+0x220>)
 8001b1c:	5c9b      	ldrb	r3, [r3, r2]
 8001b1e:	ee07 3a90 	vmov	s15, r3
 8001b22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b26:	4b33      	ldr	r3, [pc, #204]	; (8001bf4 <main+0x224>)
 8001b28:	edc3 7a00 	vstr	s15, [r3]
		  	  	yl1 = l_HEIGHT[prop_count]; // Вернхняя часть нижнего препят
 8001b2c:	4b2b      	ldr	r3, [pc, #172]	; (8001bdc <main+0x20c>)
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	461a      	mov	r2, r3
 8001b32:	4b31      	ldr	r3, [pc, #196]	; (8001bf8 <main+0x228>)
 8001b34:	5c9b      	ldrb	r3, [r3, r2]
 8001b36:	ee07 3a90 	vmov	s15, r3
 8001b3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b3e:	4b2f      	ldr	r3, [pc, #188]	; (8001bfc <main+0x22c>)
 8001b40:	edc3 7a00 	vstr	s15, [r3]
	  			ys = ys + 0.33; // изменение координат птички, падение вниз
 8001b44:	4b2e      	ldr	r3, [pc, #184]	; (8001c00 <main+0x230>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7fe fd05 	bl	8000558 <__aeabi_f2d>
 8001b4e:	a318      	add	r3, pc, #96	; (adr r3, 8001bb0 <main+0x1e0>)
 8001b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b54:	f7fe fba2 	bl	800029c <__adddf3>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	4610      	mov	r0, r2
 8001b5e:	4619      	mov	r1, r3
 8001b60:	f7fe ff84 	bl	8000a6c <__aeabi_d2f>
 8001b64:	4603      	mov	r3, r0
 8001b66:	4a26      	ldr	r2, [pc, #152]	; (8001c00 <main+0x230>)
 8001b68:	6013      	str	r3, [r2, #0]
	  			// ======================================================
	  			// Обработка прыжка

		  	  	//ys = distance;

	  			if ((jump_flag == 1)&&(jump_time<4)){ // джамп тайм = кол-во кадров с начала прыжка
 8001b6a:	4b17      	ldr	r3, [pc, #92]	; (8001bc8 <main+0x1f8>)
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d14a      	bne.n	8001c08 <main+0x238>
 8001b72:	4b24      	ldr	r3, [pc, #144]	; (8001c04 <main+0x234>)
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	2b03      	cmp	r3, #3
 8001b78:	d846      	bhi.n	8001c08 <main+0x238>
	  				jump_time++; // Cчётчик кадров в прыжке
 8001b7a:	4b22      	ldr	r3, [pc, #136]	; (8001c04 <main+0x234>)
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	3301      	adds	r3, #1
 8001b80:	b2da      	uxtb	r2, r3
 8001b82:	4b20      	ldr	r3, [pc, #128]	; (8001c04 <main+0x234>)
 8001b84:	701a      	strb	r2, [r3, #0]
	  				ys = ys-1.25; //изменение координаты птички вверх
 8001b86:	4b1e      	ldr	r3, [pc, #120]	; (8001c00 <main+0x230>)
 8001b88:	edd3 7a00 	vldr	s15, [r3]
 8001b8c:	eeb7 7a04 	vmov.f32	s14, #116	; 0x3fa00000  1.250
 8001b90:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001b94:	4b1a      	ldr	r3, [pc, #104]	; (8001c00 <main+0x230>)
 8001b96:	edc3 7a00 	vstr	s15, [r3]
 8001b9a:	e043      	b.n	8001c24 <main+0x254>
 8001b9c:	f3af 8000 	nop.w
 8001ba0:	b020c49c 	.word	0xb020c49c
 8001ba4:	3fa16872 	.word	0x3fa16872
 8001ba8:	33333333 	.word	0x33333333
 8001bac:	3fd33333 	.word	0x3fd33333
 8001bb0:	51eb851f 	.word	0x51eb851f
 8001bb4:	3fd51eb8 	.word	0x3fd51eb8
 8001bb8:	40020000 	.word	0x40020000
 8001bbc:	080049a4 	.word	0x080049a4
 8001bc0:	20000240 	.word	0x20000240
 8001bc4:	200001dc 	.word	0x200001dc
 8001bc8:	200001d2 	.word	0x200001d2
 8001bcc:	200001d8 	.word	0x200001d8
 8001bd0:	20000238 	.word	0x20000238
 8001bd4:	200001d0 	.word	0x200001d0
 8001bd8:	20000008 	.word	0x20000008
 8001bdc:	200001d4 	.word	0x200001d4
 8001be0:	42180000 	.word	0x42180000
 8001be4:	2000000c 	.word	0x2000000c
 8001be8:	200001bc 	.word	0x200001bc
 8001bec:	200001c8 	.word	0x200001c8
 8001bf0:	20000010 	.word	0x20000010
 8001bf4:	200001c0 	.word	0x200001c0
 8001bf8:	20000020 	.word	0x20000020
 8001bfc:	200001cc 	.word	0x200001cc
 8001c00:	20000004 	.word	0x20000004
 8001c04:	200001d3 	.word	0x200001d3
	  			}
	  			else if ((jump_flag == 1) && (jump_time>=2)){// Проверка, если кадров в прыжке больше чем 3 прыжок заканичавется
 8001c08:	4bb4      	ldr	r3, [pc, #720]	; (8001edc <main+0x50c>)
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d109      	bne.n	8001c24 <main+0x254>
 8001c10:	4bb3      	ldr	r3, [pc, #716]	; (8001ee0 <main+0x510>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d905      	bls.n	8001c24 <main+0x254>
	  				jump_time=0;
 8001c18:	4bb1      	ldr	r3, [pc, #708]	; (8001ee0 <main+0x510>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	701a      	strb	r2, [r3, #0]
	  				jump_flag=0;
 8001c1e:	4baf      	ldr	r3, [pc, #700]	; (8001edc <main+0x50c>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	701a      	strb	r2, [r3, #0]
	  			}
	  			// =======================================================
	  			if (ys > 15) ys=15; // Ограничение координат птички снизу
 8001c24:	4baf      	ldr	r3, [pc, #700]	; (8001ee4 <main+0x514>)
 8001c26:	edd3 7a00 	vldr	s15, [r3]
 8001c2a:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8001c2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c36:	dd02      	ble.n	8001c3e <main+0x26e>
 8001c38:	4baa      	ldr	r3, [pc, #680]	; (8001ee4 <main+0x514>)
 8001c3a:	4aab      	ldr	r2, [pc, #684]	; (8001ee8 <main+0x518>)
 8001c3c:	601a      	str	r2, [r3, #0]
	  			if (ys < 0) ys = 0; // Ограничение координат птички сверху
 8001c3e:	4ba9      	ldr	r3, [pc, #676]	; (8001ee4 <main+0x514>)
 8001c40:	edd3 7a00 	vldr	s15, [r3]
 8001c44:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c4c:	d503      	bpl.n	8001c56 <main+0x286>
 8001c4e:	4ba5      	ldr	r3, [pc, #660]	; (8001ee4 <main+0x514>)
 8001c50:	f04f 0200 	mov.w	r2, #0
 8001c54:	601a      	str	r2, [r3, #0]
	  			if (((xs-1)>=xh) && (ys<=yh1)&&((xs-1)<=xh1)){ // Проверка столкновения птички с препят
 8001c56:	4ba5      	ldr	r3, [pc, #660]	; (8001eec <main+0x51c>)
 8001c58:	881b      	ldrh	r3, [r3, #0]
 8001c5a:	3b01      	subs	r3, #1
 8001c5c:	ee07 3a90 	vmov	s15, r3
 8001c60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c64:	4ba2      	ldr	r3, [pc, #648]	; (8001ef0 <main+0x520>)
 8001c66:	edd3 7a00 	vldr	s15, [r3]
 8001c6a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c72:	db1f      	blt.n	8001cb4 <main+0x2e4>
 8001c74:	4b9b      	ldr	r3, [pc, #620]	; (8001ee4 <main+0x514>)
 8001c76:	ed93 7a00 	vldr	s14, [r3]
 8001c7a:	4b9e      	ldr	r3, [pc, #632]	; (8001ef4 <main+0x524>)
 8001c7c:	edd3 7a00 	vldr	s15, [r3]
 8001c80:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c88:	d814      	bhi.n	8001cb4 <main+0x2e4>
 8001c8a:	4b98      	ldr	r3, [pc, #608]	; (8001eec <main+0x51c>)
 8001c8c:	881b      	ldrh	r3, [r3, #0]
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	ee07 3a90 	vmov	s15, r3
 8001c94:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c98:	4b97      	ldr	r3, [pc, #604]	; (8001ef8 <main+0x528>)
 8001c9a:	edd3 7a00 	vldr	s15, [r3]
 8001c9e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ca6:	d805      	bhi.n	8001cb4 <main+0x2e4>
	  				Pisdead++;
 8001ca8:	4b94      	ldr	r3, [pc, #592]	; (8001efc <main+0x52c>)
 8001caa:	881b      	ldrh	r3, [r3, #0]
 8001cac:	3301      	adds	r3, #1
 8001cae:	b29a      	uxth	r2, r3
 8001cb0:	4b92      	ldr	r3, [pc, #584]	; (8001efc <main+0x52c>)
 8001cb2:	801a      	strh	r2, [r3, #0]
	  			}
			if ((xs>=xh) && (xs<=xh1) && ((ys+1) >= yl1)) // Как вверху, но для нижнего препятствия
 8001cb4:	4b8d      	ldr	r3, [pc, #564]	; (8001eec <main+0x51c>)
 8001cb6:	881b      	ldrh	r3, [r3, #0]
 8001cb8:	ee07 3a90 	vmov	s15, r3
 8001cbc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cc0:	4b8b      	ldr	r3, [pc, #556]	; (8001ef0 <main+0x520>)
 8001cc2:	edd3 7a00 	vldr	s15, [r3]
 8001cc6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cce:	db22      	blt.n	8001d16 <main+0x346>
 8001cd0:	4b86      	ldr	r3, [pc, #536]	; (8001eec <main+0x51c>)
 8001cd2:	881b      	ldrh	r3, [r3, #0]
 8001cd4:	ee07 3a90 	vmov	s15, r3
 8001cd8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cdc:	4b86      	ldr	r3, [pc, #536]	; (8001ef8 <main+0x528>)
 8001cde:	edd3 7a00 	vldr	s15, [r3]
 8001ce2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cea:	d814      	bhi.n	8001d16 <main+0x346>
 8001cec:	4b7d      	ldr	r3, [pc, #500]	; (8001ee4 <main+0x514>)
 8001cee:	edd3 7a00 	vldr	s15, [r3]
 8001cf2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001cf6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001cfa:	4b81      	ldr	r3, [pc, #516]	; (8001f00 <main+0x530>)
 8001cfc:	edd3 7a00 	vldr	s15, [r3]
 8001d00:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d08:	db05      	blt.n	8001d16 <main+0x346>
			{
				Pisdead++; // игрок мёртв и игровой цикл не идёт
 8001d0a:	4b7c      	ldr	r3, [pc, #496]	; (8001efc <main+0x52c>)
 8001d0c:	881b      	ldrh	r3, [r3, #0]
 8001d0e:	3301      	adds	r3, #1
 8001d10:	b29a      	uxth	r2, r3
 8001d12:	4b7a      	ldr	r3, [pc, #488]	; (8001efc <main+0x52c>)
 8001d14:	801a      	strh	r2, [r3, #0]
			}
	  			flag = 0;
 8001d16:	4b7b      	ldr	r3, [pc, #492]	; (8001f04 <main+0x534>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	801a      	strh	r2, [r3, #0]
	  		}
	  //================================================================
	  		if (Pisdead == 0){
 8001d1c:	4b77      	ldr	r3, [pc, #476]	; (8001efc <main+0x52c>)
 8001d1e:	881b      	ldrh	r3, [r3, #0]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	f040 8083 	bne.w	8001e2c <main+0x45c>
	  		// Отчищение экрана
	  		disp1color_FillScreenbuff(0);
 8001d26:	2000      	movs	r0, #0
 8001d28:	f7ff f872 	bl	8000e10 <disp1color_FillScreenbuff>
	  		// Отрисовка птички
    		disp1color_DrawLine(xs, (int)ys, xs-1, (int)ys);
 8001d2c:	4b6f      	ldr	r3, [pc, #444]	; (8001eec <main+0x51c>)
 8001d2e:	881b      	ldrh	r3, [r3, #0]
 8001d30:	b218      	sxth	r0, r3
 8001d32:	4b6c      	ldr	r3, [pc, #432]	; (8001ee4 <main+0x514>)
 8001d34:	edd3 7a00 	vldr	s15, [r3]
 8001d38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d3c:	ee17 3a90 	vmov	r3, s15
 8001d40:	b219      	sxth	r1, r3
 8001d42:	4b6a      	ldr	r3, [pc, #424]	; (8001eec <main+0x51c>)
 8001d44:	881b      	ldrh	r3, [r3, #0]
 8001d46:	3b01      	subs	r3, #1
 8001d48:	b29b      	uxth	r3, r3
 8001d4a:	b21a      	sxth	r2, r3
 8001d4c:	4b65      	ldr	r3, [pc, #404]	; (8001ee4 <main+0x514>)
 8001d4e:	edd3 7a00 	vldr	s15, [r3]
 8001d52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d56:	ee17 3a90 	vmov	r3, s15
 8001d5a:	b21b      	sxth	r3, r3
 8001d5c:	f7ff f8f6 	bl	8000f4c <disp1color_DrawLine>
    		disp1color_DrawLine(xs-1,(int)ys+1,xs+1,(int)ys+1);
 8001d60:	4b62      	ldr	r3, [pc, #392]	; (8001eec <main+0x51c>)
 8001d62:	881b      	ldrh	r3, [r3, #0]
 8001d64:	3b01      	subs	r3, #1
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	b218      	sxth	r0, r3
 8001d6a:	4b5e      	ldr	r3, [pc, #376]	; (8001ee4 <main+0x514>)
 8001d6c:	edd3 7a00 	vldr	s15, [r3]
 8001d70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d74:	ee17 3a90 	vmov	r3, s15
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	b219      	sxth	r1, r3
 8001d80:	4b5a      	ldr	r3, [pc, #360]	; (8001eec <main+0x51c>)
 8001d82:	881b      	ldrh	r3, [r3, #0]
 8001d84:	3301      	adds	r3, #1
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	b21a      	sxth	r2, r3
 8001d8a:	4b56      	ldr	r3, [pc, #344]	; (8001ee4 <main+0x514>)
 8001d8c:	edd3 7a00 	vldr	s15, [r3]
 8001d90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d94:	ee17 3a90 	vmov	r3, s15
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	b21b      	sxth	r3, r3
 8001da0:	f7ff f8d4 	bl	8000f4c <disp1color_DrawLine>
    		// Отрисовка препятствий
    		disp1color_DrawRectangle(xh,yh,xh1,yh1);
 8001da4:	4b52      	ldr	r3, [pc, #328]	; (8001ef0 <main+0x520>)
 8001da6:	edd3 7a00 	vldr	s15, [r3]
 8001daa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001dae:	ee17 3a90 	vmov	r3, s15
 8001db2:	b218      	sxth	r0, r3
 8001db4:	4b54      	ldr	r3, [pc, #336]	; (8001f08 <main+0x538>)
 8001db6:	edd3 7a00 	vldr	s15, [r3]
 8001dba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001dbe:	ee17 3a90 	vmov	r3, s15
 8001dc2:	b219      	sxth	r1, r3
 8001dc4:	4b4c      	ldr	r3, [pc, #304]	; (8001ef8 <main+0x528>)
 8001dc6:	edd3 7a00 	vldr	s15, [r3]
 8001dca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001dce:	ee17 3a90 	vmov	r3, s15
 8001dd2:	b21a      	sxth	r2, r3
 8001dd4:	4b47      	ldr	r3, [pc, #284]	; (8001ef4 <main+0x524>)
 8001dd6:	edd3 7a00 	vldr	s15, [r3]
 8001dda:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001dde:	ee17 3a90 	vmov	r3, s15
 8001de2:	b21b      	sxth	r3, r3
 8001de4:	f7ff f935 	bl	8001052 <disp1color_DrawRectangle>
    		disp1color_DrawRectangle(xh,yl,xh1,yl1);
 8001de8:	4b41      	ldr	r3, [pc, #260]	; (8001ef0 <main+0x520>)
 8001dea:	edd3 7a00 	vldr	s15, [r3]
 8001dee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001df2:	ee17 3a90 	vmov	r3, s15
 8001df6:	b218      	sxth	r0, r3
 8001df8:	4b44      	ldr	r3, [pc, #272]	; (8001f0c <main+0x53c>)
 8001dfa:	edd3 7a00 	vldr	s15, [r3]
 8001dfe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e02:	ee17 3a90 	vmov	r3, s15
 8001e06:	b219      	sxth	r1, r3
 8001e08:	4b3b      	ldr	r3, [pc, #236]	; (8001ef8 <main+0x528>)
 8001e0a:	edd3 7a00 	vldr	s15, [r3]
 8001e0e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e12:	ee17 3a90 	vmov	r3, s15
 8001e16:	b21a      	sxth	r2, r3
 8001e18:	4b39      	ldr	r3, [pc, #228]	; (8001f00 <main+0x530>)
 8001e1a:	edd3 7a00 	vldr	s15, [r3]
 8001e1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e22:	ee17 3a90 	vmov	r3, s15
 8001e26:	b21b      	sxth	r3, r3
 8001e28:	f7ff f913 	bl	8001052 <disp1color_DrawRectangle>
	  		}



	  		if(Pisdead == 1)
 8001e2c:	4b33      	ldr	r3, [pc, #204]	; (8001efc <main+0x52c>)
 8001e2e:	881b      	ldrh	r3, [r3, #0]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d139      	bne.n	8001ea8 <main+0x4d8>
	  		{
//	  			if(fillflag == 0)
//	  			{
	  				disp1color_FillScreenbuff(0);
 8001e34:	2000      	movs	r0, #0
 8001e36:	f7fe ffeb 	bl	8000e10 <disp1color_FillScreenbuff>
	  				fillflag = 1;
 8001e3a:	4b35      	ldr	r3, [pc, #212]	; (8001f10 <main+0x540>)
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	601a      	str	r2, [r3, #0]
//	  			}
	  			 for (int16_t x = 32; x > -((strSize + symbolDelay) * f6x8_MONO_WIDTH); x--){
 8001e40:	2320      	movs	r3, #32
 8001e42:	81fb      	strh	r3, [r7, #14]
 8001e44:	e025      	b.n	8001e92 <main+0x4c2>
	  			disp1color_printf(x, 4, FONTID_6X8M, pMyStr);
 8001e46:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	2104      	movs	r1, #4
 8001e50:	f7fe fffa 	bl	8000e48 <disp1color_printf>
	  			disp1color_UpdateFromBuff(); //Перевод рассчитанных данных в массив
 8001e54:	f7fe ffee 	bl	8000e34 <disp1color_UpdateFromBuff>
	  			prepare_data(); //Разбиение массива на массивы под каждую строку
 8001e58:	f7ff fb4a 	bl	80014f0 <prepare_data>
		  		for (uint8_t i = 0; i < 20; i++) {
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	737b      	strb	r3, [r7, #13]
 8001e60:	e00e      	b.n	8001e80 <main+0x4b0>
		  			disp_row(0);
 8001e62:	2000      	movs	r0, #0
 8001e64:	f7ff fcc2 	bl	80017ec <disp_row>
		  			disp_row(1);
 8001e68:	2001      	movs	r0, #1
 8001e6a:	f7ff fcbf 	bl	80017ec <disp_row>
		  			disp_row(2);
 8001e6e:	2002      	movs	r0, #2
 8001e70:	f7ff fcbc 	bl	80017ec <disp_row>
		  			disp_row(3);
 8001e74:	2003      	movs	r0, #3
 8001e76:	f7ff fcb9 	bl	80017ec <disp_row>
		  		for (uint8_t i = 0; i < 20; i++) {
 8001e7a:	7b7b      	ldrb	r3, [r7, #13]
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	737b      	strb	r3, [r7, #13]
 8001e80:	7b7b      	ldrb	r3, [r7, #13]
 8001e82:	2b13      	cmp	r3, #19
 8001e84:	d9ed      	bls.n	8001e62 <main+0x492>
	  			 for (int16_t x = 32; x > -((strSize + symbolDelay) * f6x8_MONO_WIDTH); x--){
 8001e86:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	3b01      	subs	r3, #1
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	81fb      	strh	r3, [r7, #14]
 8001e92:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8001e96:	88fa      	ldrh	r2, [r7, #6]
 8001e98:	797b      	ldrb	r3, [r7, #5]
 8001e9a:	441a      	add	r2, r3
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	0092      	lsls	r2, r2, #2
 8001ea0:	1a9b      	subs	r3, r3, r2
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	4299      	cmp	r1, r3
 8001ea6:	dcce      	bgt.n	8001e46 <main+0x476>
		  		}
	  			 }
	  		}
	  		disp1color_UpdateFromBuff(); //Перевод рассчитанных данных в массив
 8001ea8:	f7fe ffc4 	bl	8000e34 <disp1color_UpdateFromBuff>
	  		prepare_data(); //Разбиение массива на массивы под каждую строку
 8001eac:	f7ff fb20 	bl	80014f0 <prepare_data>

	  		//Включение матрицы (построчно)
	  		for (uint8_t i = 0; i < 20; i++) {
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	733b      	strb	r3, [r7, #12]
 8001eb4:	e00e      	b.n	8001ed4 <main+0x504>
	  			disp_row(0);
 8001eb6:	2000      	movs	r0, #0
 8001eb8:	f7ff fc98 	bl	80017ec <disp_row>
	  			disp_row(1);
 8001ebc:	2001      	movs	r0, #1
 8001ebe:	f7ff fc95 	bl	80017ec <disp_row>
	  			disp_row(2);
 8001ec2:	2002      	movs	r0, #2
 8001ec4:	f7ff fc92 	bl	80017ec <disp_row>
	  			disp_row(3);
 8001ec8:	2003      	movs	r0, #3
 8001eca:	f7ff fc8f 	bl	80017ec <disp_row>
	  		for (uint8_t i = 0; i < 20; i++) {
 8001ece:	7b3b      	ldrb	r3, [r7, #12]
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	733b      	strb	r3, [r7, #12]
 8001ed4:	7b3b      	ldrb	r3, [r7, #12]
 8001ed6:	2b13      	cmp	r3, #19
 8001ed8:	d9ed      	bls.n	8001eb6 <main+0x4e6>
	  	  if(distance <7) { // значение тек. больше предыдушего
 8001eda:	e599      	b.n	8001a10 <main+0x40>
 8001edc:	200001d2 	.word	0x200001d2
 8001ee0:	200001d3 	.word	0x200001d3
 8001ee4:	20000004 	.word	0x20000004
 8001ee8:	41700000 	.word	0x41700000
 8001eec:	20000002 	.word	0x20000002
 8001ef0:	20000008 	.word	0x20000008
 8001ef4:	200001c0 	.word	0x200001c0
 8001ef8:	2000000c 	.word	0x2000000c
 8001efc:	200001d0 	.word	0x200001d0
 8001f00:	200001cc 	.word	0x200001cc
 8001f04:	20000238 	.word	0x20000238
 8001f08:	200001bc 	.word	0x200001bc
 8001f0c:	200001c8 	.word	0x200001c8
 8001f10:	200001c4 	.word	0x200001c4

08001f14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b094      	sub	sp, #80	; 0x50
 8001f18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f1a:	f107 0320 	add.w	r3, r7, #32
 8001f1e:	2230      	movs	r2, #48	; 0x30
 8001f20:	2100      	movs	r1, #0
 8001f22:	4618      	mov	r0, r3
 8001f24:	f002 f8b0 	bl	8004088 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f28:	f107 030c 	add.w	r3, r7, #12
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]
 8001f30:	605a      	str	r2, [r3, #4]
 8001f32:	609a      	str	r2, [r3, #8]
 8001f34:	60da      	str	r2, [r3, #12]
 8001f36:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f38:	2300      	movs	r3, #0
 8001f3a:	60bb      	str	r3, [r7, #8]
 8001f3c:	4b27      	ldr	r3, [pc, #156]	; (8001fdc <SystemClock_Config+0xc8>)
 8001f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f40:	4a26      	ldr	r2, [pc, #152]	; (8001fdc <SystemClock_Config+0xc8>)
 8001f42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f46:	6413      	str	r3, [r2, #64]	; 0x40
 8001f48:	4b24      	ldr	r3, [pc, #144]	; (8001fdc <SystemClock_Config+0xc8>)
 8001f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f50:	60bb      	str	r3, [r7, #8]
 8001f52:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f54:	2300      	movs	r3, #0
 8001f56:	607b      	str	r3, [r7, #4]
 8001f58:	4b21      	ldr	r3, [pc, #132]	; (8001fe0 <SystemClock_Config+0xcc>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a20      	ldr	r2, [pc, #128]	; (8001fe0 <SystemClock_Config+0xcc>)
 8001f5e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f62:	6013      	str	r3, [r2, #0]
 8001f64:	4b1e      	ldr	r3, [pc, #120]	; (8001fe0 <SystemClock_Config+0xcc>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f6c:	607b      	str	r3, [r7, #4]
 8001f6e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f70:	2302      	movs	r3, #2
 8001f72:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f74:	2301      	movs	r3, #1
 8001f76:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f78:	2310      	movs	r3, #16
 8001f7a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f80:	2300      	movs	r3, #0
 8001f82:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001f84:	2308      	movs	r3, #8
 8001f86:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001f88:	2360      	movs	r3, #96	; 0x60
 8001f8a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001f90:	2304      	movs	r3, #4
 8001f92:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f94:	f107 0320 	add.w	r3, r7, #32
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f000 fd2d 	bl	80029f8 <HAL_RCC_OscConfig>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001fa4:	f000 f81e 	bl	8001fe4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fa8:	230f      	movs	r3, #15
 8001faa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fac:	2302      	movs	r3, #2
 8001fae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001fb0:	2380      	movs	r3, #128	; 0x80
 8001fb2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001fb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fb8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001fbe:	f107 030c 	add.w	r3, r7, #12
 8001fc2:	2101      	movs	r1, #1
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f000 ff8f 	bl	8002ee8 <HAL_RCC_ClockConfig>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001fd0:	f000 f808 	bl	8001fe4 <Error_Handler>
  }
}
 8001fd4:	bf00      	nop
 8001fd6:	3750      	adds	r7, #80	; 0x50
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	40023800 	.word	0x40023800
 8001fe0:	40007000 	.word	0x40007000

08001fe4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fe8:	b672      	cpsid	i
}
 8001fea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fec:	e7fe      	b.n	8001fec <Error_Handler+0x8>
	...

08001ff0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001ff4:	4b17      	ldr	r3, [pc, #92]	; (8002054 <MX_SPI1_Init+0x64>)
 8001ff6:	4a18      	ldr	r2, [pc, #96]	; (8002058 <MX_SPI1_Init+0x68>)
 8001ff8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001ffa:	4b16      	ldr	r3, [pc, #88]	; (8002054 <MX_SPI1_Init+0x64>)
 8001ffc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002000:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002002:	4b14      	ldr	r3, [pc, #80]	; (8002054 <MX_SPI1_Init+0x64>)
 8002004:	2200      	movs	r2, #0
 8002006:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002008:	4b12      	ldr	r3, [pc, #72]	; (8002054 <MX_SPI1_Init+0x64>)
 800200a:	2200      	movs	r2, #0
 800200c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800200e:	4b11      	ldr	r3, [pc, #68]	; (8002054 <MX_SPI1_Init+0x64>)
 8002010:	2200      	movs	r2, #0
 8002012:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002014:	4b0f      	ldr	r3, [pc, #60]	; (8002054 <MX_SPI1_Init+0x64>)
 8002016:	2200      	movs	r2, #0
 8002018:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800201a:	4b0e      	ldr	r3, [pc, #56]	; (8002054 <MX_SPI1_Init+0x64>)
 800201c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002020:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002022:	4b0c      	ldr	r3, [pc, #48]	; (8002054 <MX_SPI1_Init+0x64>)
 8002024:	2208      	movs	r2, #8
 8002026:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002028:	4b0a      	ldr	r3, [pc, #40]	; (8002054 <MX_SPI1_Init+0x64>)
 800202a:	2200      	movs	r2, #0
 800202c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800202e:	4b09      	ldr	r3, [pc, #36]	; (8002054 <MX_SPI1_Init+0x64>)
 8002030:	2200      	movs	r2, #0
 8002032:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002034:	4b07      	ldr	r3, [pc, #28]	; (8002054 <MX_SPI1_Init+0x64>)
 8002036:	2200      	movs	r2, #0
 8002038:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800203a:	4b06      	ldr	r3, [pc, #24]	; (8002054 <MX_SPI1_Init+0x64>)
 800203c:	220a      	movs	r2, #10
 800203e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002040:	4804      	ldr	r0, [pc, #16]	; (8002054 <MX_SPI1_Init+0x64>)
 8002042:	f001 f909 	bl	8003258 <HAL_SPI_Init>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800204c:	f7ff ffca 	bl	8001fe4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002050:	bf00      	nop
 8002052:	bd80      	pop	{r7, pc}
 8002054:	200001e0 	.word	0x200001e0
 8002058:	40013000 	.word	0x40013000

0800205c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b08a      	sub	sp, #40	; 0x28
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002064:	f107 0314 	add.w	r3, r7, #20
 8002068:	2200      	movs	r2, #0
 800206a:	601a      	str	r2, [r3, #0]
 800206c:	605a      	str	r2, [r3, #4]
 800206e:	609a      	str	r2, [r3, #8]
 8002070:	60da      	str	r2, [r3, #12]
 8002072:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a19      	ldr	r2, [pc, #100]	; (80020e0 <HAL_SPI_MspInit+0x84>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d12b      	bne.n	80020d6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800207e:	2300      	movs	r3, #0
 8002080:	613b      	str	r3, [r7, #16]
 8002082:	4b18      	ldr	r3, [pc, #96]	; (80020e4 <HAL_SPI_MspInit+0x88>)
 8002084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002086:	4a17      	ldr	r2, [pc, #92]	; (80020e4 <HAL_SPI_MspInit+0x88>)
 8002088:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800208c:	6453      	str	r3, [r2, #68]	; 0x44
 800208e:	4b15      	ldr	r3, [pc, #84]	; (80020e4 <HAL_SPI_MspInit+0x88>)
 8002090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002092:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002096:	613b      	str	r3, [r7, #16]
 8002098:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800209a:	2300      	movs	r3, #0
 800209c:	60fb      	str	r3, [r7, #12]
 800209e:	4b11      	ldr	r3, [pc, #68]	; (80020e4 <HAL_SPI_MspInit+0x88>)
 80020a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a2:	4a10      	ldr	r2, [pc, #64]	; (80020e4 <HAL_SPI_MspInit+0x88>)
 80020a4:	f043 0301 	orr.w	r3, r3, #1
 80020a8:	6313      	str	r3, [r2, #48]	; 0x30
 80020aa:	4b0e      	ldr	r3, [pc, #56]	; (80020e4 <HAL_SPI_MspInit+0x88>)
 80020ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ae:	f003 0301 	and.w	r3, r3, #1
 80020b2:	60fb      	str	r3, [r7, #12]
 80020b4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80020b6:	23a0      	movs	r3, #160	; 0xa0
 80020b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ba:	2302      	movs	r3, #2
 80020bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020be:	2300      	movs	r3, #0
 80020c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020c2:	2303      	movs	r3, #3
 80020c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80020c6:	2305      	movs	r3, #5
 80020c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ca:	f107 0314 	add.w	r3, r7, #20
 80020ce:	4619      	mov	r1, r3
 80020d0:	4805      	ldr	r0, [pc, #20]	; (80020e8 <HAL_SPI_MspInit+0x8c>)
 80020d2:	f000 fadb 	bl	800268c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80020d6:	bf00      	nop
 80020d8:	3728      	adds	r7, #40	; 0x28
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	40013000 	.word	0x40013000
 80020e4:	40023800 	.word	0x40023800
 80020e8:	40020000 	.word	0x40020000

080020ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020f2:	2300      	movs	r3, #0
 80020f4:	607b      	str	r3, [r7, #4]
 80020f6:	4b10      	ldr	r3, [pc, #64]	; (8002138 <HAL_MspInit+0x4c>)
 80020f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020fa:	4a0f      	ldr	r2, [pc, #60]	; (8002138 <HAL_MspInit+0x4c>)
 80020fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002100:	6453      	str	r3, [r2, #68]	; 0x44
 8002102:	4b0d      	ldr	r3, [pc, #52]	; (8002138 <HAL_MspInit+0x4c>)
 8002104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002106:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800210a:	607b      	str	r3, [r7, #4]
 800210c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800210e:	2300      	movs	r3, #0
 8002110:	603b      	str	r3, [r7, #0]
 8002112:	4b09      	ldr	r3, [pc, #36]	; (8002138 <HAL_MspInit+0x4c>)
 8002114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002116:	4a08      	ldr	r2, [pc, #32]	; (8002138 <HAL_MspInit+0x4c>)
 8002118:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800211c:	6413      	str	r3, [r2, #64]	; 0x40
 800211e:	4b06      	ldr	r3, [pc, #24]	; (8002138 <HAL_MspInit+0x4c>)
 8002120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002126:	603b      	str	r3, [r7, #0]
 8002128:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800212a:	bf00      	nop
 800212c:	370c      	adds	r7, #12
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	40023800 	.word	0x40023800

0800213c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002140:	e7fe      	b.n	8002140 <NMI_Handler+0x4>

08002142 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002142:	b480      	push	{r7}
 8002144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002146:	e7fe      	b.n	8002146 <HardFault_Handler+0x4>

08002148 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800214c:	e7fe      	b.n	800214c <MemManage_Handler+0x4>

0800214e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800214e:	b480      	push	{r7}
 8002150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002152:	e7fe      	b.n	8002152 <BusFault_Handler+0x4>

08002154 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002158:	e7fe      	b.n	8002158 <UsageFault_Handler+0x4>

0800215a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800215a:	b480      	push	{r7}
 800215c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800215e:	bf00      	nop
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800216c:	bf00      	nop
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr

08002176 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002176:	b480      	push	{r7}
 8002178:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800217a:	bf00      	nop
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002188:	f000 f94e 	bl	8002428 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800218c:	bf00      	nop
 800218e:	bd80      	pop	{r7, pc}

08002190 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	flag = 1;
 8002194:	4b03      	ldr	r3, [pc, #12]	; (80021a4 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8002196:	2201      	movs	r2, #1
 8002198:	801a      	strh	r2, [r3, #0]
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800219a:	4803      	ldr	r0, [pc, #12]	; (80021a8 <TIM1_UP_TIM10_IRQHandler+0x18>)
 800219c:	f001 fb9e 	bl	80038dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80021a0:	bf00      	nop
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	20000238 	.word	0x20000238
 80021a8:	20000240 	.word	0x20000240

080021ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b086      	sub	sp, #24
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021b4:	4a14      	ldr	r2, [pc, #80]	; (8002208 <_sbrk+0x5c>)
 80021b6:	4b15      	ldr	r3, [pc, #84]	; (800220c <_sbrk+0x60>)
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021c0:	4b13      	ldr	r3, [pc, #76]	; (8002210 <_sbrk+0x64>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d102      	bne.n	80021ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021c8:	4b11      	ldr	r3, [pc, #68]	; (8002210 <_sbrk+0x64>)
 80021ca:	4a12      	ldr	r2, [pc, #72]	; (8002214 <_sbrk+0x68>)
 80021cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021ce:	4b10      	ldr	r3, [pc, #64]	; (8002210 <_sbrk+0x64>)
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4413      	add	r3, r2
 80021d6:	693a      	ldr	r2, [r7, #16]
 80021d8:	429a      	cmp	r2, r3
 80021da:	d207      	bcs.n	80021ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021dc:	f001 ff1c 	bl	8004018 <__errno>
 80021e0:	4603      	mov	r3, r0
 80021e2:	220c      	movs	r2, #12
 80021e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021e6:	f04f 33ff 	mov.w	r3, #4294967295
 80021ea:	e009      	b.n	8002200 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021ec:	4b08      	ldr	r3, [pc, #32]	; (8002210 <_sbrk+0x64>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021f2:	4b07      	ldr	r3, [pc, #28]	; (8002210 <_sbrk+0x64>)
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4413      	add	r3, r2
 80021fa:	4a05      	ldr	r2, [pc, #20]	; (8002210 <_sbrk+0x64>)
 80021fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021fe:	68fb      	ldr	r3, [r7, #12]
}
 8002200:	4618      	mov	r0, r3
 8002202:	3718      	adds	r7, #24
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	20020000 	.word	0x20020000
 800220c:	00000400 	.word	0x00000400
 8002210:	2000023c 	.word	0x2000023c
 8002214:	200002a0 	.word	0x200002a0

08002218 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800221c:	4b06      	ldr	r3, [pc, #24]	; (8002238 <SystemInit+0x20>)
 800221e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002222:	4a05      	ldr	r2, [pc, #20]	; (8002238 <SystemInit+0x20>)
 8002224:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002228:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800222c:	bf00      	nop
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	e000ed00 	.word	0xe000ed00

0800223c <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b086      	sub	sp, #24
 8002240:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002242:	f107 0308 	add.w	r3, r7, #8
 8002246:	2200      	movs	r2, #0
 8002248:	601a      	str	r2, [r3, #0]
 800224a:	605a      	str	r2, [r3, #4]
 800224c:	609a      	str	r2, [r3, #8]
 800224e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002250:	463b      	mov	r3, r7
 8002252:	2200      	movs	r2, #0
 8002254:	601a      	str	r2, [r3, #0]
 8002256:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002258:	4b1f      	ldr	r3, [pc, #124]	; (80022d8 <MX_TIM1_Init+0x9c>)
 800225a:	4a20      	ldr	r2, [pc, #128]	; (80022dc <MX_TIM1_Init+0xa0>)
 800225c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1000-1;
 800225e:	4b1e      	ldr	r3, [pc, #120]	; (80022d8 <MX_TIM1_Init+0x9c>)
 8002260:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002264:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002266:	4b1c      	ldr	r3, [pc, #112]	; (80022d8 <MX_TIM1_Init+0x9c>)
 8002268:	2200      	movs	r2, #0
 800226a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 800-1;
 800226c:	4b1a      	ldr	r3, [pc, #104]	; (80022d8 <MX_TIM1_Init+0x9c>)
 800226e:	f240 321f 	movw	r2, #799	; 0x31f
 8002272:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002274:	4b18      	ldr	r3, [pc, #96]	; (80022d8 <MX_TIM1_Init+0x9c>)
 8002276:	2200      	movs	r2, #0
 8002278:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800227a:	4b17      	ldr	r3, [pc, #92]	; (80022d8 <MX_TIM1_Init+0x9c>)
 800227c:	2200      	movs	r2, #0
 800227e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002280:	4b15      	ldr	r3, [pc, #84]	; (80022d8 <MX_TIM1_Init+0x9c>)
 8002282:	2200      	movs	r2, #0
 8002284:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002286:	4814      	ldr	r0, [pc, #80]	; (80022d8 <MX_TIM1_Init+0x9c>)
 8002288:	f001 fa76 	bl	8003778 <HAL_TIM_Base_Init>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8002292:	f7ff fea7 	bl	8001fe4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002296:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800229a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800229c:	f107 0308 	add.w	r3, r7, #8
 80022a0:	4619      	mov	r1, r3
 80022a2:	480d      	ldr	r0, [pc, #52]	; (80022d8 <MX_TIM1_Init+0x9c>)
 80022a4:	f001 fc22 	bl	8003aec <HAL_TIM_ConfigClockSource>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80022ae:	f7ff fe99 	bl	8001fe4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022b2:	2300      	movs	r3, #0
 80022b4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022b6:	2300      	movs	r3, #0
 80022b8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80022ba:	463b      	mov	r3, r7
 80022bc:	4619      	mov	r1, r3
 80022be:	4806      	ldr	r0, [pc, #24]	; (80022d8 <MX_TIM1_Init+0x9c>)
 80022c0:	f001 fe28 	bl	8003f14 <HAL_TIMEx_MasterConfigSynchronization>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80022ca:	f7ff fe8b 	bl	8001fe4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80022ce:	bf00      	nop
 80022d0:	3718      	adds	r7, #24
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	20000240 	.word	0x20000240
 80022dc:	40010000 	.word	0x40010000

080022e0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a0e      	ldr	r2, [pc, #56]	; (8002328 <HAL_TIM_Base_MspInit+0x48>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d115      	bne.n	800231e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80022f2:	2300      	movs	r3, #0
 80022f4:	60fb      	str	r3, [r7, #12]
 80022f6:	4b0d      	ldr	r3, [pc, #52]	; (800232c <HAL_TIM_Base_MspInit+0x4c>)
 80022f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022fa:	4a0c      	ldr	r2, [pc, #48]	; (800232c <HAL_TIM_Base_MspInit+0x4c>)
 80022fc:	f043 0301 	orr.w	r3, r3, #1
 8002300:	6453      	str	r3, [r2, #68]	; 0x44
 8002302:	4b0a      	ldr	r3, [pc, #40]	; (800232c <HAL_TIM_Base_MspInit+0x4c>)
 8002304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002306:	f003 0301 	and.w	r3, r3, #1
 800230a:	60fb      	str	r3, [r7, #12]
 800230c:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800230e:	2200      	movs	r2, #0
 8002310:	2100      	movs	r1, #0
 8002312:	2019      	movs	r0, #25
 8002314:	f000 f983 	bl	800261e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002318:	2019      	movs	r0, #25
 800231a:	f000 f99c 	bl	8002656 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800231e:	bf00      	nop
 8002320:	3710      	adds	r7, #16
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	40010000 	.word	0x40010000
 800232c:	40023800 	.word	0x40023800

08002330 <Reset_Handler>:
 8002330:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002368 <LoopFillZerobss+0x12>
 8002334:	480d      	ldr	r0, [pc, #52]	; (800236c <LoopFillZerobss+0x16>)
 8002336:	490e      	ldr	r1, [pc, #56]	; (8002370 <LoopFillZerobss+0x1a>)
 8002338:	4a0e      	ldr	r2, [pc, #56]	; (8002374 <LoopFillZerobss+0x1e>)
 800233a:	2300      	movs	r3, #0
 800233c:	e002      	b.n	8002344 <LoopCopyDataInit>

0800233e <CopyDataInit>:
 800233e:	58d4      	ldr	r4, [r2, r3]
 8002340:	50c4      	str	r4, [r0, r3]
 8002342:	3304      	adds	r3, #4

08002344 <LoopCopyDataInit>:
 8002344:	18c4      	adds	r4, r0, r3
 8002346:	428c      	cmp	r4, r1
 8002348:	d3f9      	bcc.n	800233e <CopyDataInit>
 800234a:	4a0b      	ldr	r2, [pc, #44]	; (8002378 <LoopFillZerobss+0x22>)
 800234c:	4c0b      	ldr	r4, [pc, #44]	; (800237c <LoopFillZerobss+0x26>)
 800234e:	2300      	movs	r3, #0
 8002350:	e001      	b.n	8002356 <LoopFillZerobss>

08002352 <FillZerobss>:
 8002352:	6013      	str	r3, [r2, #0]
 8002354:	3204      	adds	r2, #4

08002356 <LoopFillZerobss>:
 8002356:	42a2      	cmp	r2, r4
 8002358:	d3fb      	bcc.n	8002352 <FillZerobss>
 800235a:	f7ff ff5d 	bl	8002218 <SystemInit>
 800235e:	f001 fe61 	bl	8004024 <__libc_init_array>
 8002362:	f7ff fb35 	bl	80019d0 <main>
 8002366:	4770      	bx	lr
 8002368:	20020000 	.word	0x20020000
 800236c:	20000000 	.word	0x20000000
 8002370:	200000a0 	.word	0x200000a0
 8002374:	0800766c 	.word	0x0800766c
 8002378:	200000a0 	.word	0x200000a0
 800237c:	2000029c 	.word	0x2000029c

08002380 <ADC_IRQHandler>:
 8002380:	e7fe      	b.n	8002380 <ADC_IRQHandler>
	...

08002384 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002388:	4b0e      	ldr	r3, [pc, #56]	; (80023c4 <HAL_Init+0x40>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a0d      	ldr	r2, [pc, #52]	; (80023c4 <HAL_Init+0x40>)
 800238e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002392:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002394:	4b0b      	ldr	r3, [pc, #44]	; (80023c4 <HAL_Init+0x40>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a0a      	ldr	r2, [pc, #40]	; (80023c4 <HAL_Init+0x40>)
 800239a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800239e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023a0:	4b08      	ldr	r3, [pc, #32]	; (80023c4 <HAL_Init+0x40>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a07      	ldr	r2, [pc, #28]	; (80023c4 <HAL_Init+0x40>)
 80023a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023ac:	2003      	movs	r0, #3
 80023ae:	f000 f92b 	bl	8002608 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023b2:	2000      	movs	r0, #0
 80023b4:	f000 f808 	bl	80023c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023b8:	f7ff fe98 	bl	80020ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023bc:	2300      	movs	r3, #0
}
 80023be:	4618      	mov	r0, r3
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	40023c00 	.word	0x40023c00

080023c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023d0:	4b12      	ldr	r3, [pc, #72]	; (800241c <HAL_InitTick+0x54>)
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	4b12      	ldr	r3, [pc, #72]	; (8002420 <HAL_InitTick+0x58>)
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	4619      	mov	r1, r3
 80023da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023de:	fbb3 f3f1 	udiv	r3, r3, r1
 80023e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80023e6:	4618      	mov	r0, r3
 80023e8:	f000 f943 	bl	8002672 <HAL_SYSTICK_Config>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e00e      	b.n	8002414 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2b0f      	cmp	r3, #15
 80023fa:	d80a      	bhi.n	8002412 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023fc:	2200      	movs	r2, #0
 80023fe:	6879      	ldr	r1, [r7, #4]
 8002400:	f04f 30ff 	mov.w	r0, #4294967295
 8002404:	f000 f90b 	bl	800261e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002408:	4a06      	ldr	r2, [pc, #24]	; (8002424 <HAL_InitTick+0x5c>)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800240e:	2300      	movs	r3, #0
 8002410:	e000      	b.n	8002414 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
}
 8002414:	4618      	mov	r0, r3
 8002416:	3708      	adds	r7, #8
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	20000030 	.word	0x20000030
 8002420:	20000038 	.word	0x20000038
 8002424:	20000034 	.word	0x20000034

08002428 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800242c:	4b06      	ldr	r3, [pc, #24]	; (8002448 <HAL_IncTick+0x20>)
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	461a      	mov	r2, r3
 8002432:	4b06      	ldr	r3, [pc, #24]	; (800244c <HAL_IncTick+0x24>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4413      	add	r3, r2
 8002438:	4a04      	ldr	r2, [pc, #16]	; (800244c <HAL_IncTick+0x24>)
 800243a:	6013      	str	r3, [r2, #0]
}
 800243c:	bf00      	nop
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	20000038 	.word	0x20000038
 800244c:	20000288 	.word	0x20000288

08002450 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  return uwTick;
 8002454:	4b03      	ldr	r3, [pc, #12]	; (8002464 <HAL_GetTick+0x14>)
 8002456:	681b      	ldr	r3, [r3, #0]
}
 8002458:	4618      	mov	r0, r3
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	20000288 	.word	0x20000288

08002468 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002468:	b480      	push	{r7}
 800246a:	b085      	sub	sp, #20
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f003 0307 	and.w	r3, r3, #7
 8002476:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002478:	4b0c      	ldr	r3, [pc, #48]	; (80024ac <__NVIC_SetPriorityGrouping+0x44>)
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800247e:	68ba      	ldr	r2, [r7, #8]
 8002480:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002484:	4013      	ands	r3, r2
 8002486:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002490:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002494:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002498:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800249a:	4a04      	ldr	r2, [pc, #16]	; (80024ac <__NVIC_SetPriorityGrouping+0x44>)
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	60d3      	str	r3, [r2, #12]
}
 80024a0:	bf00      	nop
 80024a2:	3714      	adds	r7, #20
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr
 80024ac:	e000ed00 	.word	0xe000ed00

080024b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024b4:	4b04      	ldr	r3, [pc, #16]	; (80024c8 <__NVIC_GetPriorityGrouping+0x18>)
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	0a1b      	lsrs	r3, r3, #8
 80024ba:	f003 0307 	and.w	r3, r3, #7
}
 80024be:	4618      	mov	r0, r3
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr
 80024c8:	e000ed00 	.word	0xe000ed00

080024cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	4603      	mov	r3, r0
 80024d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	db0b      	blt.n	80024f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024de:	79fb      	ldrb	r3, [r7, #7]
 80024e0:	f003 021f 	and.w	r2, r3, #31
 80024e4:	4907      	ldr	r1, [pc, #28]	; (8002504 <__NVIC_EnableIRQ+0x38>)
 80024e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ea:	095b      	lsrs	r3, r3, #5
 80024ec:	2001      	movs	r0, #1
 80024ee:	fa00 f202 	lsl.w	r2, r0, r2
 80024f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024f6:	bf00      	nop
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	e000e100 	.word	0xe000e100

08002508 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	4603      	mov	r3, r0
 8002510:	6039      	str	r1, [r7, #0]
 8002512:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002514:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002518:	2b00      	cmp	r3, #0
 800251a:	db0a      	blt.n	8002532 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	b2da      	uxtb	r2, r3
 8002520:	490c      	ldr	r1, [pc, #48]	; (8002554 <__NVIC_SetPriority+0x4c>)
 8002522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002526:	0112      	lsls	r2, r2, #4
 8002528:	b2d2      	uxtb	r2, r2
 800252a:	440b      	add	r3, r1
 800252c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002530:	e00a      	b.n	8002548 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	b2da      	uxtb	r2, r3
 8002536:	4908      	ldr	r1, [pc, #32]	; (8002558 <__NVIC_SetPriority+0x50>)
 8002538:	79fb      	ldrb	r3, [r7, #7]
 800253a:	f003 030f 	and.w	r3, r3, #15
 800253e:	3b04      	subs	r3, #4
 8002540:	0112      	lsls	r2, r2, #4
 8002542:	b2d2      	uxtb	r2, r2
 8002544:	440b      	add	r3, r1
 8002546:	761a      	strb	r2, [r3, #24]
}
 8002548:	bf00      	nop
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr
 8002554:	e000e100 	.word	0xe000e100
 8002558:	e000ed00 	.word	0xe000ed00

0800255c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800255c:	b480      	push	{r7}
 800255e:	b089      	sub	sp, #36	; 0x24
 8002560:	af00      	add	r7, sp, #0
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	60b9      	str	r1, [r7, #8]
 8002566:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f003 0307 	and.w	r3, r3, #7
 800256e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	f1c3 0307 	rsb	r3, r3, #7
 8002576:	2b04      	cmp	r3, #4
 8002578:	bf28      	it	cs
 800257a:	2304      	movcs	r3, #4
 800257c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	3304      	adds	r3, #4
 8002582:	2b06      	cmp	r3, #6
 8002584:	d902      	bls.n	800258c <NVIC_EncodePriority+0x30>
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	3b03      	subs	r3, #3
 800258a:	e000      	b.n	800258e <NVIC_EncodePriority+0x32>
 800258c:	2300      	movs	r3, #0
 800258e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002590:	f04f 32ff 	mov.w	r2, #4294967295
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	fa02 f303 	lsl.w	r3, r2, r3
 800259a:	43da      	mvns	r2, r3
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	401a      	ands	r2, r3
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025a4:	f04f 31ff 	mov.w	r1, #4294967295
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	fa01 f303 	lsl.w	r3, r1, r3
 80025ae:	43d9      	mvns	r1, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025b4:	4313      	orrs	r3, r2
         );
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3724      	adds	r7, #36	; 0x24
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
	...

080025c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	3b01      	subs	r3, #1
 80025d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025d4:	d301      	bcc.n	80025da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025d6:	2301      	movs	r3, #1
 80025d8:	e00f      	b.n	80025fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025da:	4a0a      	ldr	r2, [pc, #40]	; (8002604 <SysTick_Config+0x40>)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	3b01      	subs	r3, #1
 80025e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025e2:	210f      	movs	r1, #15
 80025e4:	f04f 30ff 	mov.w	r0, #4294967295
 80025e8:	f7ff ff8e 	bl	8002508 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025ec:	4b05      	ldr	r3, [pc, #20]	; (8002604 <SysTick_Config+0x40>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025f2:	4b04      	ldr	r3, [pc, #16]	; (8002604 <SysTick_Config+0x40>)
 80025f4:	2207      	movs	r2, #7
 80025f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025f8:	2300      	movs	r3, #0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3708      	adds	r7, #8
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	e000e010 	.word	0xe000e010

08002608 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f7ff ff29 	bl	8002468 <__NVIC_SetPriorityGrouping>
}
 8002616:	bf00      	nop
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}

0800261e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800261e:	b580      	push	{r7, lr}
 8002620:	b086      	sub	sp, #24
 8002622:	af00      	add	r7, sp, #0
 8002624:	4603      	mov	r3, r0
 8002626:	60b9      	str	r1, [r7, #8]
 8002628:	607a      	str	r2, [r7, #4]
 800262a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800262c:	2300      	movs	r3, #0
 800262e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002630:	f7ff ff3e 	bl	80024b0 <__NVIC_GetPriorityGrouping>
 8002634:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	68b9      	ldr	r1, [r7, #8]
 800263a:	6978      	ldr	r0, [r7, #20]
 800263c:	f7ff ff8e 	bl	800255c <NVIC_EncodePriority>
 8002640:	4602      	mov	r2, r0
 8002642:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002646:	4611      	mov	r1, r2
 8002648:	4618      	mov	r0, r3
 800264a:	f7ff ff5d 	bl	8002508 <__NVIC_SetPriority>
}
 800264e:	bf00      	nop
 8002650:	3718      	adds	r7, #24
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}

08002656 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002656:	b580      	push	{r7, lr}
 8002658:	b082      	sub	sp, #8
 800265a:	af00      	add	r7, sp, #0
 800265c:	4603      	mov	r3, r0
 800265e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002660:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002664:	4618      	mov	r0, r3
 8002666:	f7ff ff31 	bl	80024cc <__NVIC_EnableIRQ>
}
 800266a:	bf00      	nop
 800266c:	3708      	adds	r7, #8
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}

08002672 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002672:	b580      	push	{r7, lr}
 8002674:	b082      	sub	sp, #8
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f7ff ffa2 	bl	80025c4 <SysTick_Config>
 8002680:	4603      	mov	r3, r0
}
 8002682:	4618      	mov	r0, r3
 8002684:	3708      	adds	r7, #8
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
	...

0800268c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800268c:	b480      	push	{r7}
 800268e:	b089      	sub	sp, #36	; 0x24
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002696:	2300      	movs	r3, #0
 8002698:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800269a:	2300      	movs	r3, #0
 800269c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800269e:	2300      	movs	r3, #0
 80026a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026a2:	2300      	movs	r3, #0
 80026a4:	61fb      	str	r3, [r7, #28]
 80026a6:	e159      	b.n	800295c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026a8:	2201      	movs	r2, #1
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	fa02 f303 	lsl.w	r3, r2, r3
 80026b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	697a      	ldr	r2, [r7, #20]
 80026b8:	4013      	ands	r3, r2
 80026ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026bc:	693a      	ldr	r2, [r7, #16]
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	f040 8148 	bne.w	8002956 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f003 0303 	and.w	r3, r3, #3
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d005      	beq.n	80026de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d130      	bne.n	8002740 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	005b      	lsls	r3, r3, #1
 80026e8:	2203      	movs	r2, #3
 80026ea:	fa02 f303 	lsl.w	r3, r2, r3
 80026ee:	43db      	mvns	r3, r3
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	4013      	ands	r3, r2
 80026f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	68da      	ldr	r2, [r3, #12]
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	005b      	lsls	r3, r3, #1
 80026fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002702:	69ba      	ldr	r2, [r7, #24]
 8002704:	4313      	orrs	r3, r2
 8002706:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	69ba      	ldr	r2, [r7, #24]
 800270c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002714:	2201      	movs	r2, #1
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	fa02 f303 	lsl.w	r3, r2, r3
 800271c:	43db      	mvns	r3, r3
 800271e:	69ba      	ldr	r2, [r7, #24]
 8002720:	4013      	ands	r3, r2
 8002722:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	091b      	lsrs	r3, r3, #4
 800272a:	f003 0201 	and.w	r2, r3, #1
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	fa02 f303 	lsl.w	r3, r2, r3
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	4313      	orrs	r3, r2
 8002738:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f003 0303 	and.w	r3, r3, #3
 8002748:	2b03      	cmp	r3, #3
 800274a:	d017      	beq.n	800277c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	005b      	lsls	r3, r3, #1
 8002756:	2203      	movs	r2, #3
 8002758:	fa02 f303 	lsl.w	r3, r2, r3
 800275c:	43db      	mvns	r3, r3
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	4013      	ands	r3, r2
 8002762:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	689a      	ldr	r2, [r3, #8]
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	005b      	lsls	r3, r3, #1
 800276c:	fa02 f303 	lsl.w	r3, r2, r3
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	4313      	orrs	r3, r2
 8002774:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	69ba      	ldr	r2, [r7, #24]
 800277a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f003 0303 	and.w	r3, r3, #3
 8002784:	2b02      	cmp	r3, #2
 8002786:	d123      	bne.n	80027d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	08da      	lsrs	r2, r3, #3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	3208      	adds	r2, #8
 8002790:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002794:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	f003 0307 	and.w	r3, r3, #7
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	220f      	movs	r2, #15
 80027a0:	fa02 f303 	lsl.w	r3, r2, r3
 80027a4:	43db      	mvns	r3, r3
 80027a6:	69ba      	ldr	r2, [r7, #24]
 80027a8:	4013      	ands	r3, r2
 80027aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	691a      	ldr	r2, [r3, #16]
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	f003 0307 	and.w	r3, r3, #7
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	fa02 f303 	lsl.w	r3, r2, r3
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	4313      	orrs	r3, r2
 80027c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	08da      	lsrs	r2, r3, #3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	3208      	adds	r2, #8
 80027ca:	69b9      	ldr	r1, [r7, #24]
 80027cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	005b      	lsls	r3, r3, #1
 80027da:	2203      	movs	r2, #3
 80027dc:	fa02 f303 	lsl.w	r3, r2, r3
 80027e0:	43db      	mvns	r3, r3
 80027e2:	69ba      	ldr	r2, [r7, #24]
 80027e4:	4013      	ands	r3, r2
 80027e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f003 0203 	and.w	r2, r3, #3
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	005b      	lsls	r3, r3, #1
 80027f4:	fa02 f303 	lsl.w	r3, r2, r3
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800280c:	2b00      	cmp	r3, #0
 800280e:	f000 80a2 	beq.w	8002956 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002812:	2300      	movs	r3, #0
 8002814:	60fb      	str	r3, [r7, #12]
 8002816:	4b57      	ldr	r3, [pc, #348]	; (8002974 <HAL_GPIO_Init+0x2e8>)
 8002818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800281a:	4a56      	ldr	r2, [pc, #344]	; (8002974 <HAL_GPIO_Init+0x2e8>)
 800281c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002820:	6453      	str	r3, [r2, #68]	; 0x44
 8002822:	4b54      	ldr	r3, [pc, #336]	; (8002974 <HAL_GPIO_Init+0x2e8>)
 8002824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002826:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800282a:	60fb      	str	r3, [r7, #12]
 800282c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800282e:	4a52      	ldr	r2, [pc, #328]	; (8002978 <HAL_GPIO_Init+0x2ec>)
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	089b      	lsrs	r3, r3, #2
 8002834:	3302      	adds	r3, #2
 8002836:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800283a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	f003 0303 	and.w	r3, r3, #3
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	220f      	movs	r2, #15
 8002846:	fa02 f303 	lsl.w	r3, r2, r3
 800284a:	43db      	mvns	r3, r3
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	4013      	ands	r3, r2
 8002850:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a49      	ldr	r2, [pc, #292]	; (800297c <HAL_GPIO_Init+0x2f0>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d019      	beq.n	800288e <HAL_GPIO_Init+0x202>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a48      	ldr	r2, [pc, #288]	; (8002980 <HAL_GPIO_Init+0x2f4>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d013      	beq.n	800288a <HAL_GPIO_Init+0x1fe>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a47      	ldr	r2, [pc, #284]	; (8002984 <HAL_GPIO_Init+0x2f8>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d00d      	beq.n	8002886 <HAL_GPIO_Init+0x1fa>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a46      	ldr	r2, [pc, #280]	; (8002988 <HAL_GPIO_Init+0x2fc>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d007      	beq.n	8002882 <HAL_GPIO_Init+0x1f6>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a45      	ldr	r2, [pc, #276]	; (800298c <HAL_GPIO_Init+0x300>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d101      	bne.n	800287e <HAL_GPIO_Init+0x1f2>
 800287a:	2304      	movs	r3, #4
 800287c:	e008      	b.n	8002890 <HAL_GPIO_Init+0x204>
 800287e:	2307      	movs	r3, #7
 8002880:	e006      	b.n	8002890 <HAL_GPIO_Init+0x204>
 8002882:	2303      	movs	r3, #3
 8002884:	e004      	b.n	8002890 <HAL_GPIO_Init+0x204>
 8002886:	2302      	movs	r3, #2
 8002888:	e002      	b.n	8002890 <HAL_GPIO_Init+0x204>
 800288a:	2301      	movs	r3, #1
 800288c:	e000      	b.n	8002890 <HAL_GPIO_Init+0x204>
 800288e:	2300      	movs	r3, #0
 8002890:	69fa      	ldr	r2, [r7, #28]
 8002892:	f002 0203 	and.w	r2, r2, #3
 8002896:	0092      	lsls	r2, r2, #2
 8002898:	4093      	lsls	r3, r2
 800289a:	69ba      	ldr	r2, [r7, #24]
 800289c:	4313      	orrs	r3, r2
 800289e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028a0:	4935      	ldr	r1, [pc, #212]	; (8002978 <HAL_GPIO_Init+0x2ec>)
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	089b      	lsrs	r3, r3, #2
 80028a6:	3302      	adds	r3, #2
 80028a8:	69ba      	ldr	r2, [r7, #24]
 80028aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028ae:	4b38      	ldr	r3, [pc, #224]	; (8002990 <HAL_GPIO_Init+0x304>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	43db      	mvns	r3, r3
 80028b8:	69ba      	ldr	r2, [r7, #24]
 80028ba:	4013      	ands	r3, r2
 80028bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d003      	beq.n	80028d2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80028ca:	69ba      	ldr	r2, [r7, #24]
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028d2:	4a2f      	ldr	r2, [pc, #188]	; (8002990 <HAL_GPIO_Init+0x304>)
 80028d4:	69bb      	ldr	r3, [r7, #24]
 80028d6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80028d8:	4b2d      	ldr	r3, [pc, #180]	; (8002990 <HAL_GPIO_Init+0x304>)
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	43db      	mvns	r3, r3
 80028e2:	69ba      	ldr	r2, [r7, #24]
 80028e4:	4013      	ands	r3, r2
 80028e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d003      	beq.n	80028fc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80028f4:	69ba      	ldr	r2, [r7, #24]
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028fc:	4a24      	ldr	r2, [pc, #144]	; (8002990 <HAL_GPIO_Init+0x304>)
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002902:	4b23      	ldr	r3, [pc, #140]	; (8002990 <HAL_GPIO_Init+0x304>)
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	43db      	mvns	r3, r3
 800290c:	69ba      	ldr	r2, [r7, #24]
 800290e:	4013      	ands	r3, r2
 8002910:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d003      	beq.n	8002926 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800291e:	69ba      	ldr	r2, [r7, #24]
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	4313      	orrs	r3, r2
 8002924:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002926:	4a1a      	ldr	r2, [pc, #104]	; (8002990 <HAL_GPIO_Init+0x304>)
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800292c:	4b18      	ldr	r3, [pc, #96]	; (8002990 <HAL_GPIO_Init+0x304>)
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	43db      	mvns	r3, r3
 8002936:	69ba      	ldr	r2, [r7, #24]
 8002938:	4013      	ands	r3, r2
 800293a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d003      	beq.n	8002950 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002948:	69ba      	ldr	r2, [r7, #24]
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	4313      	orrs	r3, r2
 800294e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002950:	4a0f      	ldr	r2, [pc, #60]	; (8002990 <HAL_GPIO_Init+0x304>)
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	3301      	adds	r3, #1
 800295a:	61fb      	str	r3, [r7, #28]
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	2b0f      	cmp	r3, #15
 8002960:	f67f aea2 	bls.w	80026a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002964:	bf00      	nop
 8002966:	bf00      	nop
 8002968:	3724      	adds	r7, #36	; 0x24
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	40023800 	.word	0x40023800
 8002978:	40013800 	.word	0x40013800
 800297c:	40020000 	.word	0x40020000
 8002980:	40020400 	.word	0x40020400
 8002984:	40020800 	.word	0x40020800
 8002988:	40020c00 	.word	0x40020c00
 800298c:	40021000 	.word	0x40021000
 8002990:	40013c00 	.word	0x40013c00

08002994 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002994:	b480      	push	{r7}
 8002996:	b085      	sub	sp, #20
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	460b      	mov	r3, r1
 800299e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	691a      	ldr	r2, [r3, #16]
 80029a4:	887b      	ldrh	r3, [r7, #2]
 80029a6:	4013      	ands	r3, r2
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d002      	beq.n	80029b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80029ac:	2301      	movs	r3, #1
 80029ae:	73fb      	strb	r3, [r7, #15]
 80029b0:	e001      	b.n	80029b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80029b2:	2300      	movs	r3, #0
 80029b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80029b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3714      	adds	r7, #20
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr

080029c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	460b      	mov	r3, r1
 80029ce:	807b      	strh	r3, [r7, #2]
 80029d0:	4613      	mov	r3, r2
 80029d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029d4:	787b      	ldrb	r3, [r7, #1]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d003      	beq.n	80029e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029da:	887a      	ldrh	r2, [r7, #2]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80029e0:	e003      	b.n	80029ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029e2:	887b      	ldrh	r3, [r7, #2]
 80029e4:	041a      	lsls	r2, r3, #16
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	619a      	str	r2, [r3, #24]
}
 80029ea:	bf00      	nop
 80029ec:	370c      	adds	r7, #12
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
	...

080029f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b086      	sub	sp, #24
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d101      	bne.n	8002a0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e267      	b.n	8002eda <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0301 	and.w	r3, r3, #1
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d075      	beq.n	8002b02 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a16:	4b88      	ldr	r3, [pc, #544]	; (8002c38 <HAL_RCC_OscConfig+0x240>)
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	f003 030c 	and.w	r3, r3, #12
 8002a1e:	2b04      	cmp	r3, #4
 8002a20:	d00c      	beq.n	8002a3c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a22:	4b85      	ldr	r3, [pc, #532]	; (8002c38 <HAL_RCC_OscConfig+0x240>)
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a2a:	2b08      	cmp	r3, #8
 8002a2c:	d112      	bne.n	8002a54 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a2e:	4b82      	ldr	r3, [pc, #520]	; (8002c38 <HAL_RCC_OscConfig+0x240>)
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a3a:	d10b      	bne.n	8002a54 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a3c:	4b7e      	ldr	r3, [pc, #504]	; (8002c38 <HAL_RCC_OscConfig+0x240>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d05b      	beq.n	8002b00 <HAL_RCC_OscConfig+0x108>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d157      	bne.n	8002b00 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e242      	b.n	8002eda <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a5c:	d106      	bne.n	8002a6c <HAL_RCC_OscConfig+0x74>
 8002a5e:	4b76      	ldr	r3, [pc, #472]	; (8002c38 <HAL_RCC_OscConfig+0x240>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a75      	ldr	r2, [pc, #468]	; (8002c38 <HAL_RCC_OscConfig+0x240>)
 8002a64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a68:	6013      	str	r3, [r2, #0]
 8002a6a:	e01d      	b.n	8002aa8 <HAL_RCC_OscConfig+0xb0>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a74:	d10c      	bne.n	8002a90 <HAL_RCC_OscConfig+0x98>
 8002a76:	4b70      	ldr	r3, [pc, #448]	; (8002c38 <HAL_RCC_OscConfig+0x240>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a6f      	ldr	r2, [pc, #444]	; (8002c38 <HAL_RCC_OscConfig+0x240>)
 8002a7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a80:	6013      	str	r3, [r2, #0]
 8002a82:	4b6d      	ldr	r3, [pc, #436]	; (8002c38 <HAL_RCC_OscConfig+0x240>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a6c      	ldr	r2, [pc, #432]	; (8002c38 <HAL_RCC_OscConfig+0x240>)
 8002a88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a8c:	6013      	str	r3, [r2, #0]
 8002a8e:	e00b      	b.n	8002aa8 <HAL_RCC_OscConfig+0xb0>
 8002a90:	4b69      	ldr	r3, [pc, #420]	; (8002c38 <HAL_RCC_OscConfig+0x240>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a68      	ldr	r2, [pc, #416]	; (8002c38 <HAL_RCC_OscConfig+0x240>)
 8002a96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a9a:	6013      	str	r3, [r2, #0]
 8002a9c:	4b66      	ldr	r3, [pc, #408]	; (8002c38 <HAL_RCC_OscConfig+0x240>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a65      	ldr	r2, [pc, #404]	; (8002c38 <HAL_RCC_OscConfig+0x240>)
 8002aa2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002aa6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d013      	beq.n	8002ad8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab0:	f7ff fcce 	bl	8002450 <HAL_GetTick>
 8002ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ab6:	e008      	b.n	8002aca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ab8:	f7ff fcca 	bl	8002450 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	2b64      	cmp	r3, #100	; 0x64
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e207      	b.n	8002eda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aca:	4b5b      	ldr	r3, [pc, #364]	; (8002c38 <HAL_RCC_OscConfig+0x240>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d0f0      	beq.n	8002ab8 <HAL_RCC_OscConfig+0xc0>
 8002ad6:	e014      	b.n	8002b02 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ad8:	f7ff fcba 	bl	8002450 <HAL_GetTick>
 8002adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ade:	e008      	b.n	8002af2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ae0:	f7ff fcb6 	bl	8002450 <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	2b64      	cmp	r3, #100	; 0x64
 8002aec:	d901      	bls.n	8002af2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e1f3      	b.n	8002eda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002af2:	4b51      	ldr	r3, [pc, #324]	; (8002c38 <HAL_RCC_OscConfig+0x240>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d1f0      	bne.n	8002ae0 <HAL_RCC_OscConfig+0xe8>
 8002afe:	e000      	b.n	8002b02 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0302 	and.w	r3, r3, #2
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d063      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b0e:	4b4a      	ldr	r3, [pc, #296]	; (8002c38 <HAL_RCC_OscConfig+0x240>)
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	f003 030c 	and.w	r3, r3, #12
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d00b      	beq.n	8002b32 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b1a:	4b47      	ldr	r3, [pc, #284]	; (8002c38 <HAL_RCC_OscConfig+0x240>)
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b22:	2b08      	cmp	r3, #8
 8002b24:	d11c      	bne.n	8002b60 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b26:	4b44      	ldr	r3, [pc, #272]	; (8002c38 <HAL_RCC_OscConfig+0x240>)
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d116      	bne.n	8002b60 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b32:	4b41      	ldr	r3, [pc, #260]	; (8002c38 <HAL_RCC_OscConfig+0x240>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0302 	and.w	r3, r3, #2
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d005      	beq.n	8002b4a <HAL_RCC_OscConfig+0x152>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d001      	beq.n	8002b4a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e1c7      	b.n	8002eda <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b4a:	4b3b      	ldr	r3, [pc, #236]	; (8002c38 <HAL_RCC_OscConfig+0x240>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	691b      	ldr	r3, [r3, #16]
 8002b56:	00db      	lsls	r3, r3, #3
 8002b58:	4937      	ldr	r1, [pc, #220]	; (8002c38 <HAL_RCC_OscConfig+0x240>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b5e:	e03a      	b.n	8002bd6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d020      	beq.n	8002baa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b68:	4b34      	ldr	r3, [pc, #208]	; (8002c3c <HAL_RCC_OscConfig+0x244>)
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b6e:	f7ff fc6f 	bl	8002450 <HAL_GetTick>
 8002b72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b74:	e008      	b.n	8002b88 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b76:	f7ff fc6b 	bl	8002450 <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d901      	bls.n	8002b88 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	e1a8      	b.n	8002eda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b88:	4b2b      	ldr	r3, [pc, #172]	; (8002c38 <HAL_RCC_OscConfig+0x240>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0302 	and.w	r3, r3, #2
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d0f0      	beq.n	8002b76 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b94:	4b28      	ldr	r3, [pc, #160]	; (8002c38 <HAL_RCC_OscConfig+0x240>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	691b      	ldr	r3, [r3, #16]
 8002ba0:	00db      	lsls	r3, r3, #3
 8002ba2:	4925      	ldr	r1, [pc, #148]	; (8002c38 <HAL_RCC_OscConfig+0x240>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	600b      	str	r3, [r1, #0]
 8002ba8:	e015      	b.n	8002bd6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002baa:	4b24      	ldr	r3, [pc, #144]	; (8002c3c <HAL_RCC_OscConfig+0x244>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bb0:	f7ff fc4e 	bl	8002450 <HAL_GetTick>
 8002bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bb6:	e008      	b.n	8002bca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bb8:	f7ff fc4a 	bl	8002450 <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d901      	bls.n	8002bca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e187      	b.n	8002eda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bca:	4b1b      	ldr	r3, [pc, #108]	; (8002c38 <HAL_RCC_OscConfig+0x240>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0302 	and.w	r3, r3, #2
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d1f0      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0308 	and.w	r3, r3, #8
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d036      	beq.n	8002c50 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	695b      	ldr	r3, [r3, #20]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d016      	beq.n	8002c18 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bea:	4b15      	ldr	r3, [pc, #84]	; (8002c40 <HAL_RCC_OscConfig+0x248>)
 8002bec:	2201      	movs	r2, #1
 8002bee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bf0:	f7ff fc2e 	bl	8002450 <HAL_GetTick>
 8002bf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bf6:	e008      	b.n	8002c0a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bf8:	f7ff fc2a 	bl	8002450 <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e167      	b.n	8002eda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c0a:	4b0b      	ldr	r3, [pc, #44]	; (8002c38 <HAL_RCC_OscConfig+0x240>)
 8002c0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d0f0      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x200>
 8002c16:	e01b      	b.n	8002c50 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c18:	4b09      	ldr	r3, [pc, #36]	; (8002c40 <HAL_RCC_OscConfig+0x248>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c1e:	f7ff fc17 	bl	8002450 <HAL_GetTick>
 8002c22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c24:	e00e      	b.n	8002c44 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c26:	f7ff fc13 	bl	8002450 <HAL_GetTick>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d907      	bls.n	8002c44 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c34:	2303      	movs	r3, #3
 8002c36:	e150      	b.n	8002eda <HAL_RCC_OscConfig+0x4e2>
 8002c38:	40023800 	.word	0x40023800
 8002c3c:	42470000 	.word	0x42470000
 8002c40:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c44:	4b88      	ldr	r3, [pc, #544]	; (8002e68 <HAL_RCC_OscConfig+0x470>)
 8002c46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c48:	f003 0302 	and.w	r3, r3, #2
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d1ea      	bne.n	8002c26 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0304 	and.w	r3, r3, #4
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	f000 8097 	beq.w	8002d8c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c62:	4b81      	ldr	r3, [pc, #516]	; (8002e68 <HAL_RCC_OscConfig+0x470>)
 8002c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d10f      	bne.n	8002c8e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c6e:	2300      	movs	r3, #0
 8002c70:	60bb      	str	r3, [r7, #8]
 8002c72:	4b7d      	ldr	r3, [pc, #500]	; (8002e68 <HAL_RCC_OscConfig+0x470>)
 8002c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c76:	4a7c      	ldr	r2, [pc, #496]	; (8002e68 <HAL_RCC_OscConfig+0x470>)
 8002c78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c7c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c7e:	4b7a      	ldr	r3, [pc, #488]	; (8002e68 <HAL_RCC_OscConfig+0x470>)
 8002c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c86:	60bb      	str	r3, [r7, #8]
 8002c88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c8e:	4b77      	ldr	r3, [pc, #476]	; (8002e6c <HAL_RCC_OscConfig+0x474>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d118      	bne.n	8002ccc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c9a:	4b74      	ldr	r3, [pc, #464]	; (8002e6c <HAL_RCC_OscConfig+0x474>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a73      	ldr	r2, [pc, #460]	; (8002e6c <HAL_RCC_OscConfig+0x474>)
 8002ca0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ca4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ca6:	f7ff fbd3 	bl	8002450 <HAL_GetTick>
 8002caa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cac:	e008      	b.n	8002cc0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cae:	f7ff fbcf 	bl	8002450 <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d901      	bls.n	8002cc0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e10c      	b.n	8002eda <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cc0:	4b6a      	ldr	r3, [pc, #424]	; (8002e6c <HAL_RCC_OscConfig+0x474>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d0f0      	beq.n	8002cae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d106      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x2ea>
 8002cd4:	4b64      	ldr	r3, [pc, #400]	; (8002e68 <HAL_RCC_OscConfig+0x470>)
 8002cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd8:	4a63      	ldr	r2, [pc, #396]	; (8002e68 <HAL_RCC_OscConfig+0x470>)
 8002cda:	f043 0301 	orr.w	r3, r3, #1
 8002cde:	6713      	str	r3, [r2, #112]	; 0x70
 8002ce0:	e01c      	b.n	8002d1c <HAL_RCC_OscConfig+0x324>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	2b05      	cmp	r3, #5
 8002ce8:	d10c      	bne.n	8002d04 <HAL_RCC_OscConfig+0x30c>
 8002cea:	4b5f      	ldr	r3, [pc, #380]	; (8002e68 <HAL_RCC_OscConfig+0x470>)
 8002cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cee:	4a5e      	ldr	r2, [pc, #376]	; (8002e68 <HAL_RCC_OscConfig+0x470>)
 8002cf0:	f043 0304 	orr.w	r3, r3, #4
 8002cf4:	6713      	str	r3, [r2, #112]	; 0x70
 8002cf6:	4b5c      	ldr	r3, [pc, #368]	; (8002e68 <HAL_RCC_OscConfig+0x470>)
 8002cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cfa:	4a5b      	ldr	r2, [pc, #364]	; (8002e68 <HAL_RCC_OscConfig+0x470>)
 8002cfc:	f043 0301 	orr.w	r3, r3, #1
 8002d00:	6713      	str	r3, [r2, #112]	; 0x70
 8002d02:	e00b      	b.n	8002d1c <HAL_RCC_OscConfig+0x324>
 8002d04:	4b58      	ldr	r3, [pc, #352]	; (8002e68 <HAL_RCC_OscConfig+0x470>)
 8002d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d08:	4a57      	ldr	r2, [pc, #348]	; (8002e68 <HAL_RCC_OscConfig+0x470>)
 8002d0a:	f023 0301 	bic.w	r3, r3, #1
 8002d0e:	6713      	str	r3, [r2, #112]	; 0x70
 8002d10:	4b55      	ldr	r3, [pc, #340]	; (8002e68 <HAL_RCC_OscConfig+0x470>)
 8002d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d14:	4a54      	ldr	r2, [pc, #336]	; (8002e68 <HAL_RCC_OscConfig+0x470>)
 8002d16:	f023 0304 	bic.w	r3, r3, #4
 8002d1a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d015      	beq.n	8002d50 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d24:	f7ff fb94 	bl	8002450 <HAL_GetTick>
 8002d28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d2a:	e00a      	b.n	8002d42 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d2c:	f7ff fb90 	bl	8002450 <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e0cb      	b.n	8002eda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d42:	4b49      	ldr	r3, [pc, #292]	; (8002e68 <HAL_RCC_OscConfig+0x470>)
 8002d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d46:	f003 0302 	and.w	r3, r3, #2
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d0ee      	beq.n	8002d2c <HAL_RCC_OscConfig+0x334>
 8002d4e:	e014      	b.n	8002d7a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d50:	f7ff fb7e 	bl	8002450 <HAL_GetTick>
 8002d54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d56:	e00a      	b.n	8002d6e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d58:	f7ff fb7a 	bl	8002450 <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d901      	bls.n	8002d6e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e0b5      	b.n	8002eda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d6e:	4b3e      	ldr	r3, [pc, #248]	; (8002e68 <HAL_RCC_OscConfig+0x470>)
 8002d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d1ee      	bne.n	8002d58 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d7a:	7dfb      	ldrb	r3, [r7, #23]
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d105      	bne.n	8002d8c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d80:	4b39      	ldr	r3, [pc, #228]	; (8002e68 <HAL_RCC_OscConfig+0x470>)
 8002d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d84:	4a38      	ldr	r2, [pc, #224]	; (8002e68 <HAL_RCC_OscConfig+0x470>)
 8002d86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d8a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	699b      	ldr	r3, [r3, #24]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	f000 80a1 	beq.w	8002ed8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d96:	4b34      	ldr	r3, [pc, #208]	; (8002e68 <HAL_RCC_OscConfig+0x470>)
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f003 030c 	and.w	r3, r3, #12
 8002d9e:	2b08      	cmp	r3, #8
 8002da0:	d05c      	beq.n	8002e5c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	699b      	ldr	r3, [r3, #24]
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d141      	bne.n	8002e2e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002daa:	4b31      	ldr	r3, [pc, #196]	; (8002e70 <HAL_RCC_OscConfig+0x478>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db0:	f7ff fb4e 	bl	8002450 <HAL_GetTick>
 8002db4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002db6:	e008      	b.n	8002dca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002db8:	f7ff fb4a 	bl	8002450 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d901      	bls.n	8002dca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e087      	b.n	8002eda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dca:	4b27      	ldr	r3, [pc, #156]	; (8002e68 <HAL_RCC_OscConfig+0x470>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d1f0      	bne.n	8002db8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	69da      	ldr	r2, [r3, #28]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a1b      	ldr	r3, [r3, #32]
 8002dde:	431a      	orrs	r2, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de4:	019b      	lsls	r3, r3, #6
 8002de6:	431a      	orrs	r2, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dec:	085b      	lsrs	r3, r3, #1
 8002dee:	3b01      	subs	r3, #1
 8002df0:	041b      	lsls	r3, r3, #16
 8002df2:	431a      	orrs	r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df8:	061b      	lsls	r3, r3, #24
 8002dfa:	491b      	ldr	r1, [pc, #108]	; (8002e68 <HAL_RCC_OscConfig+0x470>)
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e00:	4b1b      	ldr	r3, [pc, #108]	; (8002e70 <HAL_RCC_OscConfig+0x478>)
 8002e02:	2201      	movs	r2, #1
 8002e04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e06:	f7ff fb23 	bl	8002450 <HAL_GetTick>
 8002e0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e0c:	e008      	b.n	8002e20 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e0e:	f7ff fb1f 	bl	8002450 <HAL_GetTick>
 8002e12:	4602      	mov	r2, r0
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d901      	bls.n	8002e20 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e05c      	b.n	8002eda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e20:	4b11      	ldr	r3, [pc, #68]	; (8002e68 <HAL_RCC_OscConfig+0x470>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d0f0      	beq.n	8002e0e <HAL_RCC_OscConfig+0x416>
 8002e2c:	e054      	b.n	8002ed8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e2e:	4b10      	ldr	r3, [pc, #64]	; (8002e70 <HAL_RCC_OscConfig+0x478>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e34:	f7ff fb0c 	bl	8002450 <HAL_GetTick>
 8002e38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e3a:	e008      	b.n	8002e4e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e3c:	f7ff fb08 	bl	8002450 <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d901      	bls.n	8002e4e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e045      	b.n	8002eda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e4e:	4b06      	ldr	r3, [pc, #24]	; (8002e68 <HAL_RCC_OscConfig+0x470>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d1f0      	bne.n	8002e3c <HAL_RCC_OscConfig+0x444>
 8002e5a:	e03d      	b.n	8002ed8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	699b      	ldr	r3, [r3, #24]
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d107      	bne.n	8002e74 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e038      	b.n	8002eda <HAL_RCC_OscConfig+0x4e2>
 8002e68:	40023800 	.word	0x40023800
 8002e6c:	40007000 	.word	0x40007000
 8002e70:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e74:	4b1b      	ldr	r3, [pc, #108]	; (8002ee4 <HAL_RCC_OscConfig+0x4ec>)
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	699b      	ldr	r3, [r3, #24]
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d028      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d121      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d11a      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e9e:	68fa      	ldr	r2, [r7, #12]
 8002ea0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002eaa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d111      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eba:	085b      	lsrs	r3, r3, #1
 8002ebc:	3b01      	subs	r3, #1
 8002ebe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d107      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ece:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d001      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e000      	b.n	8002eda <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3718      	adds	r7, #24
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	40023800 	.word	0x40023800

08002ee8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d101      	bne.n	8002efc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e0cc      	b.n	8003096 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002efc:	4b68      	ldr	r3, [pc, #416]	; (80030a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0307 	and.w	r3, r3, #7
 8002f04:	683a      	ldr	r2, [r7, #0]
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d90c      	bls.n	8002f24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f0a:	4b65      	ldr	r3, [pc, #404]	; (80030a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f0c:	683a      	ldr	r2, [r7, #0]
 8002f0e:	b2d2      	uxtb	r2, r2
 8002f10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f12:	4b63      	ldr	r3, [pc, #396]	; (80030a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0307 	and.w	r3, r3, #7
 8002f1a:	683a      	ldr	r2, [r7, #0]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d001      	beq.n	8002f24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e0b8      	b.n	8003096 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0302 	and.w	r3, r3, #2
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d020      	beq.n	8002f72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0304 	and.w	r3, r3, #4
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d005      	beq.n	8002f48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f3c:	4b59      	ldr	r3, [pc, #356]	; (80030a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	4a58      	ldr	r2, [pc, #352]	; (80030a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f46:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0308 	and.w	r3, r3, #8
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d005      	beq.n	8002f60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f54:	4b53      	ldr	r3, [pc, #332]	; (80030a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	4a52      	ldr	r2, [pc, #328]	; (80030a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f60:	4b50      	ldr	r3, [pc, #320]	; (80030a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	494d      	ldr	r1, [pc, #308]	; (80030a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0301 	and.w	r3, r3, #1
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d044      	beq.n	8003008 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d107      	bne.n	8002f96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f86:	4b47      	ldr	r3, [pc, #284]	; (80030a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d119      	bne.n	8002fc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e07f      	b.n	8003096 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d003      	beq.n	8002fa6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fa2:	2b03      	cmp	r3, #3
 8002fa4:	d107      	bne.n	8002fb6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fa6:	4b3f      	ldr	r3, [pc, #252]	; (80030a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d109      	bne.n	8002fc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e06f      	b.n	8003096 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fb6:	4b3b      	ldr	r3, [pc, #236]	; (80030a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0302 	and.w	r3, r3, #2
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d101      	bne.n	8002fc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e067      	b.n	8003096 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fc6:	4b37      	ldr	r3, [pc, #220]	; (80030a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	f023 0203 	bic.w	r2, r3, #3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	4934      	ldr	r1, [pc, #208]	; (80030a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fd8:	f7ff fa3a 	bl	8002450 <HAL_GetTick>
 8002fdc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fde:	e00a      	b.n	8002ff6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fe0:	f7ff fa36 	bl	8002450 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e04f      	b.n	8003096 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ff6:	4b2b      	ldr	r3, [pc, #172]	; (80030a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f003 020c 	and.w	r2, r3, #12
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	429a      	cmp	r2, r3
 8003006:	d1eb      	bne.n	8002fe0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003008:	4b25      	ldr	r3, [pc, #148]	; (80030a0 <HAL_RCC_ClockConfig+0x1b8>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0307 	and.w	r3, r3, #7
 8003010:	683a      	ldr	r2, [r7, #0]
 8003012:	429a      	cmp	r2, r3
 8003014:	d20c      	bcs.n	8003030 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003016:	4b22      	ldr	r3, [pc, #136]	; (80030a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003018:	683a      	ldr	r2, [r7, #0]
 800301a:	b2d2      	uxtb	r2, r2
 800301c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800301e:	4b20      	ldr	r3, [pc, #128]	; (80030a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0307 	and.w	r3, r3, #7
 8003026:	683a      	ldr	r2, [r7, #0]
 8003028:	429a      	cmp	r2, r3
 800302a:	d001      	beq.n	8003030 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e032      	b.n	8003096 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0304 	and.w	r3, r3, #4
 8003038:	2b00      	cmp	r3, #0
 800303a:	d008      	beq.n	800304e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800303c:	4b19      	ldr	r3, [pc, #100]	; (80030a4 <HAL_RCC_ClockConfig+0x1bc>)
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	4916      	ldr	r1, [pc, #88]	; (80030a4 <HAL_RCC_ClockConfig+0x1bc>)
 800304a:	4313      	orrs	r3, r2
 800304c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0308 	and.w	r3, r3, #8
 8003056:	2b00      	cmp	r3, #0
 8003058:	d009      	beq.n	800306e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800305a:	4b12      	ldr	r3, [pc, #72]	; (80030a4 <HAL_RCC_ClockConfig+0x1bc>)
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	691b      	ldr	r3, [r3, #16]
 8003066:	00db      	lsls	r3, r3, #3
 8003068:	490e      	ldr	r1, [pc, #56]	; (80030a4 <HAL_RCC_ClockConfig+0x1bc>)
 800306a:	4313      	orrs	r3, r2
 800306c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800306e:	f000 f821 	bl	80030b4 <HAL_RCC_GetSysClockFreq>
 8003072:	4602      	mov	r2, r0
 8003074:	4b0b      	ldr	r3, [pc, #44]	; (80030a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	091b      	lsrs	r3, r3, #4
 800307a:	f003 030f 	and.w	r3, r3, #15
 800307e:	490a      	ldr	r1, [pc, #40]	; (80030a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003080:	5ccb      	ldrb	r3, [r1, r3]
 8003082:	fa22 f303 	lsr.w	r3, r2, r3
 8003086:	4a09      	ldr	r2, [pc, #36]	; (80030ac <HAL_RCC_ClockConfig+0x1c4>)
 8003088:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800308a:	4b09      	ldr	r3, [pc, #36]	; (80030b0 <HAL_RCC_ClockConfig+0x1c8>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4618      	mov	r0, r3
 8003090:	f7ff f99a 	bl	80023c8 <HAL_InitTick>

  return HAL_OK;
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	3710      	adds	r7, #16
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	40023c00 	.word	0x40023c00
 80030a4:	40023800 	.word	0x40023800
 80030a8:	080075b8 	.word	0x080075b8
 80030ac:	20000030 	.word	0x20000030
 80030b0:	20000034 	.word	0x20000034

080030b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030b8:	b090      	sub	sp, #64	; 0x40
 80030ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80030bc:	2300      	movs	r3, #0
 80030be:	637b      	str	r3, [r7, #52]	; 0x34
 80030c0:	2300      	movs	r3, #0
 80030c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030c4:	2300      	movs	r3, #0
 80030c6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80030c8:	2300      	movs	r3, #0
 80030ca:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030cc:	4b59      	ldr	r3, [pc, #356]	; (8003234 <HAL_RCC_GetSysClockFreq+0x180>)
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	f003 030c 	and.w	r3, r3, #12
 80030d4:	2b08      	cmp	r3, #8
 80030d6:	d00d      	beq.n	80030f4 <HAL_RCC_GetSysClockFreq+0x40>
 80030d8:	2b08      	cmp	r3, #8
 80030da:	f200 80a1 	bhi.w	8003220 <HAL_RCC_GetSysClockFreq+0x16c>
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d002      	beq.n	80030e8 <HAL_RCC_GetSysClockFreq+0x34>
 80030e2:	2b04      	cmp	r3, #4
 80030e4:	d003      	beq.n	80030ee <HAL_RCC_GetSysClockFreq+0x3a>
 80030e6:	e09b      	b.n	8003220 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030e8:	4b53      	ldr	r3, [pc, #332]	; (8003238 <HAL_RCC_GetSysClockFreq+0x184>)
 80030ea:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80030ec:	e09b      	b.n	8003226 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80030ee:	4b53      	ldr	r3, [pc, #332]	; (800323c <HAL_RCC_GetSysClockFreq+0x188>)
 80030f0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80030f2:	e098      	b.n	8003226 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030f4:	4b4f      	ldr	r3, [pc, #316]	; (8003234 <HAL_RCC_GetSysClockFreq+0x180>)
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030fc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030fe:	4b4d      	ldr	r3, [pc, #308]	; (8003234 <HAL_RCC_GetSysClockFreq+0x180>)
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d028      	beq.n	800315c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800310a:	4b4a      	ldr	r3, [pc, #296]	; (8003234 <HAL_RCC_GetSysClockFreq+0x180>)
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	099b      	lsrs	r3, r3, #6
 8003110:	2200      	movs	r2, #0
 8003112:	623b      	str	r3, [r7, #32]
 8003114:	627a      	str	r2, [r7, #36]	; 0x24
 8003116:	6a3b      	ldr	r3, [r7, #32]
 8003118:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800311c:	2100      	movs	r1, #0
 800311e:	4b47      	ldr	r3, [pc, #284]	; (800323c <HAL_RCC_GetSysClockFreq+0x188>)
 8003120:	fb03 f201 	mul.w	r2, r3, r1
 8003124:	2300      	movs	r3, #0
 8003126:	fb00 f303 	mul.w	r3, r0, r3
 800312a:	4413      	add	r3, r2
 800312c:	4a43      	ldr	r2, [pc, #268]	; (800323c <HAL_RCC_GetSysClockFreq+0x188>)
 800312e:	fba0 1202 	umull	r1, r2, r0, r2
 8003132:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003134:	460a      	mov	r2, r1
 8003136:	62ba      	str	r2, [r7, #40]	; 0x28
 8003138:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800313a:	4413      	add	r3, r2
 800313c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800313e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003140:	2200      	movs	r2, #0
 8003142:	61bb      	str	r3, [r7, #24]
 8003144:	61fa      	str	r2, [r7, #28]
 8003146:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800314a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800314e:	f7fd fcdd 	bl	8000b0c <__aeabi_uldivmod>
 8003152:	4602      	mov	r2, r0
 8003154:	460b      	mov	r3, r1
 8003156:	4613      	mov	r3, r2
 8003158:	63fb      	str	r3, [r7, #60]	; 0x3c
 800315a:	e053      	b.n	8003204 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800315c:	4b35      	ldr	r3, [pc, #212]	; (8003234 <HAL_RCC_GetSysClockFreq+0x180>)
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	099b      	lsrs	r3, r3, #6
 8003162:	2200      	movs	r2, #0
 8003164:	613b      	str	r3, [r7, #16]
 8003166:	617a      	str	r2, [r7, #20]
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800316e:	f04f 0b00 	mov.w	fp, #0
 8003172:	4652      	mov	r2, sl
 8003174:	465b      	mov	r3, fp
 8003176:	f04f 0000 	mov.w	r0, #0
 800317a:	f04f 0100 	mov.w	r1, #0
 800317e:	0159      	lsls	r1, r3, #5
 8003180:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003184:	0150      	lsls	r0, r2, #5
 8003186:	4602      	mov	r2, r0
 8003188:	460b      	mov	r3, r1
 800318a:	ebb2 080a 	subs.w	r8, r2, sl
 800318e:	eb63 090b 	sbc.w	r9, r3, fp
 8003192:	f04f 0200 	mov.w	r2, #0
 8003196:	f04f 0300 	mov.w	r3, #0
 800319a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800319e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80031a2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80031a6:	ebb2 0408 	subs.w	r4, r2, r8
 80031aa:	eb63 0509 	sbc.w	r5, r3, r9
 80031ae:	f04f 0200 	mov.w	r2, #0
 80031b2:	f04f 0300 	mov.w	r3, #0
 80031b6:	00eb      	lsls	r3, r5, #3
 80031b8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031bc:	00e2      	lsls	r2, r4, #3
 80031be:	4614      	mov	r4, r2
 80031c0:	461d      	mov	r5, r3
 80031c2:	eb14 030a 	adds.w	r3, r4, sl
 80031c6:	603b      	str	r3, [r7, #0]
 80031c8:	eb45 030b 	adc.w	r3, r5, fp
 80031cc:	607b      	str	r3, [r7, #4]
 80031ce:	f04f 0200 	mov.w	r2, #0
 80031d2:	f04f 0300 	mov.w	r3, #0
 80031d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80031da:	4629      	mov	r1, r5
 80031dc:	028b      	lsls	r3, r1, #10
 80031de:	4621      	mov	r1, r4
 80031e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80031e4:	4621      	mov	r1, r4
 80031e6:	028a      	lsls	r2, r1, #10
 80031e8:	4610      	mov	r0, r2
 80031ea:	4619      	mov	r1, r3
 80031ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031ee:	2200      	movs	r2, #0
 80031f0:	60bb      	str	r3, [r7, #8]
 80031f2:	60fa      	str	r2, [r7, #12]
 80031f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80031f8:	f7fd fc88 	bl	8000b0c <__aeabi_uldivmod>
 80031fc:	4602      	mov	r2, r0
 80031fe:	460b      	mov	r3, r1
 8003200:	4613      	mov	r3, r2
 8003202:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003204:	4b0b      	ldr	r3, [pc, #44]	; (8003234 <HAL_RCC_GetSysClockFreq+0x180>)
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	0c1b      	lsrs	r3, r3, #16
 800320a:	f003 0303 	and.w	r3, r3, #3
 800320e:	3301      	adds	r3, #1
 8003210:	005b      	lsls	r3, r3, #1
 8003212:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003214:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003218:	fbb2 f3f3 	udiv	r3, r2, r3
 800321c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800321e:	e002      	b.n	8003226 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003220:	4b05      	ldr	r3, [pc, #20]	; (8003238 <HAL_RCC_GetSysClockFreq+0x184>)
 8003222:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003224:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003228:	4618      	mov	r0, r3
 800322a:	3740      	adds	r7, #64	; 0x40
 800322c:	46bd      	mov	sp, r7
 800322e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003232:	bf00      	nop
 8003234:	40023800 	.word	0x40023800
 8003238:	00f42400 	.word	0x00f42400
 800323c:	017d7840 	.word	0x017d7840

08003240 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003240:	b480      	push	{r7}
 8003242:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003244:	4b03      	ldr	r3, [pc, #12]	; (8003254 <HAL_RCC_GetHCLKFreq+0x14>)
 8003246:	681b      	ldr	r3, [r3, #0]
}
 8003248:	4618      	mov	r0, r3
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr
 8003252:	bf00      	nop
 8003254:	20000030 	.word	0x20000030

08003258 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d101      	bne.n	800326a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e07b      	b.n	8003362 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326e:	2b00      	cmp	r3, #0
 8003270:	d108      	bne.n	8003284 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800327a:	d009      	beq.n	8003290 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	61da      	str	r2, [r3, #28]
 8003282:	e005      	b.n	8003290 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800329c:	b2db      	uxtb	r3, r3
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d106      	bne.n	80032b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f7fe fed6 	bl	800205c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2202      	movs	r2, #2
 80032b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032c6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80032d8:	431a      	orrs	r2, r3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032e2:	431a      	orrs	r2, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	691b      	ldr	r3, [r3, #16]
 80032e8:	f003 0302 	and.w	r3, r3, #2
 80032ec:	431a      	orrs	r2, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	695b      	ldr	r3, [r3, #20]
 80032f2:	f003 0301 	and.w	r3, r3, #1
 80032f6:	431a      	orrs	r2, r3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	699b      	ldr	r3, [r3, #24]
 80032fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003300:	431a      	orrs	r2, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	69db      	ldr	r3, [r3, #28]
 8003306:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800330a:	431a      	orrs	r2, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a1b      	ldr	r3, [r3, #32]
 8003310:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003314:	ea42 0103 	orr.w	r1, r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800331c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	430a      	orrs	r2, r1
 8003326:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	699b      	ldr	r3, [r3, #24]
 800332c:	0c1b      	lsrs	r3, r3, #16
 800332e:	f003 0104 	and.w	r1, r3, #4
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003336:	f003 0210 	and.w	r2, r3, #16
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	430a      	orrs	r2, r1
 8003340:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	69da      	ldr	r2, [r3, #28]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003350:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003360:	2300      	movs	r3, #0
}
 8003362:	4618      	mov	r0, r3
 8003364:	3708      	adds	r7, #8
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}

0800336a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800336a:	b580      	push	{r7, lr}
 800336c:	b088      	sub	sp, #32
 800336e:	af00      	add	r7, sp, #0
 8003370:	60f8      	str	r0, [r7, #12]
 8003372:	60b9      	str	r1, [r7, #8]
 8003374:	603b      	str	r3, [r7, #0]
 8003376:	4613      	mov	r3, r2
 8003378:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800337a:	2300      	movs	r3, #0
 800337c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003384:	2b01      	cmp	r3, #1
 8003386:	d101      	bne.n	800338c <HAL_SPI_Transmit+0x22>
 8003388:	2302      	movs	r3, #2
 800338a:	e126      	b.n	80035da <HAL_SPI_Transmit+0x270>
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003394:	f7ff f85c 	bl	8002450 <HAL_GetTick>
 8003398:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800339a:	88fb      	ldrh	r3, [r7, #6]
 800339c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d002      	beq.n	80033b0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80033aa:	2302      	movs	r3, #2
 80033ac:	77fb      	strb	r3, [r7, #31]
    goto error;
 80033ae:	e10b      	b.n	80035c8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d002      	beq.n	80033bc <HAL_SPI_Transmit+0x52>
 80033b6:	88fb      	ldrh	r3, [r7, #6]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d102      	bne.n	80033c2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	77fb      	strb	r3, [r7, #31]
    goto error;
 80033c0:	e102      	b.n	80035c8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2203      	movs	r2, #3
 80033c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2200      	movs	r2, #0
 80033ce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	68ba      	ldr	r2, [r7, #8]
 80033d4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	88fa      	ldrh	r2, [r7, #6]
 80033da:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	88fa      	ldrh	r2, [r7, #6]
 80033e0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2200      	movs	r2, #0
 80033e6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2200      	movs	r2, #0
 80033ec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2200      	movs	r2, #0
 80033f2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2200      	movs	r2, #0
 80033f8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2200      	movs	r2, #0
 80033fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003408:	d10f      	bne.n	800342a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003418:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003428:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003434:	2b40      	cmp	r3, #64	; 0x40
 8003436:	d007      	beq.n	8003448 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003446:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003450:	d14b      	bne.n	80034ea <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d002      	beq.n	8003460 <HAL_SPI_Transmit+0xf6>
 800345a:	8afb      	ldrh	r3, [r7, #22]
 800345c:	2b01      	cmp	r3, #1
 800345e:	d13e      	bne.n	80034de <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003464:	881a      	ldrh	r2, [r3, #0]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003470:	1c9a      	adds	r2, r3, #2
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800347a:	b29b      	uxth	r3, r3
 800347c:	3b01      	subs	r3, #1
 800347e:	b29a      	uxth	r2, r3
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003484:	e02b      	b.n	80034de <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	f003 0302 	and.w	r3, r3, #2
 8003490:	2b02      	cmp	r3, #2
 8003492:	d112      	bne.n	80034ba <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003498:	881a      	ldrh	r2, [r3, #0]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a4:	1c9a      	adds	r2, r3, #2
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	3b01      	subs	r3, #1
 80034b2:	b29a      	uxth	r2, r3
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	86da      	strh	r2, [r3, #54]	; 0x36
 80034b8:	e011      	b.n	80034de <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80034ba:	f7fe ffc9 	bl	8002450 <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	683a      	ldr	r2, [r7, #0]
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d803      	bhi.n	80034d2 <HAL_SPI_Transmit+0x168>
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034d0:	d102      	bne.n	80034d8 <HAL_SPI_Transmit+0x16e>
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d102      	bne.n	80034de <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80034d8:	2303      	movs	r3, #3
 80034da:	77fb      	strb	r3, [r7, #31]
          goto error;
 80034dc:	e074      	b.n	80035c8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d1ce      	bne.n	8003486 <HAL_SPI_Transmit+0x11c>
 80034e8:	e04c      	b.n	8003584 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d002      	beq.n	80034f8 <HAL_SPI_Transmit+0x18e>
 80034f2:	8afb      	ldrh	r3, [r7, #22]
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d140      	bne.n	800357a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	330c      	adds	r3, #12
 8003502:	7812      	ldrb	r2, [r2, #0]
 8003504:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350a:	1c5a      	adds	r2, r3, #1
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003514:	b29b      	uxth	r3, r3
 8003516:	3b01      	subs	r3, #1
 8003518:	b29a      	uxth	r2, r3
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800351e:	e02c      	b.n	800357a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	f003 0302 	and.w	r3, r3, #2
 800352a:	2b02      	cmp	r3, #2
 800352c:	d113      	bne.n	8003556 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	330c      	adds	r3, #12
 8003538:	7812      	ldrb	r2, [r2, #0]
 800353a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003540:	1c5a      	adds	r2, r3, #1
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800354a:	b29b      	uxth	r3, r3
 800354c:	3b01      	subs	r3, #1
 800354e:	b29a      	uxth	r2, r3
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	86da      	strh	r2, [r3, #54]	; 0x36
 8003554:	e011      	b.n	800357a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003556:	f7fe ff7b 	bl	8002450 <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	683a      	ldr	r2, [r7, #0]
 8003562:	429a      	cmp	r2, r3
 8003564:	d803      	bhi.n	800356e <HAL_SPI_Transmit+0x204>
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800356c:	d102      	bne.n	8003574 <HAL_SPI_Transmit+0x20a>
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d102      	bne.n	800357a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003574:	2303      	movs	r3, #3
 8003576:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003578:	e026      	b.n	80035c8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800357e:	b29b      	uxth	r3, r3
 8003580:	2b00      	cmp	r3, #0
 8003582:	d1cd      	bne.n	8003520 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003584:	69ba      	ldr	r2, [r7, #24]
 8003586:	6839      	ldr	r1, [r7, #0]
 8003588:	68f8      	ldr	r0, [r7, #12]
 800358a:	f000 f8b3 	bl	80036f4 <SPI_EndRxTxTransaction>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d002      	beq.n	800359a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2220      	movs	r2, #32
 8003598:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d10a      	bne.n	80035b8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80035a2:	2300      	movs	r3, #0
 80035a4:	613b      	str	r3, [r7, #16]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	613b      	str	r3, [r7, #16]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	613b      	str	r3, [r7, #16]
 80035b6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d002      	beq.n	80035c6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	77fb      	strb	r3, [r7, #31]
 80035c4:	e000      	b.n	80035c8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80035c6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80035d8:	7ffb      	ldrb	r3, [r7, #31]
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3720      	adds	r7, #32
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
	...

080035e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b088      	sub	sp, #32
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	603b      	str	r3, [r7, #0]
 80035f0:	4613      	mov	r3, r2
 80035f2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80035f4:	f7fe ff2c 	bl	8002450 <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035fc:	1a9b      	subs	r3, r3, r2
 80035fe:	683a      	ldr	r2, [r7, #0]
 8003600:	4413      	add	r3, r2
 8003602:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003604:	f7fe ff24 	bl	8002450 <HAL_GetTick>
 8003608:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800360a:	4b39      	ldr	r3, [pc, #228]	; (80036f0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	015b      	lsls	r3, r3, #5
 8003610:	0d1b      	lsrs	r3, r3, #20
 8003612:	69fa      	ldr	r2, [r7, #28]
 8003614:	fb02 f303 	mul.w	r3, r2, r3
 8003618:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800361a:	e054      	b.n	80036c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003622:	d050      	beq.n	80036c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003624:	f7fe ff14 	bl	8002450 <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	69bb      	ldr	r3, [r7, #24]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	69fa      	ldr	r2, [r7, #28]
 8003630:	429a      	cmp	r2, r3
 8003632:	d902      	bls.n	800363a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d13d      	bne.n	80036b6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	685a      	ldr	r2, [r3, #4]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003648:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003652:	d111      	bne.n	8003678 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800365c:	d004      	beq.n	8003668 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003666:	d107      	bne.n	8003678 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003676:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800367c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003680:	d10f      	bne.n	80036a2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003690:	601a      	str	r2, [r3, #0]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2201      	movs	r2, #1
 80036a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e017      	b.n	80036e6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d101      	bne.n	80036c0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80036bc:	2300      	movs	r3, #0
 80036be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	3b01      	subs	r3, #1
 80036c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	689a      	ldr	r2, [r3, #8]
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	4013      	ands	r3, r2
 80036d0:	68ba      	ldr	r2, [r7, #8]
 80036d2:	429a      	cmp	r2, r3
 80036d4:	bf0c      	ite	eq
 80036d6:	2301      	moveq	r3, #1
 80036d8:	2300      	movne	r3, #0
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	461a      	mov	r2, r3
 80036de:	79fb      	ldrb	r3, [r7, #7]
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d19b      	bne.n	800361c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80036e4:	2300      	movs	r3, #0
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3720      	adds	r7, #32
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	20000030 	.word	0x20000030

080036f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b088      	sub	sp, #32
 80036f8:	af02      	add	r7, sp, #8
 80036fa:	60f8      	str	r0, [r7, #12]
 80036fc:	60b9      	str	r1, [r7, #8]
 80036fe:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003700:	4b1b      	ldr	r3, [pc, #108]	; (8003770 <SPI_EndRxTxTransaction+0x7c>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a1b      	ldr	r2, [pc, #108]	; (8003774 <SPI_EndRxTxTransaction+0x80>)
 8003706:	fba2 2303 	umull	r2, r3, r2, r3
 800370a:	0d5b      	lsrs	r3, r3, #21
 800370c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003710:	fb02 f303 	mul.w	r3, r2, r3
 8003714:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800371e:	d112      	bne.n	8003746 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	9300      	str	r3, [sp, #0]
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	2200      	movs	r2, #0
 8003728:	2180      	movs	r1, #128	; 0x80
 800372a:	68f8      	ldr	r0, [r7, #12]
 800372c:	f7ff ff5a 	bl	80035e4 <SPI_WaitFlagStateUntilTimeout>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d016      	beq.n	8003764 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800373a:	f043 0220 	orr.w	r2, r3, #32
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e00f      	b.n	8003766 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d00a      	beq.n	8003762 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	3b01      	subs	r3, #1
 8003750:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800375c:	2b80      	cmp	r3, #128	; 0x80
 800375e:	d0f2      	beq.n	8003746 <SPI_EndRxTxTransaction+0x52>
 8003760:	e000      	b.n	8003764 <SPI_EndRxTxTransaction+0x70>
        break;
 8003762:	bf00      	nop
  }

  return HAL_OK;
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3718      	adds	r7, #24
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	20000030 	.word	0x20000030
 8003774:	165e9f81 	.word	0x165e9f81

08003778 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d101      	bne.n	800378a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e041      	b.n	800380e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003790:	b2db      	uxtb	r3, r3
 8003792:	2b00      	cmp	r3, #0
 8003794:	d106      	bne.n	80037a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f7fe fd9e 	bl	80022e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2202      	movs	r2, #2
 80037a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	3304      	adds	r3, #4
 80037b4:	4619      	mov	r1, r3
 80037b6:	4610      	mov	r0, r2
 80037b8:	f000 fa92 	bl	8003ce0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800380c:	2300      	movs	r3, #0
}
 800380e:	4618      	mov	r0, r3
 8003810:	3708      	adds	r7, #8
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
	...

08003818 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003818:	b480      	push	{r7}
 800381a:	b085      	sub	sp, #20
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003826:	b2db      	uxtb	r3, r3
 8003828:	2b01      	cmp	r3, #1
 800382a:	d001      	beq.n	8003830 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e044      	b.n	80038ba <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2202      	movs	r2, #2
 8003834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	68da      	ldr	r2, [r3, #12]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f042 0201 	orr.w	r2, r2, #1
 8003846:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a1e      	ldr	r2, [pc, #120]	; (80038c8 <HAL_TIM_Base_Start_IT+0xb0>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d018      	beq.n	8003884 <HAL_TIM_Base_Start_IT+0x6c>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800385a:	d013      	beq.n	8003884 <HAL_TIM_Base_Start_IT+0x6c>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a1a      	ldr	r2, [pc, #104]	; (80038cc <HAL_TIM_Base_Start_IT+0xb4>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d00e      	beq.n	8003884 <HAL_TIM_Base_Start_IT+0x6c>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a19      	ldr	r2, [pc, #100]	; (80038d0 <HAL_TIM_Base_Start_IT+0xb8>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d009      	beq.n	8003884 <HAL_TIM_Base_Start_IT+0x6c>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a17      	ldr	r2, [pc, #92]	; (80038d4 <HAL_TIM_Base_Start_IT+0xbc>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d004      	beq.n	8003884 <HAL_TIM_Base_Start_IT+0x6c>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a16      	ldr	r2, [pc, #88]	; (80038d8 <HAL_TIM_Base_Start_IT+0xc0>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d111      	bne.n	80038a8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	f003 0307 	and.w	r3, r3, #7
 800388e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2b06      	cmp	r3, #6
 8003894:	d010      	beq.n	80038b8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f042 0201 	orr.w	r2, r2, #1
 80038a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038a6:	e007      	b.n	80038b8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f042 0201 	orr.w	r2, r2, #1
 80038b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038b8:	2300      	movs	r3, #0
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3714      	adds	r7, #20
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	40010000 	.word	0x40010000
 80038cc:	40000400 	.word	0x40000400
 80038d0:	40000800 	.word	0x40000800
 80038d4:	40000c00 	.word	0x40000c00
 80038d8:	40014000 	.word	0x40014000

080038dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b082      	sub	sp, #8
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	691b      	ldr	r3, [r3, #16]
 80038ea:	f003 0302 	and.w	r3, r3, #2
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d122      	bne.n	8003938 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	f003 0302 	and.w	r3, r3, #2
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d11b      	bne.n	8003938 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f06f 0202 	mvn.w	r2, #2
 8003908:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2201      	movs	r2, #1
 800390e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	699b      	ldr	r3, [r3, #24]
 8003916:	f003 0303 	and.w	r3, r3, #3
 800391a:	2b00      	cmp	r3, #0
 800391c:	d003      	beq.n	8003926 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f000 f9bf 	bl	8003ca2 <HAL_TIM_IC_CaptureCallback>
 8003924:	e005      	b.n	8003932 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 f9b1 	bl	8003c8e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f000 f9c2 	bl	8003cb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	691b      	ldr	r3, [r3, #16]
 800393e:	f003 0304 	and.w	r3, r3, #4
 8003942:	2b04      	cmp	r3, #4
 8003944:	d122      	bne.n	800398c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	f003 0304 	and.w	r3, r3, #4
 8003950:	2b04      	cmp	r3, #4
 8003952:	d11b      	bne.n	800398c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f06f 0204 	mvn.w	r2, #4
 800395c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2202      	movs	r2, #2
 8003962:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	699b      	ldr	r3, [r3, #24]
 800396a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800396e:	2b00      	cmp	r3, #0
 8003970:	d003      	beq.n	800397a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f000 f995 	bl	8003ca2 <HAL_TIM_IC_CaptureCallback>
 8003978:	e005      	b.n	8003986 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 f987 	bl	8003c8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f000 f998 	bl	8003cb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	f003 0308 	and.w	r3, r3, #8
 8003996:	2b08      	cmp	r3, #8
 8003998:	d122      	bne.n	80039e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	f003 0308 	and.w	r3, r3, #8
 80039a4:	2b08      	cmp	r3, #8
 80039a6:	d11b      	bne.n	80039e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f06f 0208 	mvn.w	r2, #8
 80039b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2204      	movs	r2, #4
 80039b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	69db      	ldr	r3, [r3, #28]
 80039be:	f003 0303 	and.w	r3, r3, #3
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d003      	beq.n	80039ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f000 f96b 	bl	8003ca2 <HAL_TIM_IC_CaptureCallback>
 80039cc:	e005      	b.n	80039da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f000 f95d 	bl	8003c8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f000 f96e 	bl	8003cb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	f003 0310 	and.w	r3, r3, #16
 80039ea:	2b10      	cmp	r3, #16
 80039ec:	d122      	bne.n	8003a34 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	f003 0310 	and.w	r3, r3, #16
 80039f8:	2b10      	cmp	r3, #16
 80039fa:	d11b      	bne.n	8003a34 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f06f 0210 	mvn.w	r2, #16
 8003a04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2208      	movs	r2, #8
 8003a0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	69db      	ldr	r3, [r3, #28]
 8003a12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d003      	beq.n	8003a22 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f000 f941 	bl	8003ca2 <HAL_TIM_IC_CaptureCallback>
 8003a20:	e005      	b.n	8003a2e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 f933 	bl	8003c8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f000 f944 	bl	8003cb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	f003 0301 	and.w	r3, r3, #1
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d10e      	bne.n	8003a60 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	f003 0301 	and.w	r3, r3, #1
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d107      	bne.n	8003a60 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f06f 0201 	mvn.w	r2, #1
 8003a58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f000 f90d 	bl	8003c7a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	691b      	ldr	r3, [r3, #16]
 8003a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a6a:	2b80      	cmp	r3, #128	; 0x80
 8003a6c:	d10e      	bne.n	8003a8c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a78:	2b80      	cmp	r3, #128	; 0x80
 8003a7a:	d107      	bne.n	8003a8c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f000 fabc 	bl	8004004 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	691b      	ldr	r3, [r3, #16]
 8003a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a96:	2b40      	cmp	r3, #64	; 0x40
 8003a98:	d10e      	bne.n	8003ab8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aa4:	2b40      	cmp	r3, #64	; 0x40
 8003aa6:	d107      	bne.n	8003ab8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ab0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 f909 	bl	8003cca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	f003 0320 	and.w	r3, r3, #32
 8003ac2:	2b20      	cmp	r3, #32
 8003ac4:	d10e      	bne.n	8003ae4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	f003 0320 	and.w	r3, r3, #32
 8003ad0:	2b20      	cmp	r3, #32
 8003ad2:	d107      	bne.n	8003ae4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f06f 0220 	mvn.w	r2, #32
 8003adc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f000 fa86 	bl	8003ff0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ae4:	bf00      	nop
 8003ae6:	3708      	adds	r7, #8
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}

08003aec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003af6:	2300      	movs	r3, #0
 8003af8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d101      	bne.n	8003b08 <HAL_TIM_ConfigClockSource+0x1c>
 8003b04:	2302      	movs	r3, #2
 8003b06:	e0b4      	b.n	8003c72 <HAL_TIM_ConfigClockSource+0x186>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2202      	movs	r2, #2
 8003b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003b26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b2e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	68ba      	ldr	r2, [r7, #8]
 8003b36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b40:	d03e      	beq.n	8003bc0 <HAL_TIM_ConfigClockSource+0xd4>
 8003b42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b46:	f200 8087 	bhi.w	8003c58 <HAL_TIM_ConfigClockSource+0x16c>
 8003b4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b4e:	f000 8086 	beq.w	8003c5e <HAL_TIM_ConfigClockSource+0x172>
 8003b52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b56:	d87f      	bhi.n	8003c58 <HAL_TIM_ConfigClockSource+0x16c>
 8003b58:	2b70      	cmp	r3, #112	; 0x70
 8003b5a:	d01a      	beq.n	8003b92 <HAL_TIM_ConfigClockSource+0xa6>
 8003b5c:	2b70      	cmp	r3, #112	; 0x70
 8003b5e:	d87b      	bhi.n	8003c58 <HAL_TIM_ConfigClockSource+0x16c>
 8003b60:	2b60      	cmp	r3, #96	; 0x60
 8003b62:	d050      	beq.n	8003c06 <HAL_TIM_ConfigClockSource+0x11a>
 8003b64:	2b60      	cmp	r3, #96	; 0x60
 8003b66:	d877      	bhi.n	8003c58 <HAL_TIM_ConfigClockSource+0x16c>
 8003b68:	2b50      	cmp	r3, #80	; 0x50
 8003b6a:	d03c      	beq.n	8003be6 <HAL_TIM_ConfigClockSource+0xfa>
 8003b6c:	2b50      	cmp	r3, #80	; 0x50
 8003b6e:	d873      	bhi.n	8003c58 <HAL_TIM_ConfigClockSource+0x16c>
 8003b70:	2b40      	cmp	r3, #64	; 0x40
 8003b72:	d058      	beq.n	8003c26 <HAL_TIM_ConfigClockSource+0x13a>
 8003b74:	2b40      	cmp	r3, #64	; 0x40
 8003b76:	d86f      	bhi.n	8003c58 <HAL_TIM_ConfigClockSource+0x16c>
 8003b78:	2b30      	cmp	r3, #48	; 0x30
 8003b7a:	d064      	beq.n	8003c46 <HAL_TIM_ConfigClockSource+0x15a>
 8003b7c:	2b30      	cmp	r3, #48	; 0x30
 8003b7e:	d86b      	bhi.n	8003c58 <HAL_TIM_ConfigClockSource+0x16c>
 8003b80:	2b20      	cmp	r3, #32
 8003b82:	d060      	beq.n	8003c46 <HAL_TIM_ConfigClockSource+0x15a>
 8003b84:	2b20      	cmp	r3, #32
 8003b86:	d867      	bhi.n	8003c58 <HAL_TIM_ConfigClockSource+0x16c>
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d05c      	beq.n	8003c46 <HAL_TIM_ConfigClockSource+0x15a>
 8003b8c:	2b10      	cmp	r3, #16
 8003b8e:	d05a      	beq.n	8003c46 <HAL_TIM_ConfigClockSource+0x15a>
 8003b90:	e062      	b.n	8003c58 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6818      	ldr	r0, [r3, #0]
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	6899      	ldr	r1, [r3, #8]
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	685a      	ldr	r2, [r3, #4]
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	f000 f997 	bl	8003ed4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003bb4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	68ba      	ldr	r2, [r7, #8]
 8003bbc:	609a      	str	r2, [r3, #8]
      break;
 8003bbe:	e04f      	b.n	8003c60 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6818      	ldr	r0, [r3, #0]
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	6899      	ldr	r1, [r3, #8]
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	685a      	ldr	r2, [r3, #4]
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	f000 f980 	bl	8003ed4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	689a      	ldr	r2, [r3, #8]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003be2:	609a      	str	r2, [r3, #8]
      break;
 8003be4:	e03c      	b.n	8003c60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6818      	ldr	r0, [r3, #0]
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	6859      	ldr	r1, [r3, #4]
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	f000 f8f4 	bl	8003de0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	2150      	movs	r1, #80	; 0x50
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f000 f94d 	bl	8003e9e <TIM_ITRx_SetConfig>
      break;
 8003c04:	e02c      	b.n	8003c60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6818      	ldr	r0, [r3, #0]
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	6859      	ldr	r1, [r3, #4]
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	68db      	ldr	r3, [r3, #12]
 8003c12:	461a      	mov	r2, r3
 8003c14:	f000 f913 	bl	8003e3e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2160      	movs	r1, #96	; 0x60
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f000 f93d 	bl	8003e9e <TIM_ITRx_SetConfig>
      break;
 8003c24:	e01c      	b.n	8003c60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6818      	ldr	r0, [r3, #0]
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	6859      	ldr	r1, [r3, #4]
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	461a      	mov	r2, r3
 8003c34:	f000 f8d4 	bl	8003de0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	2140      	movs	r1, #64	; 0x40
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f000 f92d 	bl	8003e9e <TIM_ITRx_SetConfig>
      break;
 8003c44:	e00c      	b.n	8003c60 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4619      	mov	r1, r3
 8003c50:	4610      	mov	r0, r2
 8003c52:	f000 f924 	bl	8003e9e <TIM_ITRx_SetConfig>
      break;
 8003c56:	e003      	b.n	8003c60 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	73fb      	strb	r3, [r7, #15]
      break;
 8003c5c:	e000      	b.n	8003c60 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003c5e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3710      	adds	r7, #16
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}

08003c7a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c7a:	b480      	push	{r7}
 8003c7c:	b083      	sub	sp, #12
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003c82:	bf00      	nop
 8003c84:	370c      	adds	r7, #12
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr

08003c8e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c8e:	b480      	push	{r7}
 8003c90:	b083      	sub	sp, #12
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c96:	bf00      	nop
 8003c98:	370c      	adds	r7, #12
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr

08003ca2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ca2:	b480      	push	{r7}
 8003ca4:	b083      	sub	sp, #12
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003caa:	bf00      	nop
 8003cac:	370c      	adds	r7, #12
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr

08003cb6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003cb6:	b480      	push	{r7}
 8003cb8:	b083      	sub	sp, #12
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003cbe:	bf00      	nop
 8003cc0:	370c      	adds	r7, #12
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr

08003cca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003cca:	b480      	push	{r7}
 8003ccc:	b083      	sub	sp, #12
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003cd2:	bf00      	nop
 8003cd4:	370c      	adds	r7, #12
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr
	...

08003ce0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b085      	sub	sp, #20
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	4a34      	ldr	r2, [pc, #208]	; (8003dc4 <TIM_Base_SetConfig+0xe4>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d00f      	beq.n	8003d18 <TIM_Base_SetConfig+0x38>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cfe:	d00b      	beq.n	8003d18 <TIM_Base_SetConfig+0x38>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	4a31      	ldr	r2, [pc, #196]	; (8003dc8 <TIM_Base_SetConfig+0xe8>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d007      	beq.n	8003d18 <TIM_Base_SetConfig+0x38>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	4a30      	ldr	r2, [pc, #192]	; (8003dcc <TIM_Base_SetConfig+0xec>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d003      	beq.n	8003d18 <TIM_Base_SetConfig+0x38>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	4a2f      	ldr	r2, [pc, #188]	; (8003dd0 <TIM_Base_SetConfig+0xf0>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d108      	bne.n	8003d2a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	68fa      	ldr	r2, [r7, #12]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4a25      	ldr	r2, [pc, #148]	; (8003dc4 <TIM_Base_SetConfig+0xe4>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d01b      	beq.n	8003d6a <TIM_Base_SetConfig+0x8a>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d38:	d017      	beq.n	8003d6a <TIM_Base_SetConfig+0x8a>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4a22      	ldr	r2, [pc, #136]	; (8003dc8 <TIM_Base_SetConfig+0xe8>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d013      	beq.n	8003d6a <TIM_Base_SetConfig+0x8a>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4a21      	ldr	r2, [pc, #132]	; (8003dcc <TIM_Base_SetConfig+0xec>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d00f      	beq.n	8003d6a <TIM_Base_SetConfig+0x8a>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4a20      	ldr	r2, [pc, #128]	; (8003dd0 <TIM_Base_SetConfig+0xf0>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d00b      	beq.n	8003d6a <TIM_Base_SetConfig+0x8a>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4a1f      	ldr	r2, [pc, #124]	; (8003dd4 <TIM_Base_SetConfig+0xf4>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d007      	beq.n	8003d6a <TIM_Base_SetConfig+0x8a>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a1e      	ldr	r2, [pc, #120]	; (8003dd8 <TIM_Base_SetConfig+0xf8>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d003      	beq.n	8003d6a <TIM_Base_SetConfig+0x8a>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4a1d      	ldr	r2, [pc, #116]	; (8003ddc <TIM_Base_SetConfig+0xfc>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d108      	bne.n	8003d7c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	68fa      	ldr	r2, [r7, #12]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	695b      	ldr	r3, [r3, #20]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	68fa      	ldr	r2, [r7, #12]
 8003d8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	689a      	ldr	r2, [r3, #8]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	4a08      	ldr	r2, [pc, #32]	; (8003dc4 <TIM_Base_SetConfig+0xe4>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d103      	bne.n	8003db0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	691a      	ldr	r2, [r3, #16]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	615a      	str	r2, [r3, #20]
}
 8003db6:	bf00      	nop
 8003db8:	3714      	adds	r7, #20
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr
 8003dc2:	bf00      	nop
 8003dc4:	40010000 	.word	0x40010000
 8003dc8:	40000400 	.word	0x40000400
 8003dcc:	40000800 	.word	0x40000800
 8003dd0:	40000c00 	.word	0x40000c00
 8003dd4:	40014000 	.word	0x40014000
 8003dd8:	40014400 	.word	0x40014400
 8003ddc:	40014800 	.word	0x40014800

08003de0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b087      	sub	sp, #28
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	60b9      	str	r1, [r7, #8]
 8003dea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6a1b      	ldr	r3, [r3, #32]
 8003df0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6a1b      	ldr	r3, [r3, #32]
 8003df6:	f023 0201 	bic.w	r2, r3, #1
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	699b      	ldr	r3, [r3, #24]
 8003e02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	011b      	lsls	r3, r3, #4
 8003e10:	693a      	ldr	r2, [r7, #16]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	f023 030a 	bic.w	r3, r3, #10
 8003e1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e1e:	697a      	ldr	r2, [r7, #20]
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	693a      	ldr	r2, [r7, #16]
 8003e2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	697a      	ldr	r2, [r7, #20]
 8003e30:	621a      	str	r2, [r3, #32]
}
 8003e32:	bf00      	nop
 8003e34:	371c      	adds	r7, #28
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr

08003e3e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e3e:	b480      	push	{r7}
 8003e40:	b087      	sub	sp, #28
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	60f8      	str	r0, [r7, #12]
 8003e46:	60b9      	str	r1, [r7, #8]
 8003e48:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	6a1b      	ldr	r3, [r3, #32]
 8003e4e:	f023 0210 	bic.w	r2, r3, #16
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	699b      	ldr	r3, [r3, #24]
 8003e5a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6a1b      	ldr	r3, [r3, #32]
 8003e60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e68:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	031b      	lsls	r3, r3, #12
 8003e6e:	697a      	ldr	r2, [r7, #20]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003e7a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	011b      	lsls	r3, r3, #4
 8003e80:	693a      	ldr	r2, [r7, #16]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	697a      	ldr	r2, [r7, #20]
 8003e8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	693a      	ldr	r2, [r7, #16]
 8003e90:	621a      	str	r2, [r3, #32]
}
 8003e92:	bf00      	nop
 8003e94:	371c      	adds	r7, #28
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr

08003e9e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e9e:	b480      	push	{r7}
 8003ea0:	b085      	sub	sp, #20
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
 8003ea6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eb4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003eb6:	683a      	ldr	r2, [r7, #0]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	f043 0307 	orr.w	r3, r3, #7
 8003ec0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	68fa      	ldr	r2, [r7, #12]
 8003ec6:	609a      	str	r2, [r3, #8]
}
 8003ec8:	bf00      	nop
 8003eca:	3714      	adds	r7, #20
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b087      	sub	sp, #28
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	60f8      	str	r0, [r7, #12]
 8003edc:	60b9      	str	r1, [r7, #8]
 8003ede:	607a      	str	r2, [r7, #4]
 8003ee0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003eee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	021a      	lsls	r2, r3, #8
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	431a      	orrs	r2, r3
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	697a      	ldr	r2, [r7, #20]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	697a      	ldr	r2, [r7, #20]
 8003f06:	609a      	str	r2, [r3, #8]
}
 8003f08:	bf00      	nop
 8003f0a:	371c      	adds	r7, #28
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr

08003f14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b085      	sub	sp, #20
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d101      	bne.n	8003f2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f28:	2302      	movs	r3, #2
 8003f2a:	e050      	b.n	8003fce <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2202      	movs	r2, #2
 8003f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68fa      	ldr	r2, [r7, #12]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68fa      	ldr	r2, [r7, #12]
 8003f64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a1c      	ldr	r2, [pc, #112]	; (8003fdc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d018      	beq.n	8003fa2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f78:	d013      	beq.n	8003fa2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a18      	ldr	r2, [pc, #96]	; (8003fe0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d00e      	beq.n	8003fa2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a16      	ldr	r2, [pc, #88]	; (8003fe4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d009      	beq.n	8003fa2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a15      	ldr	r2, [pc, #84]	; (8003fe8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d004      	beq.n	8003fa2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a13      	ldr	r2, [pc, #76]	; (8003fec <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d10c      	bne.n	8003fbc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fa8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	68ba      	ldr	r2, [r7, #8]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	68ba      	ldr	r2, [r7, #8]
 8003fba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003fcc:	2300      	movs	r3, #0
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3714      	adds	r7, #20
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr
 8003fda:	bf00      	nop
 8003fdc:	40010000 	.word	0x40010000
 8003fe0:	40000400 	.word	0x40000400
 8003fe4:	40000800 	.word	0x40000800
 8003fe8:	40000c00 	.word	0x40000c00
 8003fec:	40014000 	.word	0x40014000

08003ff0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ff8:	bf00      	nop
 8003ffa:	370c      	adds	r7, #12
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr

08004004 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800400c:	bf00      	nop
 800400e:	370c      	adds	r7, #12
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr

08004018 <__errno>:
 8004018:	4b01      	ldr	r3, [pc, #4]	; (8004020 <__errno+0x8>)
 800401a:	6818      	ldr	r0, [r3, #0]
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop
 8004020:	2000003c 	.word	0x2000003c

08004024 <__libc_init_array>:
 8004024:	b570      	push	{r4, r5, r6, lr}
 8004026:	4d0d      	ldr	r5, [pc, #52]	; (800405c <__libc_init_array+0x38>)
 8004028:	4c0d      	ldr	r4, [pc, #52]	; (8004060 <__libc_init_array+0x3c>)
 800402a:	1b64      	subs	r4, r4, r5
 800402c:	10a4      	asrs	r4, r4, #2
 800402e:	2600      	movs	r6, #0
 8004030:	42a6      	cmp	r6, r4
 8004032:	d109      	bne.n	8004048 <__libc_init_array+0x24>
 8004034:	4d0b      	ldr	r5, [pc, #44]	; (8004064 <__libc_init_array+0x40>)
 8004036:	4c0c      	ldr	r4, [pc, #48]	; (8004068 <__libc_init_array+0x44>)
 8004038:	f000 fca8 	bl	800498c <_init>
 800403c:	1b64      	subs	r4, r4, r5
 800403e:	10a4      	asrs	r4, r4, #2
 8004040:	2600      	movs	r6, #0
 8004042:	42a6      	cmp	r6, r4
 8004044:	d105      	bne.n	8004052 <__libc_init_array+0x2e>
 8004046:	bd70      	pop	{r4, r5, r6, pc}
 8004048:	f855 3b04 	ldr.w	r3, [r5], #4
 800404c:	4798      	blx	r3
 800404e:	3601      	adds	r6, #1
 8004050:	e7ee      	b.n	8004030 <__libc_init_array+0xc>
 8004052:	f855 3b04 	ldr.w	r3, [r5], #4
 8004056:	4798      	blx	r3
 8004058:	3601      	adds	r6, #1
 800405a:	e7f2      	b.n	8004042 <__libc_init_array+0x1e>
 800405c:	08007664 	.word	0x08007664
 8004060:	08007664 	.word	0x08007664
 8004064:	08007664 	.word	0x08007664
 8004068:	08007668 	.word	0x08007668

0800406c <memcpy>:
 800406c:	440a      	add	r2, r1
 800406e:	4291      	cmp	r1, r2
 8004070:	f100 33ff 	add.w	r3, r0, #4294967295
 8004074:	d100      	bne.n	8004078 <memcpy+0xc>
 8004076:	4770      	bx	lr
 8004078:	b510      	push	{r4, lr}
 800407a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800407e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004082:	4291      	cmp	r1, r2
 8004084:	d1f9      	bne.n	800407a <memcpy+0xe>
 8004086:	bd10      	pop	{r4, pc}

08004088 <memset>:
 8004088:	4402      	add	r2, r0
 800408a:	4603      	mov	r3, r0
 800408c:	4293      	cmp	r3, r2
 800408e:	d100      	bne.n	8004092 <memset+0xa>
 8004090:	4770      	bx	lr
 8004092:	f803 1b01 	strb.w	r1, [r3], #1
 8004096:	e7f9      	b.n	800408c <memset+0x4>

08004098 <_vsniprintf_r>:
 8004098:	b530      	push	{r4, r5, lr}
 800409a:	4614      	mov	r4, r2
 800409c:	2c00      	cmp	r4, #0
 800409e:	b09b      	sub	sp, #108	; 0x6c
 80040a0:	4605      	mov	r5, r0
 80040a2:	461a      	mov	r2, r3
 80040a4:	da05      	bge.n	80040b2 <_vsniprintf_r+0x1a>
 80040a6:	238b      	movs	r3, #139	; 0x8b
 80040a8:	6003      	str	r3, [r0, #0]
 80040aa:	f04f 30ff 	mov.w	r0, #4294967295
 80040ae:	b01b      	add	sp, #108	; 0x6c
 80040b0:	bd30      	pop	{r4, r5, pc}
 80040b2:	f44f 7302 	mov.w	r3, #520	; 0x208
 80040b6:	f8ad 300c 	strh.w	r3, [sp, #12]
 80040ba:	bf14      	ite	ne
 80040bc:	f104 33ff 	addne.w	r3, r4, #4294967295
 80040c0:	4623      	moveq	r3, r4
 80040c2:	9302      	str	r3, [sp, #8]
 80040c4:	9305      	str	r3, [sp, #20]
 80040c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80040ca:	9100      	str	r1, [sp, #0]
 80040cc:	9104      	str	r1, [sp, #16]
 80040ce:	f8ad 300e 	strh.w	r3, [sp, #14]
 80040d2:	4669      	mov	r1, sp
 80040d4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80040d6:	f000 f90b 	bl	80042f0 <_svfiprintf_r>
 80040da:	1c43      	adds	r3, r0, #1
 80040dc:	bfbc      	itt	lt
 80040de:	238b      	movlt	r3, #139	; 0x8b
 80040e0:	602b      	strlt	r3, [r5, #0]
 80040e2:	2c00      	cmp	r4, #0
 80040e4:	d0e3      	beq.n	80040ae <_vsniprintf_r+0x16>
 80040e6:	9b00      	ldr	r3, [sp, #0]
 80040e8:	2200      	movs	r2, #0
 80040ea:	701a      	strb	r2, [r3, #0]
 80040ec:	e7df      	b.n	80040ae <_vsniprintf_r+0x16>
	...

080040f0 <vsniprintf>:
 80040f0:	b507      	push	{r0, r1, r2, lr}
 80040f2:	9300      	str	r3, [sp, #0]
 80040f4:	4613      	mov	r3, r2
 80040f6:	460a      	mov	r2, r1
 80040f8:	4601      	mov	r1, r0
 80040fa:	4803      	ldr	r0, [pc, #12]	; (8004108 <vsniprintf+0x18>)
 80040fc:	6800      	ldr	r0, [r0, #0]
 80040fe:	f7ff ffcb 	bl	8004098 <_vsniprintf_r>
 8004102:	b003      	add	sp, #12
 8004104:	f85d fb04 	ldr.w	pc, [sp], #4
 8004108:	2000003c 	.word	0x2000003c

0800410c <__retarget_lock_acquire_recursive>:
 800410c:	4770      	bx	lr

0800410e <__retarget_lock_release_recursive>:
 800410e:	4770      	bx	lr

08004110 <sbrk_aligned>:
 8004110:	b570      	push	{r4, r5, r6, lr}
 8004112:	4e0e      	ldr	r6, [pc, #56]	; (800414c <sbrk_aligned+0x3c>)
 8004114:	460c      	mov	r4, r1
 8004116:	6831      	ldr	r1, [r6, #0]
 8004118:	4605      	mov	r5, r0
 800411a:	b911      	cbnz	r1, 8004122 <sbrk_aligned+0x12>
 800411c:	f000 fb7c 	bl	8004818 <_sbrk_r>
 8004120:	6030      	str	r0, [r6, #0]
 8004122:	4621      	mov	r1, r4
 8004124:	4628      	mov	r0, r5
 8004126:	f000 fb77 	bl	8004818 <_sbrk_r>
 800412a:	1c43      	adds	r3, r0, #1
 800412c:	d00a      	beq.n	8004144 <sbrk_aligned+0x34>
 800412e:	1cc4      	adds	r4, r0, #3
 8004130:	f024 0403 	bic.w	r4, r4, #3
 8004134:	42a0      	cmp	r0, r4
 8004136:	d007      	beq.n	8004148 <sbrk_aligned+0x38>
 8004138:	1a21      	subs	r1, r4, r0
 800413a:	4628      	mov	r0, r5
 800413c:	f000 fb6c 	bl	8004818 <_sbrk_r>
 8004140:	3001      	adds	r0, #1
 8004142:	d101      	bne.n	8004148 <sbrk_aligned+0x38>
 8004144:	f04f 34ff 	mov.w	r4, #4294967295
 8004148:	4620      	mov	r0, r4
 800414a:	bd70      	pop	{r4, r5, r6, pc}
 800414c:	20000294 	.word	0x20000294

08004150 <_malloc_r>:
 8004150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004154:	1ccd      	adds	r5, r1, #3
 8004156:	f025 0503 	bic.w	r5, r5, #3
 800415a:	3508      	adds	r5, #8
 800415c:	2d0c      	cmp	r5, #12
 800415e:	bf38      	it	cc
 8004160:	250c      	movcc	r5, #12
 8004162:	2d00      	cmp	r5, #0
 8004164:	4607      	mov	r7, r0
 8004166:	db01      	blt.n	800416c <_malloc_r+0x1c>
 8004168:	42a9      	cmp	r1, r5
 800416a:	d905      	bls.n	8004178 <_malloc_r+0x28>
 800416c:	230c      	movs	r3, #12
 800416e:	603b      	str	r3, [r7, #0]
 8004170:	2600      	movs	r6, #0
 8004172:	4630      	mov	r0, r6
 8004174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004178:	4e2e      	ldr	r6, [pc, #184]	; (8004234 <_malloc_r+0xe4>)
 800417a:	f000 fb77 	bl	800486c <__malloc_lock>
 800417e:	6833      	ldr	r3, [r6, #0]
 8004180:	461c      	mov	r4, r3
 8004182:	bb34      	cbnz	r4, 80041d2 <_malloc_r+0x82>
 8004184:	4629      	mov	r1, r5
 8004186:	4638      	mov	r0, r7
 8004188:	f7ff ffc2 	bl	8004110 <sbrk_aligned>
 800418c:	1c43      	adds	r3, r0, #1
 800418e:	4604      	mov	r4, r0
 8004190:	d14d      	bne.n	800422e <_malloc_r+0xde>
 8004192:	6834      	ldr	r4, [r6, #0]
 8004194:	4626      	mov	r6, r4
 8004196:	2e00      	cmp	r6, #0
 8004198:	d140      	bne.n	800421c <_malloc_r+0xcc>
 800419a:	6823      	ldr	r3, [r4, #0]
 800419c:	4631      	mov	r1, r6
 800419e:	4638      	mov	r0, r7
 80041a0:	eb04 0803 	add.w	r8, r4, r3
 80041a4:	f000 fb38 	bl	8004818 <_sbrk_r>
 80041a8:	4580      	cmp	r8, r0
 80041aa:	d13a      	bne.n	8004222 <_malloc_r+0xd2>
 80041ac:	6821      	ldr	r1, [r4, #0]
 80041ae:	3503      	adds	r5, #3
 80041b0:	1a6d      	subs	r5, r5, r1
 80041b2:	f025 0503 	bic.w	r5, r5, #3
 80041b6:	3508      	adds	r5, #8
 80041b8:	2d0c      	cmp	r5, #12
 80041ba:	bf38      	it	cc
 80041bc:	250c      	movcc	r5, #12
 80041be:	4629      	mov	r1, r5
 80041c0:	4638      	mov	r0, r7
 80041c2:	f7ff ffa5 	bl	8004110 <sbrk_aligned>
 80041c6:	3001      	adds	r0, #1
 80041c8:	d02b      	beq.n	8004222 <_malloc_r+0xd2>
 80041ca:	6823      	ldr	r3, [r4, #0]
 80041cc:	442b      	add	r3, r5
 80041ce:	6023      	str	r3, [r4, #0]
 80041d0:	e00e      	b.n	80041f0 <_malloc_r+0xa0>
 80041d2:	6822      	ldr	r2, [r4, #0]
 80041d4:	1b52      	subs	r2, r2, r5
 80041d6:	d41e      	bmi.n	8004216 <_malloc_r+0xc6>
 80041d8:	2a0b      	cmp	r2, #11
 80041da:	d916      	bls.n	800420a <_malloc_r+0xba>
 80041dc:	1961      	adds	r1, r4, r5
 80041de:	42a3      	cmp	r3, r4
 80041e0:	6025      	str	r5, [r4, #0]
 80041e2:	bf18      	it	ne
 80041e4:	6059      	strne	r1, [r3, #4]
 80041e6:	6863      	ldr	r3, [r4, #4]
 80041e8:	bf08      	it	eq
 80041ea:	6031      	streq	r1, [r6, #0]
 80041ec:	5162      	str	r2, [r4, r5]
 80041ee:	604b      	str	r3, [r1, #4]
 80041f0:	4638      	mov	r0, r7
 80041f2:	f104 060b 	add.w	r6, r4, #11
 80041f6:	f000 fb3f 	bl	8004878 <__malloc_unlock>
 80041fa:	f026 0607 	bic.w	r6, r6, #7
 80041fe:	1d23      	adds	r3, r4, #4
 8004200:	1af2      	subs	r2, r6, r3
 8004202:	d0b6      	beq.n	8004172 <_malloc_r+0x22>
 8004204:	1b9b      	subs	r3, r3, r6
 8004206:	50a3      	str	r3, [r4, r2]
 8004208:	e7b3      	b.n	8004172 <_malloc_r+0x22>
 800420a:	6862      	ldr	r2, [r4, #4]
 800420c:	42a3      	cmp	r3, r4
 800420e:	bf0c      	ite	eq
 8004210:	6032      	streq	r2, [r6, #0]
 8004212:	605a      	strne	r2, [r3, #4]
 8004214:	e7ec      	b.n	80041f0 <_malloc_r+0xa0>
 8004216:	4623      	mov	r3, r4
 8004218:	6864      	ldr	r4, [r4, #4]
 800421a:	e7b2      	b.n	8004182 <_malloc_r+0x32>
 800421c:	4634      	mov	r4, r6
 800421e:	6876      	ldr	r6, [r6, #4]
 8004220:	e7b9      	b.n	8004196 <_malloc_r+0x46>
 8004222:	230c      	movs	r3, #12
 8004224:	603b      	str	r3, [r7, #0]
 8004226:	4638      	mov	r0, r7
 8004228:	f000 fb26 	bl	8004878 <__malloc_unlock>
 800422c:	e7a1      	b.n	8004172 <_malloc_r+0x22>
 800422e:	6025      	str	r5, [r4, #0]
 8004230:	e7de      	b.n	80041f0 <_malloc_r+0xa0>
 8004232:	bf00      	nop
 8004234:	20000290 	.word	0x20000290

08004238 <__ssputs_r>:
 8004238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800423c:	688e      	ldr	r6, [r1, #8]
 800423e:	429e      	cmp	r6, r3
 8004240:	4682      	mov	sl, r0
 8004242:	460c      	mov	r4, r1
 8004244:	4690      	mov	r8, r2
 8004246:	461f      	mov	r7, r3
 8004248:	d838      	bhi.n	80042bc <__ssputs_r+0x84>
 800424a:	898a      	ldrh	r2, [r1, #12]
 800424c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004250:	d032      	beq.n	80042b8 <__ssputs_r+0x80>
 8004252:	6825      	ldr	r5, [r4, #0]
 8004254:	6909      	ldr	r1, [r1, #16]
 8004256:	eba5 0901 	sub.w	r9, r5, r1
 800425a:	6965      	ldr	r5, [r4, #20]
 800425c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004260:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004264:	3301      	adds	r3, #1
 8004266:	444b      	add	r3, r9
 8004268:	106d      	asrs	r5, r5, #1
 800426a:	429d      	cmp	r5, r3
 800426c:	bf38      	it	cc
 800426e:	461d      	movcc	r5, r3
 8004270:	0553      	lsls	r3, r2, #21
 8004272:	d531      	bpl.n	80042d8 <__ssputs_r+0xa0>
 8004274:	4629      	mov	r1, r5
 8004276:	f7ff ff6b 	bl	8004150 <_malloc_r>
 800427a:	4606      	mov	r6, r0
 800427c:	b950      	cbnz	r0, 8004294 <__ssputs_r+0x5c>
 800427e:	230c      	movs	r3, #12
 8004280:	f8ca 3000 	str.w	r3, [sl]
 8004284:	89a3      	ldrh	r3, [r4, #12]
 8004286:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800428a:	81a3      	strh	r3, [r4, #12]
 800428c:	f04f 30ff 	mov.w	r0, #4294967295
 8004290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004294:	6921      	ldr	r1, [r4, #16]
 8004296:	464a      	mov	r2, r9
 8004298:	f7ff fee8 	bl	800406c <memcpy>
 800429c:	89a3      	ldrh	r3, [r4, #12]
 800429e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80042a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042a6:	81a3      	strh	r3, [r4, #12]
 80042a8:	6126      	str	r6, [r4, #16]
 80042aa:	6165      	str	r5, [r4, #20]
 80042ac:	444e      	add	r6, r9
 80042ae:	eba5 0509 	sub.w	r5, r5, r9
 80042b2:	6026      	str	r6, [r4, #0]
 80042b4:	60a5      	str	r5, [r4, #8]
 80042b6:	463e      	mov	r6, r7
 80042b8:	42be      	cmp	r6, r7
 80042ba:	d900      	bls.n	80042be <__ssputs_r+0x86>
 80042bc:	463e      	mov	r6, r7
 80042be:	6820      	ldr	r0, [r4, #0]
 80042c0:	4632      	mov	r2, r6
 80042c2:	4641      	mov	r1, r8
 80042c4:	f000 fab8 	bl	8004838 <memmove>
 80042c8:	68a3      	ldr	r3, [r4, #8]
 80042ca:	1b9b      	subs	r3, r3, r6
 80042cc:	60a3      	str	r3, [r4, #8]
 80042ce:	6823      	ldr	r3, [r4, #0]
 80042d0:	4433      	add	r3, r6
 80042d2:	6023      	str	r3, [r4, #0]
 80042d4:	2000      	movs	r0, #0
 80042d6:	e7db      	b.n	8004290 <__ssputs_r+0x58>
 80042d8:	462a      	mov	r2, r5
 80042da:	f000 fb1f 	bl	800491c <_realloc_r>
 80042de:	4606      	mov	r6, r0
 80042e0:	2800      	cmp	r0, #0
 80042e2:	d1e1      	bne.n	80042a8 <__ssputs_r+0x70>
 80042e4:	6921      	ldr	r1, [r4, #16]
 80042e6:	4650      	mov	r0, sl
 80042e8:	f000 facc 	bl	8004884 <_free_r>
 80042ec:	e7c7      	b.n	800427e <__ssputs_r+0x46>
	...

080042f0 <_svfiprintf_r>:
 80042f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042f4:	4698      	mov	r8, r3
 80042f6:	898b      	ldrh	r3, [r1, #12]
 80042f8:	061b      	lsls	r3, r3, #24
 80042fa:	b09d      	sub	sp, #116	; 0x74
 80042fc:	4607      	mov	r7, r0
 80042fe:	460d      	mov	r5, r1
 8004300:	4614      	mov	r4, r2
 8004302:	d50e      	bpl.n	8004322 <_svfiprintf_r+0x32>
 8004304:	690b      	ldr	r3, [r1, #16]
 8004306:	b963      	cbnz	r3, 8004322 <_svfiprintf_r+0x32>
 8004308:	2140      	movs	r1, #64	; 0x40
 800430a:	f7ff ff21 	bl	8004150 <_malloc_r>
 800430e:	6028      	str	r0, [r5, #0]
 8004310:	6128      	str	r0, [r5, #16]
 8004312:	b920      	cbnz	r0, 800431e <_svfiprintf_r+0x2e>
 8004314:	230c      	movs	r3, #12
 8004316:	603b      	str	r3, [r7, #0]
 8004318:	f04f 30ff 	mov.w	r0, #4294967295
 800431c:	e0d1      	b.n	80044c2 <_svfiprintf_r+0x1d2>
 800431e:	2340      	movs	r3, #64	; 0x40
 8004320:	616b      	str	r3, [r5, #20]
 8004322:	2300      	movs	r3, #0
 8004324:	9309      	str	r3, [sp, #36]	; 0x24
 8004326:	2320      	movs	r3, #32
 8004328:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800432c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004330:	2330      	movs	r3, #48	; 0x30
 8004332:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80044dc <_svfiprintf_r+0x1ec>
 8004336:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800433a:	f04f 0901 	mov.w	r9, #1
 800433e:	4623      	mov	r3, r4
 8004340:	469a      	mov	sl, r3
 8004342:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004346:	b10a      	cbz	r2, 800434c <_svfiprintf_r+0x5c>
 8004348:	2a25      	cmp	r2, #37	; 0x25
 800434a:	d1f9      	bne.n	8004340 <_svfiprintf_r+0x50>
 800434c:	ebba 0b04 	subs.w	fp, sl, r4
 8004350:	d00b      	beq.n	800436a <_svfiprintf_r+0x7a>
 8004352:	465b      	mov	r3, fp
 8004354:	4622      	mov	r2, r4
 8004356:	4629      	mov	r1, r5
 8004358:	4638      	mov	r0, r7
 800435a:	f7ff ff6d 	bl	8004238 <__ssputs_r>
 800435e:	3001      	adds	r0, #1
 8004360:	f000 80aa 	beq.w	80044b8 <_svfiprintf_r+0x1c8>
 8004364:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004366:	445a      	add	r2, fp
 8004368:	9209      	str	r2, [sp, #36]	; 0x24
 800436a:	f89a 3000 	ldrb.w	r3, [sl]
 800436e:	2b00      	cmp	r3, #0
 8004370:	f000 80a2 	beq.w	80044b8 <_svfiprintf_r+0x1c8>
 8004374:	2300      	movs	r3, #0
 8004376:	f04f 32ff 	mov.w	r2, #4294967295
 800437a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800437e:	f10a 0a01 	add.w	sl, sl, #1
 8004382:	9304      	str	r3, [sp, #16]
 8004384:	9307      	str	r3, [sp, #28]
 8004386:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800438a:	931a      	str	r3, [sp, #104]	; 0x68
 800438c:	4654      	mov	r4, sl
 800438e:	2205      	movs	r2, #5
 8004390:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004394:	4851      	ldr	r0, [pc, #324]	; (80044dc <_svfiprintf_r+0x1ec>)
 8004396:	f7fb ff2b 	bl	80001f0 <memchr>
 800439a:	9a04      	ldr	r2, [sp, #16]
 800439c:	b9d8      	cbnz	r0, 80043d6 <_svfiprintf_r+0xe6>
 800439e:	06d0      	lsls	r0, r2, #27
 80043a0:	bf44      	itt	mi
 80043a2:	2320      	movmi	r3, #32
 80043a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80043a8:	0711      	lsls	r1, r2, #28
 80043aa:	bf44      	itt	mi
 80043ac:	232b      	movmi	r3, #43	; 0x2b
 80043ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80043b2:	f89a 3000 	ldrb.w	r3, [sl]
 80043b6:	2b2a      	cmp	r3, #42	; 0x2a
 80043b8:	d015      	beq.n	80043e6 <_svfiprintf_r+0xf6>
 80043ba:	9a07      	ldr	r2, [sp, #28]
 80043bc:	4654      	mov	r4, sl
 80043be:	2000      	movs	r0, #0
 80043c0:	f04f 0c0a 	mov.w	ip, #10
 80043c4:	4621      	mov	r1, r4
 80043c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80043ca:	3b30      	subs	r3, #48	; 0x30
 80043cc:	2b09      	cmp	r3, #9
 80043ce:	d94e      	bls.n	800446e <_svfiprintf_r+0x17e>
 80043d0:	b1b0      	cbz	r0, 8004400 <_svfiprintf_r+0x110>
 80043d2:	9207      	str	r2, [sp, #28]
 80043d4:	e014      	b.n	8004400 <_svfiprintf_r+0x110>
 80043d6:	eba0 0308 	sub.w	r3, r0, r8
 80043da:	fa09 f303 	lsl.w	r3, r9, r3
 80043de:	4313      	orrs	r3, r2
 80043e0:	9304      	str	r3, [sp, #16]
 80043e2:	46a2      	mov	sl, r4
 80043e4:	e7d2      	b.n	800438c <_svfiprintf_r+0x9c>
 80043e6:	9b03      	ldr	r3, [sp, #12]
 80043e8:	1d19      	adds	r1, r3, #4
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	9103      	str	r1, [sp, #12]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	bfbb      	ittet	lt
 80043f2:	425b      	neglt	r3, r3
 80043f4:	f042 0202 	orrlt.w	r2, r2, #2
 80043f8:	9307      	strge	r3, [sp, #28]
 80043fa:	9307      	strlt	r3, [sp, #28]
 80043fc:	bfb8      	it	lt
 80043fe:	9204      	strlt	r2, [sp, #16]
 8004400:	7823      	ldrb	r3, [r4, #0]
 8004402:	2b2e      	cmp	r3, #46	; 0x2e
 8004404:	d10c      	bne.n	8004420 <_svfiprintf_r+0x130>
 8004406:	7863      	ldrb	r3, [r4, #1]
 8004408:	2b2a      	cmp	r3, #42	; 0x2a
 800440a:	d135      	bne.n	8004478 <_svfiprintf_r+0x188>
 800440c:	9b03      	ldr	r3, [sp, #12]
 800440e:	1d1a      	adds	r2, r3, #4
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	9203      	str	r2, [sp, #12]
 8004414:	2b00      	cmp	r3, #0
 8004416:	bfb8      	it	lt
 8004418:	f04f 33ff 	movlt.w	r3, #4294967295
 800441c:	3402      	adds	r4, #2
 800441e:	9305      	str	r3, [sp, #20]
 8004420:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80044ec <_svfiprintf_r+0x1fc>
 8004424:	7821      	ldrb	r1, [r4, #0]
 8004426:	2203      	movs	r2, #3
 8004428:	4650      	mov	r0, sl
 800442a:	f7fb fee1 	bl	80001f0 <memchr>
 800442e:	b140      	cbz	r0, 8004442 <_svfiprintf_r+0x152>
 8004430:	2340      	movs	r3, #64	; 0x40
 8004432:	eba0 000a 	sub.w	r0, r0, sl
 8004436:	fa03 f000 	lsl.w	r0, r3, r0
 800443a:	9b04      	ldr	r3, [sp, #16]
 800443c:	4303      	orrs	r3, r0
 800443e:	3401      	adds	r4, #1
 8004440:	9304      	str	r3, [sp, #16]
 8004442:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004446:	4826      	ldr	r0, [pc, #152]	; (80044e0 <_svfiprintf_r+0x1f0>)
 8004448:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800444c:	2206      	movs	r2, #6
 800444e:	f7fb fecf 	bl	80001f0 <memchr>
 8004452:	2800      	cmp	r0, #0
 8004454:	d038      	beq.n	80044c8 <_svfiprintf_r+0x1d8>
 8004456:	4b23      	ldr	r3, [pc, #140]	; (80044e4 <_svfiprintf_r+0x1f4>)
 8004458:	bb1b      	cbnz	r3, 80044a2 <_svfiprintf_r+0x1b2>
 800445a:	9b03      	ldr	r3, [sp, #12]
 800445c:	3307      	adds	r3, #7
 800445e:	f023 0307 	bic.w	r3, r3, #7
 8004462:	3308      	adds	r3, #8
 8004464:	9303      	str	r3, [sp, #12]
 8004466:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004468:	4433      	add	r3, r6
 800446a:	9309      	str	r3, [sp, #36]	; 0x24
 800446c:	e767      	b.n	800433e <_svfiprintf_r+0x4e>
 800446e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004472:	460c      	mov	r4, r1
 8004474:	2001      	movs	r0, #1
 8004476:	e7a5      	b.n	80043c4 <_svfiprintf_r+0xd4>
 8004478:	2300      	movs	r3, #0
 800447a:	3401      	adds	r4, #1
 800447c:	9305      	str	r3, [sp, #20]
 800447e:	4619      	mov	r1, r3
 8004480:	f04f 0c0a 	mov.w	ip, #10
 8004484:	4620      	mov	r0, r4
 8004486:	f810 2b01 	ldrb.w	r2, [r0], #1
 800448a:	3a30      	subs	r2, #48	; 0x30
 800448c:	2a09      	cmp	r2, #9
 800448e:	d903      	bls.n	8004498 <_svfiprintf_r+0x1a8>
 8004490:	2b00      	cmp	r3, #0
 8004492:	d0c5      	beq.n	8004420 <_svfiprintf_r+0x130>
 8004494:	9105      	str	r1, [sp, #20]
 8004496:	e7c3      	b.n	8004420 <_svfiprintf_r+0x130>
 8004498:	fb0c 2101 	mla	r1, ip, r1, r2
 800449c:	4604      	mov	r4, r0
 800449e:	2301      	movs	r3, #1
 80044a0:	e7f0      	b.n	8004484 <_svfiprintf_r+0x194>
 80044a2:	ab03      	add	r3, sp, #12
 80044a4:	9300      	str	r3, [sp, #0]
 80044a6:	462a      	mov	r2, r5
 80044a8:	4b0f      	ldr	r3, [pc, #60]	; (80044e8 <_svfiprintf_r+0x1f8>)
 80044aa:	a904      	add	r1, sp, #16
 80044ac:	4638      	mov	r0, r7
 80044ae:	f3af 8000 	nop.w
 80044b2:	1c42      	adds	r2, r0, #1
 80044b4:	4606      	mov	r6, r0
 80044b6:	d1d6      	bne.n	8004466 <_svfiprintf_r+0x176>
 80044b8:	89ab      	ldrh	r3, [r5, #12]
 80044ba:	065b      	lsls	r3, r3, #25
 80044bc:	f53f af2c 	bmi.w	8004318 <_svfiprintf_r+0x28>
 80044c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80044c2:	b01d      	add	sp, #116	; 0x74
 80044c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044c8:	ab03      	add	r3, sp, #12
 80044ca:	9300      	str	r3, [sp, #0]
 80044cc:	462a      	mov	r2, r5
 80044ce:	4b06      	ldr	r3, [pc, #24]	; (80044e8 <_svfiprintf_r+0x1f8>)
 80044d0:	a904      	add	r1, sp, #16
 80044d2:	4638      	mov	r0, r7
 80044d4:	f000 f87a 	bl	80045cc <_printf_i>
 80044d8:	e7eb      	b.n	80044b2 <_svfiprintf_r+0x1c2>
 80044da:	bf00      	nop
 80044dc:	08007628 	.word	0x08007628
 80044e0:	08007632 	.word	0x08007632
 80044e4:	00000000 	.word	0x00000000
 80044e8:	08004239 	.word	0x08004239
 80044ec:	0800762e 	.word	0x0800762e

080044f0 <_printf_common>:
 80044f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044f4:	4616      	mov	r6, r2
 80044f6:	4699      	mov	r9, r3
 80044f8:	688a      	ldr	r2, [r1, #8]
 80044fa:	690b      	ldr	r3, [r1, #16]
 80044fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004500:	4293      	cmp	r3, r2
 8004502:	bfb8      	it	lt
 8004504:	4613      	movlt	r3, r2
 8004506:	6033      	str	r3, [r6, #0]
 8004508:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800450c:	4607      	mov	r7, r0
 800450e:	460c      	mov	r4, r1
 8004510:	b10a      	cbz	r2, 8004516 <_printf_common+0x26>
 8004512:	3301      	adds	r3, #1
 8004514:	6033      	str	r3, [r6, #0]
 8004516:	6823      	ldr	r3, [r4, #0]
 8004518:	0699      	lsls	r1, r3, #26
 800451a:	bf42      	ittt	mi
 800451c:	6833      	ldrmi	r3, [r6, #0]
 800451e:	3302      	addmi	r3, #2
 8004520:	6033      	strmi	r3, [r6, #0]
 8004522:	6825      	ldr	r5, [r4, #0]
 8004524:	f015 0506 	ands.w	r5, r5, #6
 8004528:	d106      	bne.n	8004538 <_printf_common+0x48>
 800452a:	f104 0a19 	add.w	sl, r4, #25
 800452e:	68e3      	ldr	r3, [r4, #12]
 8004530:	6832      	ldr	r2, [r6, #0]
 8004532:	1a9b      	subs	r3, r3, r2
 8004534:	42ab      	cmp	r3, r5
 8004536:	dc26      	bgt.n	8004586 <_printf_common+0x96>
 8004538:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800453c:	1e13      	subs	r3, r2, #0
 800453e:	6822      	ldr	r2, [r4, #0]
 8004540:	bf18      	it	ne
 8004542:	2301      	movne	r3, #1
 8004544:	0692      	lsls	r2, r2, #26
 8004546:	d42b      	bmi.n	80045a0 <_printf_common+0xb0>
 8004548:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800454c:	4649      	mov	r1, r9
 800454e:	4638      	mov	r0, r7
 8004550:	47c0      	blx	r8
 8004552:	3001      	adds	r0, #1
 8004554:	d01e      	beq.n	8004594 <_printf_common+0xa4>
 8004556:	6823      	ldr	r3, [r4, #0]
 8004558:	68e5      	ldr	r5, [r4, #12]
 800455a:	6832      	ldr	r2, [r6, #0]
 800455c:	f003 0306 	and.w	r3, r3, #6
 8004560:	2b04      	cmp	r3, #4
 8004562:	bf08      	it	eq
 8004564:	1aad      	subeq	r5, r5, r2
 8004566:	68a3      	ldr	r3, [r4, #8]
 8004568:	6922      	ldr	r2, [r4, #16]
 800456a:	bf0c      	ite	eq
 800456c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004570:	2500      	movne	r5, #0
 8004572:	4293      	cmp	r3, r2
 8004574:	bfc4      	itt	gt
 8004576:	1a9b      	subgt	r3, r3, r2
 8004578:	18ed      	addgt	r5, r5, r3
 800457a:	2600      	movs	r6, #0
 800457c:	341a      	adds	r4, #26
 800457e:	42b5      	cmp	r5, r6
 8004580:	d11a      	bne.n	80045b8 <_printf_common+0xc8>
 8004582:	2000      	movs	r0, #0
 8004584:	e008      	b.n	8004598 <_printf_common+0xa8>
 8004586:	2301      	movs	r3, #1
 8004588:	4652      	mov	r2, sl
 800458a:	4649      	mov	r1, r9
 800458c:	4638      	mov	r0, r7
 800458e:	47c0      	blx	r8
 8004590:	3001      	adds	r0, #1
 8004592:	d103      	bne.n	800459c <_printf_common+0xac>
 8004594:	f04f 30ff 	mov.w	r0, #4294967295
 8004598:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800459c:	3501      	adds	r5, #1
 800459e:	e7c6      	b.n	800452e <_printf_common+0x3e>
 80045a0:	18e1      	adds	r1, r4, r3
 80045a2:	1c5a      	adds	r2, r3, #1
 80045a4:	2030      	movs	r0, #48	; 0x30
 80045a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80045aa:	4422      	add	r2, r4
 80045ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80045b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80045b4:	3302      	adds	r3, #2
 80045b6:	e7c7      	b.n	8004548 <_printf_common+0x58>
 80045b8:	2301      	movs	r3, #1
 80045ba:	4622      	mov	r2, r4
 80045bc:	4649      	mov	r1, r9
 80045be:	4638      	mov	r0, r7
 80045c0:	47c0      	blx	r8
 80045c2:	3001      	adds	r0, #1
 80045c4:	d0e6      	beq.n	8004594 <_printf_common+0xa4>
 80045c6:	3601      	adds	r6, #1
 80045c8:	e7d9      	b.n	800457e <_printf_common+0x8e>
	...

080045cc <_printf_i>:
 80045cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80045d0:	7e0f      	ldrb	r7, [r1, #24]
 80045d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80045d4:	2f78      	cmp	r7, #120	; 0x78
 80045d6:	4691      	mov	r9, r2
 80045d8:	4680      	mov	r8, r0
 80045da:	460c      	mov	r4, r1
 80045dc:	469a      	mov	sl, r3
 80045de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80045e2:	d807      	bhi.n	80045f4 <_printf_i+0x28>
 80045e4:	2f62      	cmp	r7, #98	; 0x62
 80045e6:	d80a      	bhi.n	80045fe <_printf_i+0x32>
 80045e8:	2f00      	cmp	r7, #0
 80045ea:	f000 80d8 	beq.w	800479e <_printf_i+0x1d2>
 80045ee:	2f58      	cmp	r7, #88	; 0x58
 80045f0:	f000 80a3 	beq.w	800473a <_printf_i+0x16e>
 80045f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80045f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80045fc:	e03a      	b.n	8004674 <_printf_i+0xa8>
 80045fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004602:	2b15      	cmp	r3, #21
 8004604:	d8f6      	bhi.n	80045f4 <_printf_i+0x28>
 8004606:	a101      	add	r1, pc, #4	; (adr r1, 800460c <_printf_i+0x40>)
 8004608:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800460c:	08004665 	.word	0x08004665
 8004610:	08004679 	.word	0x08004679
 8004614:	080045f5 	.word	0x080045f5
 8004618:	080045f5 	.word	0x080045f5
 800461c:	080045f5 	.word	0x080045f5
 8004620:	080045f5 	.word	0x080045f5
 8004624:	08004679 	.word	0x08004679
 8004628:	080045f5 	.word	0x080045f5
 800462c:	080045f5 	.word	0x080045f5
 8004630:	080045f5 	.word	0x080045f5
 8004634:	080045f5 	.word	0x080045f5
 8004638:	08004785 	.word	0x08004785
 800463c:	080046a9 	.word	0x080046a9
 8004640:	08004767 	.word	0x08004767
 8004644:	080045f5 	.word	0x080045f5
 8004648:	080045f5 	.word	0x080045f5
 800464c:	080047a7 	.word	0x080047a7
 8004650:	080045f5 	.word	0x080045f5
 8004654:	080046a9 	.word	0x080046a9
 8004658:	080045f5 	.word	0x080045f5
 800465c:	080045f5 	.word	0x080045f5
 8004660:	0800476f 	.word	0x0800476f
 8004664:	682b      	ldr	r3, [r5, #0]
 8004666:	1d1a      	adds	r2, r3, #4
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	602a      	str	r2, [r5, #0]
 800466c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004670:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004674:	2301      	movs	r3, #1
 8004676:	e0a3      	b.n	80047c0 <_printf_i+0x1f4>
 8004678:	6820      	ldr	r0, [r4, #0]
 800467a:	6829      	ldr	r1, [r5, #0]
 800467c:	0606      	lsls	r6, r0, #24
 800467e:	f101 0304 	add.w	r3, r1, #4
 8004682:	d50a      	bpl.n	800469a <_printf_i+0xce>
 8004684:	680e      	ldr	r6, [r1, #0]
 8004686:	602b      	str	r3, [r5, #0]
 8004688:	2e00      	cmp	r6, #0
 800468a:	da03      	bge.n	8004694 <_printf_i+0xc8>
 800468c:	232d      	movs	r3, #45	; 0x2d
 800468e:	4276      	negs	r6, r6
 8004690:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004694:	485e      	ldr	r0, [pc, #376]	; (8004810 <_printf_i+0x244>)
 8004696:	230a      	movs	r3, #10
 8004698:	e019      	b.n	80046ce <_printf_i+0x102>
 800469a:	680e      	ldr	r6, [r1, #0]
 800469c:	602b      	str	r3, [r5, #0]
 800469e:	f010 0f40 	tst.w	r0, #64	; 0x40
 80046a2:	bf18      	it	ne
 80046a4:	b236      	sxthne	r6, r6
 80046a6:	e7ef      	b.n	8004688 <_printf_i+0xbc>
 80046a8:	682b      	ldr	r3, [r5, #0]
 80046aa:	6820      	ldr	r0, [r4, #0]
 80046ac:	1d19      	adds	r1, r3, #4
 80046ae:	6029      	str	r1, [r5, #0]
 80046b0:	0601      	lsls	r1, r0, #24
 80046b2:	d501      	bpl.n	80046b8 <_printf_i+0xec>
 80046b4:	681e      	ldr	r6, [r3, #0]
 80046b6:	e002      	b.n	80046be <_printf_i+0xf2>
 80046b8:	0646      	lsls	r6, r0, #25
 80046ba:	d5fb      	bpl.n	80046b4 <_printf_i+0xe8>
 80046bc:	881e      	ldrh	r6, [r3, #0]
 80046be:	4854      	ldr	r0, [pc, #336]	; (8004810 <_printf_i+0x244>)
 80046c0:	2f6f      	cmp	r7, #111	; 0x6f
 80046c2:	bf0c      	ite	eq
 80046c4:	2308      	moveq	r3, #8
 80046c6:	230a      	movne	r3, #10
 80046c8:	2100      	movs	r1, #0
 80046ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80046ce:	6865      	ldr	r5, [r4, #4]
 80046d0:	60a5      	str	r5, [r4, #8]
 80046d2:	2d00      	cmp	r5, #0
 80046d4:	bfa2      	ittt	ge
 80046d6:	6821      	ldrge	r1, [r4, #0]
 80046d8:	f021 0104 	bicge.w	r1, r1, #4
 80046dc:	6021      	strge	r1, [r4, #0]
 80046de:	b90e      	cbnz	r6, 80046e4 <_printf_i+0x118>
 80046e0:	2d00      	cmp	r5, #0
 80046e2:	d04d      	beq.n	8004780 <_printf_i+0x1b4>
 80046e4:	4615      	mov	r5, r2
 80046e6:	fbb6 f1f3 	udiv	r1, r6, r3
 80046ea:	fb03 6711 	mls	r7, r3, r1, r6
 80046ee:	5dc7      	ldrb	r7, [r0, r7]
 80046f0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80046f4:	4637      	mov	r7, r6
 80046f6:	42bb      	cmp	r3, r7
 80046f8:	460e      	mov	r6, r1
 80046fa:	d9f4      	bls.n	80046e6 <_printf_i+0x11a>
 80046fc:	2b08      	cmp	r3, #8
 80046fe:	d10b      	bne.n	8004718 <_printf_i+0x14c>
 8004700:	6823      	ldr	r3, [r4, #0]
 8004702:	07de      	lsls	r6, r3, #31
 8004704:	d508      	bpl.n	8004718 <_printf_i+0x14c>
 8004706:	6923      	ldr	r3, [r4, #16]
 8004708:	6861      	ldr	r1, [r4, #4]
 800470a:	4299      	cmp	r1, r3
 800470c:	bfde      	ittt	le
 800470e:	2330      	movle	r3, #48	; 0x30
 8004710:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004714:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004718:	1b52      	subs	r2, r2, r5
 800471a:	6122      	str	r2, [r4, #16]
 800471c:	f8cd a000 	str.w	sl, [sp]
 8004720:	464b      	mov	r3, r9
 8004722:	aa03      	add	r2, sp, #12
 8004724:	4621      	mov	r1, r4
 8004726:	4640      	mov	r0, r8
 8004728:	f7ff fee2 	bl	80044f0 <_printf_common>
 800472c:	3001      	adds	r0, #1
 800472e:	d14c      	bne.n	80047ca <_printf_i+0x1fe>
 8004730:	f04f 30ff 	mov.w	r0, #4294967295
 8004734:	b004      	add	sp, #16
 8004736:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800473a:	4835      	ldr	r0, [pc, #212]	; (8004810 <_printf_i+0x244>)
 800473c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004740:	6829      	ldr	r1, [r5, #0]
 8004742:	6823      	ldr	r3, [r4, #0]
 8004744:	f851 6b04 	ldr.w	r6, [r1], #4
 8004748:	6029      	str	r1, [r5, #0]
 800474a:	061d      	lsls	r5, r3, #24
 800474c:	d514      	bpl.n	8004778 <_printf_i+0x1ac>
 800474e:	07df      	lsls	r7, r3, #31
 8004750:	bf44      	itt	mi
 8004752:	f043 0320 	orrmi.w	r3, r3, #32
 8004756:	6023      	strmi	r3, [r4, #0]
 8004758:	b91e      	cbnz	r6, 8004762 <_printf_i+0x196>
 800475a:	6823      	ldr	r3, [r4, #0]
 800475c:	f023 0320 	bic.w	r3, r3, #32
 8004760:	6023      	str	r3, [r4, #0]
 8004762:	2310      	movs	r3, #16
 8004764:	e7b0      	b.n	80046c8 <_printf_i+0xfc>
 8004766:	6823      	ldr	r3, [r4, #0]
 8004768:	f043 0320 	orr.w	r3, r3, #32
 800476c:	6023      	str	r3, [r4, #0]
 800476e:	2378      	movs	r3, #120	; 0x78
 8004770:	4828      	ldr	r0, [pc, #160]	; (8004814 <_printf_i+0x248>)
 8004772:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004776:	e7e3      	b.n	8004740 <_printf_i+0x174>
 8004778:	0659      	lsls	r1, r3, #25
 800477a:	bf48      	it	mi
 800477c:	b2b6      	uxthmi	r6, r6
 800477e:	e7e6      	b.n	800474e <_printf_i+0x182>
 8004780:	4615      	mov	r5, r2
 8004782:	e7bb      	b.n	80046fc <_printf_i+0x130>
 8004784:	682b      	ldr	r3, [r5, #0]
 8004786:	6826      	ldr	r6, [r4, #0]
 8004788:	6961      	ldr	r1, [r4, #20]
 800478a:	1d18      	adds	r0, r3, #4
 800478c:	6028      	str	r0, [r5, #0]
 800478e:	0635      	lsls	r5, r6, #24
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	d501      	bpl.n	8004798 <_printf_i+0x1cc>
 8004794:	6019      	str	r1, [r3, #0]
 8004796:	e002      	b.n	800479e <_printf_i+0x1d2>
 8004798:	0670      	lsls	r0, r6, #25
 800479a:	d5fb      	bpl.n	8004794 <_printf_i+0x1c8>
 800479c:	8019      	strh	r1, [r3, #0]
 800479e:	2300      	movs	r3, #0
 80047a0:	6123      	str	r3, [r4, #16]
 80047a2:	4615      	mov	r5, r2
 80047a4:	e7ba      	b.n	800471c <_printf_i+0x150>
 80047a6:	682b      	ldr	r3, [r5, #0]
 80047a8:	1d1a      	adds	r2, r3, #4
 80047aa:	602a      	str	r2, [r5, #0]
 80047ac:	681d      	ldr	r5, [r3, #0]
 80047ae:	6862      	ldr	r2, [r4, #4]
 80047b0:	2100      	movs	r1, #0
 80047b2:	4628      	mov	r0, r5
 80047b4:	f7fb fd1c 	bl	80001f0 <memchr>
 80047b8:	b108      	cbz	r0, 80047be <_printf_i+0x1f2>
 80047ba:	1b40      	subs	r0, r0, r5
 80047bc:	6060      	str	r0, [r4, #4]
 80047be:	6863      	ldr	r3, [r4, #4]
 80047c0:	6123      	str	r3, [r4, #16]
 80047c2:	2300      	movs	r3, #0
 80047c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047c8:	e7a8      	b.n	800471c <_printf_i+0x150>
 80047ca:	6923      	ldr	r3, [r4, #16]
 80047cc:	462a      	mov	r2, r5
 80047ce:	4649      	mov	r1, r9
 80047d0:	4640      	mov	r0, r8
 80047d2:	47d0      	blx	sl
 80047d4:	3001      	adds	r0, #1
 80047d6:	d0ab      	beq.n	8004730 <_printf_i+0x164>
 80047d8:	6823      	ldr	r3, [r4, #0]
 80047da:	079b      	lsls	r3, r3, #30
 80047dc:	d413      	bmi.n	8004806 <_printf_i+0x23a>
 80047de:	68e0      	ldr	r0, [r4, #12]
 80047e0:	9b03      	ldr	r3, [sp, #12]
 80047e2:	4298      	cmp	r0, r3
 80047e4:	bfb8      	it	lt
 80047e6:	4618      	movlt	r0, r3
 80047e8:	e7a4      	b.n	8004734 <_printf_i+0x168>
 80047ea:	2301      	movs	r3, #1
 80047ec:	4632      	mov	r2, r6
 80047ee:	4649      	mov	r1, r9
 80047f0:	4640      	mov	r0, r8
 80047f2:	47d0      	blx	sl
 80047f4:	3001      	adds	r0, #1
 80047f6:	d09b      	beq.n	8004730 <_printf_i+0x164>
 80047f8:	3501      	adds	r5, #1
 80047fa:	68e3      	ldr	r3, [r4, #12]
 80047fc:	9903      	ldr	r1, [sp, #12]
 80047fe:	1a5b      	subs	r3, r3, r1
 8004800:	42ab      	cmp	r3, r5
 8004802:	dcf2      	bgt.n	80047ea <_printf_i+0x21e>
 8004804:	e7eb      	b.n	80047de <_printf_i+0x212>
 8004806:	2500      	movs	r5, #0
 8004808:	f104 0619 	add.w	r6, r4, #25
 800480c:	e7f5      	b.n	80047fa <_printf_i+0x22e>
 800480e:	bf00      	nop
 8004810:	08007639 	.word	0x08007639
 8004814:	0800764a 	.word	0x0800764a

08004818 <_sbrk_r>:
 8004818:	b538      	push	{r3, r4, r5, lr}
 800481a:	4d06      	ldr	r5, [pc, #24]	; (8004834 <_sbrk_r+0x1c>)
 800481c:	2300      	movs	r3, #0
 800481e:	4604      	mov	r4, r0
 8004820:	4608      	mov	r0, r1
 8004822:	602b      	str	r3, [r5, #0]
 8004824:	f7fd fcc2 	bl	80021ac <_sbrk>
 8004828:	1c43      	adds	r3, r0, #1
 800482a:	d102      	bne.n	8004832 <_sbrk_r+0x1a>
 800482c:	682b      	ldr	r3, [r5, #0]
 800482e:	b103      	cbz	r3, 8004832 <_sbrk_r+0x1a>
 8004830:	6023      	str	r3, [r4, #0]
 8004832:	bd38      	pop	{r3, r4, r5, pc}
 8004834:	20000298 	.word	0x20000298

08004838 <memmove>:
 8004838:	4288      	cmp	r0, r1
 800483a:	b510      	push	{r4, lr}
 800483c:	eb01 0402 	add.w	r4, r1, r2
 8004840:	d902      	bls.n	8004848 <memmove+0x10>
 8004842:	4284      	cmp	r4, r0
 8004844:	4623      	mov	r3, r4
 8004846:	d807      	bhi.n	8004858 <memmove+0x20>
 8004848:	1e43      	subs	r3, r0, #1
 800484a:	42a1      	cmp	r1, r4
 800484c:	d008      	beq.n	8004860 <memmove+0x28>
 800484e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004852:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004856:	e7f8      	b.n	800484a <memmove+0x12>
 8004858:	4402      	add	r2, r0
 800485a:	4601      	mov	r1, r0
 800485c:	428a      	cmp	r2, r1
 800485e:	d100      	bne.n	8004862 <memmove+0x2a>
 8004860:	bd10      	pop	{r4, pc}
 8004862:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004866:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800486a:	e7f7      	b.n	800485c <memmove+0x24>

0800486c <__malloc_lock>:
 800486c:	4801      	ldr	r0, [pc, #4]	; (8004874 <__malloc_lock+0x8>)
 800486e:	f7ff bc4d 	b.w	800410c <__retarget_lock_acquire_recursive>
 8004872:	bf00      	nop
 8004874:	2000028c 	.word	0x2000028c

08004878 <__malloc_unlock>:
 8004878:	4801      	ldr	r0, [pc, #4]	; (8004880 <__malloc_unlock+0x8>)
 800487a:	f7ff bc48 	b.w	800410e <__retarget_lock_release_recursive>
 800487e:	bf00      	nop
 8004880:	2000028c 	.word	0x2000028c

08004884 <_free_r>:
 8004884:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004886:	2900      	cmp	r1, #0
 8004888:	d044      	beq.n	8004914 <_free_r+0x90>
 800488a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800488e:	9001      	str	r0, [sp, #4]
 8004890:	2b00      	cmp	r3, #0
 8004892:	f1a1 0404 	sub.w	r4, r1, #4
 8004896:	bfb8      	it	lt
 8004898:	18e4      	addlt	r4, r4, r3
 800489a:	f7ff ffe7 	bl	800486c <__malloc_lock>
 800489e:	4a1e      	ldr	r2, [pc, #120]	; (8004918 <_free_r+0x94>)
 80048a0:	9801      	ldr	r0, [sp, #4]
 80048a2:	6813      	ldr	r3, [r2, #0]
 80048a4:	b933      	cbnz	r3, 80048b4 <_free_r+0x30>
 80048a6:	6063      	str	r3, [r4, #4]
 80048a8:	6014      	str	r4, [r2, #0]
 80048aa:	b003      	add	sp, #12
 80048ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80048b0:	f7ff bfe2 	b.w	8004878 <__malloc_unlock>
 80048b4:	42a3      	cmp	r3, r4
 80048b6:	d908      	bls.n	80048ca <_free_r+0x46>
 80048b8:	6825      	ldr	r5, [r4, #0]
 80048ba:	1961      	adds	r1, r4, r5
 80048bc:	428b      	cmp	r3, r1
 80048be:	bf01      	itttt	eq
 80048c0:	6819      	ldreq	r1, [r3, #0]
 80048c2:	685b      	ldreq	r3, [r3, #4]
 80048c4:	1949      	addeq	r1, r1, r5
 80048c6:	6021      	streq	r1, [r4, #0]
 80048c8:	e7ed      	b.n	80048a6 <_free_r+0x22>
 80048ca:	461a      	mov	r2, r3
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	b10b      	cbz	r3, 80048d4 <_free_r+0x50>
 80048d0:	42a3      	cmp	r3, r4
 80048d2:	d9fa      	bls.n	80048ca <_free_r+0x46>
 80048d4:	6811      	ldr	r1, [r2, #0]
 80048d6:	1855      	adds	r5, r2, r1
 80048d8:	42a5      	cmp	r5, r4
 80048da:	d10b      	bne.n	80048f4 <_free_r+0x70>
 80048dc:	6824      	ldr	r4, [r4, #0]
 80048de:	4421      	add	r1, r4
 80048e0:	1854      	adds	r4, r2, r1
 80048e2:	42a3      	cmp	r3, r4
 80048e4:	6011      	str	r1, [r2, #0]
 80048e6:	d1e0      	bne.n	80048aa <_free_r+0x26>
 80048e8:	681c      	ldr	r4, [r3, #0]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	6053      	str	r3, [r2, #4]
 80048ee:	4421      	add	r1, r4
 80048f0:	6011      	str	r1, [r2, #0]
 80048f2:	e7da      	b.n	80048aa <_free_r+0x26>
 80048f4:	d902      	bls.n	80048fc <_free_r+0x78>
 80048f6:	230c      	movs	r3, #12
 80048f8:	6003      	str	r3, [r0, #0]
 80048fa:	e7d6      	b.n	80048aa <_free_r+0x26>
 80048fc:	6825      	ldr	r5, [r4, #0]
 80048fe:	1961      	adds	r1, r4, r5
 8004900:	428b      	cmp	r3, r1
 8004902:	bf04      	itt	eq
 8004904:	6819      	ldreq	r1, [r3, #0]
 8004906:	685b      	ldreq	r3, [r3, #4]
 8004908:	6063      	str	r3, [r4, #4]
 800490a:	bf04      	itt	eq
 800490c:	1949      	addeq	r1, r1, r5
 800490e:	6021      	streq	r1, [r4, #0]
 8004910:	6054      	str	r4, [r2, #4]
 8004912:	e7ca      	b.n	80048aa <_free_r+0x26>
 8004914:	b003      	add	sp, #12
 8004916:	bd30      	pop	{r4, r5, pc}
 8004918:	20000290 	.word	0x20000290

0800491c <_realloc_r>:
 800491c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004920:	4680      	mov	r8, r0
 8004922:	4614      	mov	r4, r2
 8004924:	460e      	mov	r6, r1
 8004926:	b921      	cbnz	r1, 8004932 <_realloc_r+0x16>
 8004928:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800492c:	4611      	mov	r1, r2
 800492e:	f7ff bc0f 	b.w	8004150 <_malloc_r>
 8004932:	b92a      	cbnz	r2, 8004940 <_realloc_r+0x24>
 8004934:	f7ff ffa6 	bl	8004884 <_free_r>
 8004938:	4625      	mov	r5, r4
 800493a:	4628      	mov	r0, r5
 800493c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004940:	f000 f81b 	bl	800497a <_malloc_usable_size_r>
 8004944:	4284      	cmp	r4, r0
 8004946:	4607      	mov	r7, r0
 8004948:	d802      	bhi.n	8004950 <_realloc_r+0x34>
 800494a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800494e:	d812      	bhi.n	8004976 <_realloc_r+0x5a>
 8004950:	4621      	mov	r1, r4
 8004952:	4640      	mov	r0, r8
 8004954:	f7ff fbfc 	bl	8004150 <_malloc_r>
 8004958:	4605      	mov	r5, r0
 800495a:	2800      	cmp	r0, #0
 800495c:	d0ed      	beq.n	800493a <_realloc_r+0x1e>
 800495e:	42bc      	cmp	r4, r7
 8004960:	4622      	mov	r2, r4
 8004962:	4631      	mov	r1, r6
 8004964:	bf28      	it	cs
 8004966:	463a      	movcs	r2, r7
 8004968:	f7ff fb80 	bl	800406c <memcpy>
 800496c:	4631      	mov	r1, r6
 800496e:	4640      	mov	r0, r8
 8004970:	f7ff ff88 	bl	8004884 <_free_r>
 8004974:	e7e1      	b.n	800493a <_realloc_r+0x1e>
 8004976:	4635      	mov	r5, r6
 8004978:	e7df      	b.n	800493a <_realloc_r+0x1e>

0800497a <_malloc_usable_size_r>:
 800497a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800497e:	1f18      	subs	r0, r3, #4
 8004980:	2b00      	cmp	r3, #0
 8004982:	bfbc      	itt	lt
 8004984:	580b      	ldrlt	r3, [r1, r0]
 8004986:	18c0      	addlt	r0, r0, r3
 8004988:	4770      	bx	lr
	...

0800498c <_init>:
 800498c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800498e:	bf00      	nop
 8004990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004992:	bc08      	pop	{r3}
 8004994:	469e      	mov	lr, r3
 8004996:	4770      	bx	lr

08004998 <_fini>:
 8004998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800499a:	bf00      	nop
 800499c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800499e:	bc08      	pop	{r3}
 80049a0:	469e      	mov	lr, r3
 80049a2:	4770      	bx	lr
